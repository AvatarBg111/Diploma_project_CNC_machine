
CNC_Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004510  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800461c  0800461c  0001461c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004654  08004654  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004654  08004654  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004654  08004654  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004654  08004654  00014654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004658  08004658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800465c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000010  0800466c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  0800466c  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cdc3  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002036  00000000  00000000  0002ce3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  0002ee78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f1  00000000  00000000  0002fb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000182c0  00000000  00000000  00030519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f003  00000000  00000000  000487d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ae35  00000000  00000000  000577dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034bc  00000000  00000000  000e2614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e5ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08004604 	.word	0x08004604

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08004604 	.word	0x08004604

0800014c <update_button_status>:
/* Private user code ---------------------------------------------------------*/
/**
  * @brief Updates button statuses
  * Must be called from interrupt handler of a TIMER
  */
void update_button_status(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < BUTTON_CHANNELS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e057      	b.n	8000208 <update_button_status+0xbc>
		if(button_matrix[i].port == NULL){
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	4a2f      	ldr	r2, [pc, #188]	; (8000218 <update_button_status+0xcc>)
 800015c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000160:	2b00      	cmp	r3, #0
 8000162:	d04d      	beq.n	8000200 <update_button_status+0xb4>
			continue;
		}else if(HAL_GPIO_ReadPin(button_matrix[i].port, button_matrix[i].pin) != but_stat_channels[i]){
 8000164:	79fb      	ldrb	r3, [r7, #7]
 8000166:	4a2c      	ldr	r2, [pc, #176]	; (8000218 <update_button_status+0xcc>)
 8000168:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	492a      	ldr	r1, [pc, #168]	; (8000218 <update_button_status+0xcc>)
 8000170:	00db      	lsls	r3, r3, #3
 8000172:	440b      	add	r3, r1
 8000174:	889b      	ldrh	r3, [r3, #4]
 8000176:	4619      	mov	r1, r3
 8000178:	4610      	mov	r0, r2
 800017a:	f001 ff9b 	bl	80020b4 <HAL_GPIO_ReadPin>
 800017e:	4603      	mov	r3, r0
 8000180:	4619      	mov	r1, r3
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	4a25      	ldr	r2, [pc, #148]	; (800021c <update_button_status+0xd0>)
 8000186:	5cd3      	ldrb	r3, [r2, r3]
 8000188:	4299      	cmp	r1, r3
 800018a:	d02a      	beq.n	80001e2 <update_button_status+0x96>
			if(++but_stat_cnts[i] >= update_time){
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	4a24      	ldr	r2, [pc, #144]	; (8000220 <update_button_status+0xd4>)
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	3201      	adds	r2, #1
 8000196:	4922      	ldr	r1, [pc, #136]	; (8000220 <update_button_status+0xd4>)
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800019c:	4a20      	ldr	r2, [pc, #128]	; (8000220 <update_button_status+0xd4>)
 800019e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001a2:	4a20      	ldr	r2, [pc, #128]	; (8000224 <update_button_status+0xd8>)
 80001a4:	7812      	ldrb	r2, [r2, #0]
 80001a6:	4293      	cmp	r3, r2
 80001a8:	d32b      	bcc.n	8000202 <update_button_status+0xb6>
				but_stat_cnts[i] = 0;
 80001aa:	79fb      	ldrb	r3, [r7, #7]
 80001ac:	4a1c      	ldr	r2, [pc, #112]	; (8000220 <update_button_status+0xd4>)
 80001ae:	2100      	movs	r1, #0
 80001b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

				if(but_stat_channels[i] == GPIO_PIN_RESET){
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	4a19      	ldr	r2, [pc, #100]	; (800021c <update_button_status+0xd0>)
 80001b8:	5cd3      	ldrb	r3, [r2, r3]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d108      	bne.n	80001d0 <update_button_status+0x84>
					but_stat_channels[i] = GPIO_PIN_SET;
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	4a16      	ldr	r2, [pc, #88]	; (800021c <update_button_status+0xd0>)
 80001c2:	2101      	movs	r1, #1
 80001c4:	54d1      	strb	r1, [r2, r3]
					update_time = update_time_high_to_low;
 80001c6:	4b18      	ldr	r3, [pc, #96]	; (8000228 <update_button_status+0xdc>)
 80001c8:	781a      	ldrb	r2, [r3, #0]
 80001ca:	4b16      	ldr	r3, [pc, #88]	; (8000224 <update_button_status+0xd8>)
 80001cc:	701a      	strb	r2, [r3, #0]
 80001ce:	e018      	b.n	8000202 <update_button_status+0xb6>
				}else{
					but_stat_channels[i] = GPIO_PIN_RESET;
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	4a12      	ldr	r2, [pc, #72]	; (800021c <update_button_status+0xd0>)
 80001d4:	2100      	movs	r1, #0
 80001d6:	54d1      	strb	r1, [r2, r3]
					update_time = update_time_low_to_high;
 80001d8:	4b14      	ldr	r3, [pc, #80]	; (800022c <update_button_status+0xe0>)
 80001da:	781a      	ldrb	r2, [r3, #0]
 80001dc:	4b11      	ldr	r3, [pc, #68]	; (8000224 <update_button_status+0xd8>)
 80001de:	701a      	strb	r2, [r3, #0]
 80001e0:	e00f      	b.n	8000202 <update_button_status+0xb6>
				}
			}
		}else{
			if(but_stat_cnts[i] > 0){
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	4a0e      	ldr	r2, [pc, #56]	; (8000220 <update_button_status+0xd4>)
 80001e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d009      	beq.n	8000202 <update_button_status+0xb6>
				but_stat_cnts[i]--;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	4a0b      	ldr	r2, [pc, #44]	; (8000220 <update_button_status+0xd4>)
 80001f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f6:	3a01      	subs	r2, #1
 80001f8:	4909      	ldr	r1, [pc, #36]	; (8000220 <update_button_status+0xd4>)
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80001fe:	e000      	b.n	8000202 <update_button_status+0xb6>
			continue;
 8000200:	bf00      	nop
	for(uint8_t i = 0; i < BUTTON_CHANNELS; i++){
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	3301      	adds	r3, #1
 8000206:	71fb      	strb	r3, [r7, #7]
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	2b0f      	cmp	r3, #15
 800020c:	d9a4      	bls.n	8000158 <update_button_status+0xc>
			}
		}
	}

	return;
 800020e:	bf00      	nop
}
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	2000002c 	.word	0x2000002c
 800021c:	200000ac 	.word	0x200000ac
 8000220:	200000bc 	.word	0x200000bc
 8000224:	200000fc 	.word	0x200000fc
 8000228:	20000000 	.word	0x20000000
 800022c:	20000001 	.word	0x20000001

08000230 <clear_button_statuses>:
}

/**
  * @brief Clear the buttons statuses
  */
void clear_button_statuses(void){
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < BUTTON_CHANNELS; i++){
 8000236:	2300      	movs	r3, #0
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	e011      	b.n	8000260 <clear_button_statuses+0x30>
		button_matrix[i].port = NULL;
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <clear_button_statuses+0x44>)
 8000240:	2100      	movs	r1, #0
 8000242:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		button_matrix[i].pin = 0;
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	4a0a      	ldr	r2, [pc, #40]	; (8000274 <clear_button_statuses+0x44>)
 800024a:	00db      	lsls	r3, r3, #3
 800024c:	4413      	add	r3, r2
 800024e:	2200      	movs	r2, #0
 8000250:	809a      	strh	r2, [r3, #4]
		but_stat_channels[i] = GPIO_PIN_RESET;
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	4a08      	ldr	r2, [pc, #32]	; (8000278 <clear_button_statuses+0x48>)
 8000256:	2100      	movs	r1, #0
 8000258:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < BUTTON_CHANNELS; i++){
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	3301      	adds	r3, #1
 800025e:	71fb      	strb	r3, [r7, #7]
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	2b0f      	cmp	r3, #15
 8000264:	d9ea      	bls.n	800023c <clear_button_statuses+0xc>
	}
}
 8000266:	bf00      	nop
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	2000002c 	.word	0x2000002c
 8000278:	200000ac 	.word	0x200000ac

0800027c <set_button_channel>:

/**
  * @brief Set button pin association with a channel
  */
HAL_StatusTypeDef set_button_channel(GPIO_TypeDef *port, uint16_t pin, uint8_t channel){
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	460b      	mov	r3, r1
 8000286:	807b      	strh	r3, [r7, #2]
 8000288:	4613      	mov	r3, r2
 800028a:	707b      	strb	r3, [r7, #1]
	if(startup == true){
 800028c:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <set_button_channel+0x54>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d004      	beq.n	800029e <set_button_channel+0x22>
		startup = false;
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <set_button_channel+0x54>)
 8000296:	2200      	movs	r2, #0
 8000298:	701a      	strb	r2, [r3, #0]
		clear_button_statuses();
 800029a:	f7ff ffc9 	bl	8000230 <clear_button_statuses>
	}

	if(channel < BUTTON_CHANNELS && port != NULL){
 800029e:	787b      	ldrb	r3, [r7, #1]
 80002a0:	2b0f      	cmp	r3, #15
 80002a2:	d80f      	bhi.n	80002c4 <set_button_channel+0x48>
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00c      	beq.n	80002c4 <set_button_channel+0x48>
		button_matrix[channel].port = port;
 80002aa:	787b      	ldrb	r3, [r7, #1]
 80002ac:	4909      	ldr	r1, [pc, #36]	; (80002d4 <set_button_channel+0x58>)
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		button_matrix[channel].pin = pin;
 80002b4:	787b      	ldrb	r3, [r7, #1]
 80002b6:	4a07      	ldr	r2, [pc, #28]	; (80002d4 <set_button_channel+0x58>)
 80002b8:	00db      	lsls	r3, r3, #3
 80002ba:	4413      	add	r3, r2
 80002bc:	887a      	ldrh	r2, [r7, #2]
 80002be:	809a      	strh	r2, [r3, #4]
		return HAL_OK;
 80002c0:	2300      	movs	r3, #0
 80002c2:	e000      	b.n	80002c6 <set_button_channel+0x4a>
	}

	return HAL_ERROR;
 80002c4:	2301      	movs	r3, #1
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20000002 	.word	0x20000002
 80002d4:	2000002c 	.word	0x2000002c

080002d8 <get_button_state>:

/**
  * @brief Get button status
  */
GPIO_PinState get_button_state(uint8_t channel){
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	return but_stat_channels[channel];
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	4a03      	ldr	r2, [pc, #12]	; (80002f4 <get_button_state+0x1c>)
 80002e6:	5cd3      	ldrb	r3, [r2, r3]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	200000ac 	.word	0x200000ac

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fc:	f001 f944 	bl	8001588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000300:	f000 f822 	bl	8000348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000304:	f000 f9f8 	bl	80006f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000308:	f000 f9d0 	bl	80006ac <MX_DMA_Init>
  MX_TIM2_Init();
 800030c:	f000 f8ae 	bl	800046c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000310:	f000 f900 	bl	8000514 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000314:	f000 f858 	bl	80003c8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000318:	f000 f99e 	bl	8000658 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800031c:	f000 f94e 	bl	80005bc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  // Initialize interfaces
  Init_interfaces();
 8000320:	f000 fa7e 	bl	8000820 <Init_interfaces>
  /* USER CODE BEGIN WHILE */
  while(1)
  {
	// The program will enter this if statement when the flag
	// has been set which happens inside TIM4 interrupt handler
	if(process_inputs_flag && pendant_status){
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <main+0x48>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0fb      	beq.n	8000324 <main+0x2c>
 800032c:	4b05      	ldr	r3, [pc, #20]	; (8000344 <main+0x4c>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0f7      	beq.n	8000324 <main+0x2c>
		// Call function for processing system inputs
		process_inputs();
 8000334:	f000 fb46 	bl	80009c4 <process_inputs>

		// Reset the entry flag
		process_inputs_flag = false;
 8000338:	4b01      	ldr	r3, [pc, #4]	; (8000340 <main+0x48>)
 800033a:	2200      	movs	r2, #0
 800033c:	701a      	strb	r2, [r3, #0]
	if(process_inputs_flag && pendant_status){
 800033e:	e7f1      	b.n	8000324 <main+0x2c>
 8000340:	200002f0 	.word	0x200002f0
 8000344:	200002f1 	.word	0x200002f1

08000348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b090      	sub	sp, #64	; 0x40
 800034c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034e:	f107 0318 	add.w	r3, r7, #24
 8000352:	2228      	movs	r2, #40	; 0x28
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f004 f912 	bl	8004580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800036a:	2302      	movs	r3, #2
 800036c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036e:	2301      	movs	r3, #1
 8000370:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000372:	2310      	movs	r3, #16
 8000374:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000376:	2302      	movs	r3, #2
 8000378:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800037a:	2300      	movs	r3, #0
 800037c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800037e:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000382:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000384:	f107 0318 	add.w	r3, r7, #24
 8000388:	4618      	mov	r0, r3
 800038a:	f001 fec3 	bl	8002114 <HAL_RCC_OscConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000394:	f000 fe33 	bl	8000ffe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000398:	230f      	movs	r3, #15
 800039a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039c:	2302      	movs	r3, #2
 800039e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2101      	movs	r1, #1
 80003b0:	4618      	mov	r0, r3
 80003b2:	f002 f931 	bl	8002618 <HAL_RCC_ClockConfig>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80003bc:	f000 fe1f 	bl	8000ffe <Error_Handler>
  }
}
 80003c0:	bf00      	nop
 80003c2:	3740      	adds	r7, #64	; 0x40
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ce:	f107 0308 	add.w	r3, r7, #8
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003dc:	463b      	mov	r3, r7
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003e4:	4b1f      	ldr	r3, [pc, #124]	; (8000464 <MX_TIM1_Init+0x9c>)
 80003e6:	4a20      	ldr	r2, [pc, #128]	; (8000468 <MX_TIM1_Init+0xa0>)
 80003e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 80003ea:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <MX_TIM1_Init+0x9c>)
 80003ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f2:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <MX_TIM1_Init+0x9c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80003f8:	4b1a      	ldr	r3, [pc, #104]	; (8000464 <MX_TIM1_Init+0x9c>)
 80003fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <MX_TIM1_Init+0x9c>)
 8000402:	2200      	movs	r2, #0
 8000404:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000406:	4b17      	ldr	r3, [pc, #92]	; (8000464 <MX_TIM1_Init+0x9c>)
 8000408:	2200      	movs	r2, #0
 800040a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <MX_TIM1_Init+0x9c>)
 800040e:	2200      	movs	r2, #0
 8000410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000412:	4814      	ldr	r0, [pc, #80]	; (8000464 <MX_TIM1_Init+0x9c>)
 8000414:	f002 fa8e 	bl	8002934 <HAL_TIM_Base_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800041e:	f000 fdee 	bl	8000ffe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000426:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000428:	f107 0308 	add.w	r3, r7, #8
 800042c:	4619      	mov	r1, r3
 800042e:	480d      	ldr	r0, [pc, #52]	; (8000464 <MX_TIM1_Init+0x9c>)
 8000430:	f002 fdfc 	bl	800302c <HAL_TIM_ConfigClockSource>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800043a:	f000 fde0 	bl	8000ffe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800043e:	2300      	movs	r3, #0
 8000440:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000442:	2300      	movs	r3, #0
 8000444:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000446:	463b      	mov	r3, r7
 8000448:	4619      	mov	r1, r3
 800044a:	4806      	ldr	r0, [pc, #24]	; (8000464 <MX_TIM1_Init+0x9c>)
 800044c:	f002 fffe 	bl	800344c <HAL_TIMEx_MasterConfigSynchronization>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000456:	f000 fdd2 	bl	8000ffe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	3718      	adds	r7, #24
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000100 	.word	0x20000100
 8000468:	40012c00 	.word	0x40012c00

0800046c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08c      	sub	sp, #48	; 0x30
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000472:	f107 030c 	add.w	r3, r7, #12
 8000476:	2224      	movs	r2, #36	; 0x24
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f004 f880 	bl	8004580 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000488:	4b21      	ldr	r3, [pc, #132]	; (8000510 <MX_TIM2_Init+0xa4>)
 800048a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800048e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000490:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <MX_TIM2_Init+0xa4>)
 8000492:	2200      	movs	r2, #0
 8000494:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000496:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <MX_TIM2_Init+0xa4>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800049c:	4b1c      	ldr	r3, [pc, #112]	; (8000510 <MX_TIM2_Init+0xa4>)
 800049e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a4:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <MX_TIM2_Init+0xa4>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004aa:	4b19      	ldr	r3, [pc, #100]	; (8000510 <MX_TIM2_Init+0xa4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80004b0:	2301      	movs	r3, #1
 80004b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004b4:	2300      	movs	r3, #0
 80004b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004b8:	2301      	movs	r3, #1
 80004ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004c4:	2300      	movs	r3, #0
 80004c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004c8:	2301      	movs	r3, #1
 80004ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004cc:	2300      	movs	r3, #0
 80004ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80004d4:	f107 030c 	add.w	r3, r7, #12
 80004d8:	4619      	mov	r1, r3
 80004da:	480d      	ldr	r0, [pc, #52]	; (8000510 <MX_TIM2_Init+0xa4>)
 80004dc:	f002 fb6e 	bl	8002bbc <HAL_TIM_Encoder_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80004e6:	f000 fd8a 	bl	8000ffe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	4619      	mov	r1, r3
 80004f6:	4806      	ldr	r0, [pc, #24]	; (8000510 <MX_TIM2_Init+0xa4>)
 80004f8:	f002 ffa8 	bl	800344c <HAL_TIMEx_MasterConfigSynchronization>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000502:	f000 fd7c 	bl	8000ffe <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000506:	bf00      	nop
 8000508:	3730      	adds	r7, #48	; 0x30
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000148 	.word	0x20000148

08000514 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08c      	sub	sp, #48	; 0x30
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800051a:	f107 030c 	add.w	r3, r7, #12
 800051e:	2224      	movs	r2, #36	; 0x24
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f004 f82c 	bl	8004580 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000530:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <MX_TIM3_Init+0xa0>)
 8000532:	4a21      	ldr	r2, [pc, #132]	; (80005b8 <MX_TIM3_Init+0xa4>)
 8000534:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000536:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <MX_TIM3_Init+0xa0>)
 8000538:	2200      	movs	r2, #0
 800053a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053c:	4b1d      	ldr	r3, [pc, #116]	; (80005b4 <MX_TIM3_Init+0xa0>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000542:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <MX_TIM3_Init+0xa0>)
 8000544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000548:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054a:	4b1a      	ldr	r3, [pc, #104]	; (80005b4 <MX_TIM3_Init+0xa0>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000550:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <MX_TIM3_Init+0xa0>)
 8000552:	2200      	movs	r2, #0
 8000554:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000556:	2301      	movs	r3, #1
 8000558:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800055a:	2300      	movs	r3, #0
 800055c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800055e:	2301      	movs	r3, #1
 8000560:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800056a:	2300      	movs	r3, #0
 800056c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800056e:	2301      	movs	r3, #1
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	4619      	mov	r1, r3
 8000580:	480c      	ldr	r0, [pc, #48]	; (80005b4 <MX_TIM3_Init+0xa0>)
 8000582:	f002 fb1b 	bl	8002bbc <HAL_TIM_Encoder_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800058c:	f000 fd37 	bl	8000ffe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	4619      	mov	r1, r3
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <MX_TIM3_Init+0xa0>)
 800059e:	f002 ff55 	bl	800344c <HAL_TIMEx_MasterConfigSynchronization>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80005a8:	f000 fd29 	bl	8000ffe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005ac:	bf00      	nop
 80005ae:	3730      	adds	r7, #48	; 0x30
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000190 	.word	0x20000190
 80005b8:	40000400 	.word	0x40000400

080005bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c2:	f107 0308 	add.w	r3, r7, #8
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d0:	463b      	mov	r3, r7
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80005d8:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <MX_TIM4_Init+0x94>)
 80005da:	4a1e      	ldr	r2, [pc, #120]	; (8000654 <MX_TIM4_Init+0x98>)
 80005dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 320;
 80005de:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_TIM4_Init+0x94>)
 80005e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80005e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_TIM4_Init+0x94>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000 - 1;
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_TIM4_Init+0x94>)
 80005ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_TIM4_Init+0x94>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_TIM4_Init+0x94>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000600:	4813      	ldr	r0, [pc, #76]	; (8000650 <MX_TIM4_Init+0x94>)
 8000602:	f002 f997 	bl	8002934 <HAL_TIM_Base_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800060c:	f000 fcf7 	bl	8000ffe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000614:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	4619      	mov	r1, r3
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <MX_TIM4_Init+0x94>)
 800061e:	f002 fd05 	bl	800302c <HAL_TIM_ConfigClockSource>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000628:	f000 fce9 	bl	8000ffe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000634:	463b      	mov	r3, r7
 8000636:	4619      	mov	r1, r3
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_TIM4_Init+0x94>)
 800063a:	f002 ff07 	bl	800344c <HAL_TIMEx_MasterConfigSynchronization>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000644:	f000 fcdb 	bl	8000ffe <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	3718      	adds	r7, #24
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200001d8 	.word	0x200001d8
 8000654:	40000800 	.word	0x40000800

08000658 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800065c:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_USART2_UART_Init+0x48>)
 800065e:	4a11      	ldr	r2, [pc, #68]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 8000660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 200000;
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_USART2_UART_Init+0x48>)
 8000664:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <MX_USART2_UART_Init+0x50>)
 8000666:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_USART2_UART_Init+0x48>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_USART2_UART_Init+0x48>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <MX_USART2_UART_Init+0x48>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_USART2_UART_Init+0x48>)
 800067c:	220c      	movs	r2, #12
 800067e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <MX_USART2_UART_Init+0x48>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_USART2_UART_Init+0x48>)
 8000688:	2200      	movs	r2, #0
 800068a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_USART2_UART_Init+0x48>)
 800068e:	f002 ff4d 	bl	800352c <HAL_UART_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000698:	f000 fcb1 	bl	8000ffe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000220 	.word	0x20000220
 80006a4:	40004400 	.word	0x40004400
 80006a8:	00030d40 	.word	0x00030d40

080006ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_DMA_Init+0x48>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a0f      	ldr	r2, [pc, #60]	; (80006f4 <MX_DMA_Init+0x48>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6153      	str	r3, [r2, #20]
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_DMA_Init+0x48>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 1, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2101      	movs	r1, #1
 80006ce:	2010      	movs	r0, #16
 80006d0:	f001 f893 	bl	80017fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006d4:	2010      	movs	r0, #16
 80006d6:	f001 f8ac 	bl	8001832 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 1, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2101      	movs	r1, #1
 80006de:	2011      	movs	r0, #17
 80006e0:	f001 f88b 	bl	80017fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80006e4:	2011      	movs	r0, #17
 80006e6:	f001 f8a4 	bl	8001832 <HAL_NVIC_EnableIRQ>

}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070c:	4b40      	ldr	r3, [pc, #256]	; (8000810 <MX_GPIO_Init+0x118>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a3f      	ldr	r2, [pc, #252]	; (8000810 <MX_GPIO_Init+0x118>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b3d      	ldr	r3, [pc, #244]	; (8000810 <MX_GPIO_Init+0x118>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	4b3a      	ldr	r3, [pc, #232]	; (8000810 <MX_GPIO_Init+0x118>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a39      	ldr	r2, [pc, #228]	; (8000810 <MX_GPIO_Init+0x118>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b37      	ldr	r3, [pc, #220]	; (8000810 <MX_GPIO_Init+0x118>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0304 	and.w	r3, r3, #4
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073c:	4b34      	ldr	r3, [pc, #208]	; (8000810 <MX_GPIO_Init+0x118>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a33      	ldr	r2, [pc, #204]	; (8000810 <MX_GPIO_Init+0x118>)
 8000742:	f043 0308 	orr.w	r3, r3, #8
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b31      	ldr	r3, [pc, #196]	; (8000810 <MX_GPIO_Init+0x118>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0308 	and.w	r3, r3, #8
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLOOD_LED_Pin|MIST_LED_Pin|CYCLE_START_LED_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800075a:	482e      	ldr	r0, [pc, #184]	; (8000814 <MX_GPIO_Init+0x11c>)
 800075c:	f001 fcc1 	bl	80020e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MPG_ON_LED_Pin|AXIS_X_MULTIPLIER_LED_1_Pin|AXIS_X_MULTIPLIER_LED_2_Pin|AXIS_X_MULTIPLIER_LED_3_Pin
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 411e 	mov.w	r1, #40448	; 0x9e00
 8000766:	482c      	ldr	r0, [pc, #176]	; (8000818 <MX_GPIO_Init+0x120>)
 8000768:	f001 fcbb 	bl	80020e2 <HAL_GPIO_WritePin>
                          |AXIS_YZ_MULTIPLIER_LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AXIS_YZ_MULTIPLIER_LED_2_Pin|AXIS_YZ_MULTIPLIER_LED_3_Pin|YZ_SW_LED_Y_Pin|YZ_SW_LED_Z_Pin
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8000772:	482a      	ldr	r0, [pc, #168]	; (800081c <MX_GPIO_Init+0x124>)
 8000774:	f001 fcb5 	bl	80020e2 <HAL_GPIO_WritePin>
                          |HOLD_LED_Pin|SPINDLE_CW_LED_Pin|SPINDLE_CCW_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : FLOOD_LED_Pin MIST_LED_Pin CYCLE_START_LED_Pin */
  GPIO_InitStruct.Pin = FLOOD_LED_Pin|MIST_LED_Pin|CYCLE_START_LED_Pin;
 8000778:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2302      	movs	r3, #2
 8000788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	4619      	mov	r1, r3
 8000790:	4820      	ldr	r0, [pc, #128]	; (8000814 <MX_GPIO_Init+0x11c>)
 8000792:	f001 fb0b 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pins : SPINDLE_MODE_SW_NC_1_Pin SPINDLE_MODE_SW_NC_2_Pin MIST_Pin LOCK_X_AXIS_SW_Pin
                           LOCK_YZ_AXIS_SW_Pin */
  GPIO_InitStruct.Pin = SPINDLE_MODE_SW_NC_1_Pin|SPINDLE_MODE_SW_NC_2_Pin|MIST_Pin|LOCK_X_AXIS_SW_Pin
 8000796:	f246 1330 	movw	r3, #24880	; 0x6130
 800079a:	613b      	str	r3, [r7, #16]
                          |LOCK_YZ_AXIS_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4619      	mov	r1, r3
 80007aa:	481b      	ldr	r0, [pc, #108]	; (8000818 <MX_GPIO_Init+0x120>)
 80007ac:	f001 fafe 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pins : AXIS_X_MULTIPLIER_SW_NC_1_Pin AXIS_X_MULTIPLIER_SW_NC_2_Pin AXIS_YZ_MULTIPLIER_SW_NC_1_Pin AXIS_YZ_MULTIPLIER_SW_NC_2_Pin
                           YZ_SW_Pin MPG_SW_Pin HOLD_Pin CYCLE_START_Pin
                           FLOOD_Pin */
  GPIO_InitStruct.Pin = AXIS_X_MULTIPLIER_SW_NC_1_Pin|AXIS_X_MULTIPLIER_SW_NC_2_Pin|AXIS_YZ_MULTIPLIER_SW_NC_1_Pin|AXIS_YZ_MULTIPLIER_SW_NC_2_Pin
 80007b0:	f64f 4307 	movw	r3, #64519	; 0xfc07
 80007b4:	613b      	str	r3, [r7, #16]
                          |YZ_SW_Pin|MPG_SW_Pin|HOLD_Pin|CYCLE_START_Pin
                          |FLOOD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	4619      	mov	r1, r3
 80007c4:	4815      	ldr	r0, [pc, #84]	; (800081c <MX_GPIO_Init+0x124>)
 80007c6:	f001 faf1 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pins : MPG_ON_LED_Pin AXIS_X_MULTIPLIER_LED_1_Pin AXIS_X_MULTIPLIER_LED_2_Pin AXIS_X_MULTIPLIER_LED_3_Pin
                           AXIS_YZ_MULTIPLIER_LED_1_Pin */
  GPIO_InitStruct.Pin = MPG_ON_LED_Pin|AXIS_X_MULTIPLIER_LED_1_Pin|AXIS_X_MULTIPLIER_LED_2_Pin|AXIS_X_MULTIPLIER_LED_3_Pin
 80007ca:	f44f 431e 	mov.w	r3, #40448	; 0x9e00
 80007ce:	613b      	str	r3, [r7, #16]
                          |AXIS_YZ_MULTIPLIER_LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2302      	movs	r3, #2
 80007da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	4619      	mov	r1, r3
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_GPIO_Init+0x120>)
 80007e4:	f001 fae2 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pins : AXIS_YZ_MULTIPLIER_LED_2_Pin AXIS_YZ_MULTIPLIER_LED_3_Pin YZ_SW_LED_Y_Pin YZ_SW_LED_Z_Pin
                           HOLD_LED_Pin SPINDLE_CW_LED_Pin SPINDLE_CCW_LED_Pin */
  GPIO_InitStruct.Pin = AXIS_YZ_MULTIPLIER_LED_2_Pin|AXIS_YZ_MULTIPLIER_LED_3_Pin|YZ_SW_LED_Y_Pin|YZ_SW_LED_Z_Pin
 80007e8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80007ec:	613b      	str	r3, [r7, #16]
                          |HOLD_LED_Pin|SPINDLE_CW_LED_Pin|SPINDLE_CCW_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2302      	movs	r3, #2
 80007f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fa:	f107 0310 	add.w	r3, r7, #16
 80007fe:	4619      	mov	r1, r3
 8000800:	4806      	ldr	r0, [pc, #24]	; (800081c <MX_GPIO_Init+0x124>)
 8000802:	f001 fad3 	bl	8001dac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000806:	bf00      	nop
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000
 8000814:	40011000 	.word	0x40011000
 8000818:	40010800 	.word	0x40010800
 800081c:	40010c00 	.word	0x40010c00

08000820 <Init_interfaces>:

/* USER CODE BEGIN 4 */
/**
  * @brief Initialize interfaces
  */
void Init_interfaces(void){
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	// Start encoder timers
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000824:	213c      	movs	r1, #60	; 0x3c
 8000826:	4831      	ldr	r0, [pc, #196]	; (80008ec <Init_interfaces+0xcc>)
 8000828:	f002 fa6a 	bl	8002d00 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800082c:	213c      	movs	r1, #60	; 0x3c
 800082e:	4830      	ldr	r0, [pc, #192]	; (80008f0 <Init_interfaces+0xd0>)
 8000830:	f002 fa66 	bl	8002d00 <HAL_TIM_Encoder_Start>

	// Start 3 position switch LED PWM timer
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000834:	2100      	movs	r1, #0
 8000836:	482f      	ldr	r0, [pc, #188]	; (80008f4 <Init_interfaces+0xd4>)
 8000838:	f002 f91e 	bl	8002a78 <HAL_TIM_PWM_Start>

	// Start TIM4 for button de-bouncer
	HAL_TIM_Base_Start_IT(&htim4);
 800083c:	482e      	ldr	r0, [pc, #184]	; (80008f8 <Init_interfaces+0xd8>)
 800083e:	f002 f8c9 	bl	80029d4 <HAL_TIM_Base_Start_IT>

	// Assign buttons/switches a de-bouncer channel
	set_button_channel(SPINDLE_MODE_SW_NC_1_GPIO_Port, SPINDLE_MODE_SW_NC_1_Pin, SPINDLE_3POS_SW_NC_1_CH);
 8000842:	2200      	movs	r2, #0
 8000844:	2110      	movs	r1, #16
 8000846:	482d      	ldr	r0, [pc, #180]	; (80008fc <Init_interfaces+0xdc>)
 8000848:	f7ff fd18 	bl	800027c <set_button_channel>
	set_button_channel(SPINDLE_MODE_SW_NC_2_GPIO_Port, SPINDLE_MODE_SW_NC_2_Pin, SPINDLE_3POS_SW_NC_2_CH);
 800084c:	2201      	movs	r2, #1
 800084e:	2120      	movs	r1, #32
 8000850:	482a      	ldr	r0, [pc, #168]	; (80008fc <Init_interfaces+0xdc>)
 8000852:	f7ff fd13 	bl	800027c <set_button_channel>
	set_button_channel(AXIS_X_MULTIPLIER_SW_NC_1_GPIO_Port, AXIS_X_MULTIPLIER_SW_NC_1_Pin, AXIS_X_MULTIPLIER_SW_NC_1_CH);
 8000856:	2202      	movs	r2, #2
 8000858:	2101      	movs	r1, #1
 800085a:	4829      	ldr	r0, [pc, #164]	; (8000900 <Init_interfaces+0xe0>)
 800085c:	f7ff fd0e 	bl	800027c <set_button_channel>
	set_button_channel(AXIS_X_MULTIPLIER_SW_NC_2_GPIO_Port, AXIS_X_MULTIPLIER_SW_NC_2_Pin, AXIS_X_MULTIPLIER_SW_NC_2_CH);
 8000860:	2203      	movs	r2, #3
 8000862:	2102      	movs	r1, #2
 8000864:	4826      	ldr	r0, [pc, #152]	; (8000900 <Init_interfaces+0xe0>)
 8000866:	f7ff fd09 	bl	800027c <set_button_channel>
	set_button_channel(AXIS_YZ_MULTIPLIER_SW_NC_1_GPIO_Port, AXIS_YZ_MULTIPLIER_SW_NC_1_Pin, AXIS_YZ_MULTIPLIER_SW_NC_1_CH);
 800086a:	2204      	movs	r2, #4
 800086c:	2104      	movs	r1, #4
 800086e:	4824      	ldr	r0, [pc, #144]	; (8000900 <Init_interfaces+0xe0>)
 8000870:	f7ff fd04 	bl	800027c <set_button_channel>
	set_button_channel(AXIS_YZ_MULTIPLIER_SW_NC_2_GPIO_Port, AXIS_YZ_MULTIPLIER_SW_NC_2_Pin, AXIS_YZ_MULTIPLIER_SW_NC_2_CH);
 8000874:	2205      	movs	r2, #5
 8000876:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800087a:	4821      	ldr	r0, [pc, #132]	; (8000900 <Init_interfaces+0xe0>)
 800087c:	f7ff fcfe 	bl	800027c <set_button_channel>
	set_button_channel(YZ_SW_GPIO_Port, YZ_SW_Pin, YZ_SW_CH);
 8000880:	2206      	movs	r2, #6
 8000882:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000886:	481e      	ldr	r0, [pc, #120]	; (8000900 <Init_interfaces+0xe0>)
 8000888:	f7ff fcf8 	bl	800027c <set_button_channel>
	set_button_channel(MPG_SW_GPIO_Port, MPG_SW_Pin, MPG_BUT_CH);
 800088c:	2207      	movs	r2, #7
 800088e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000892:	481b      	ldr	r0, [pc, #108]	; (8000900 <Init_interfaces+0xe0>)
 8000894:	f7ff fcf2 	bl	800027c <set_button_channel>
	set_button_channel(HOLD_GPIO_Port, HOLD_Pin, HOLD_BUT_CH);
 8000898:	2208      	movs	r2, #8
 800089a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089e:	4818      	ldr	r0, [pc, #96]	; (8000900 <Init_interfaces+0xe0>)
 80008a0:	f7ff fcec 	bl	800027c <set_button_channel>
	set_button_channel(CYCLE_START_GPIO_Port, CYCLE_START_Pin, CYCLE_START_BUT_CH);
 80008a4:	2209      	movs	r2, #9
 80008a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008aa:	4815      	ldr	r0, [pc, #84]	; (8000900 <Init_interfaces+0xe0>)
 80008ac:	f7ff fce6 	bl	800027c <set_button_channel>
	set_button_channel(FLOOD_GPIO_Port, FLOOD_Pin, FLOOD_SW_CH);
 80008b0:	220a      	movs	r2, #10
 80008b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b6:	4812      	ldr	r0, [pc, #72]	; (8000900 <Init_interfaces+0xe0>)
 80008b8:	f7ff fce0 	bl	800027c <set_button_channel>
	set_button_channel(MIST_GPIO_Port, MIST_Pin, MIST_SW_CH);
 80008bc:	220b      	movs	r2, #11
 80008be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c2:	480e      	ldr	r0, [pc, #56]	; (80008fc <Init_interfaces+0xdc>)
 80008c4:	f7ff fcda 	bl	800027c <set_button_channel>
	set_button_channel(LOCK_X_AXIS_SW_GPIO_Port, LOCK_X_AXIS_SW_Pin, LOCK_X_AXIS_SW_CH);
 80008c8:	220c      	movs	r2, #12
 80008ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ce:	480b      	ldr	r0, [pc, #44]	; (80008fc <Init_interfaces+0xdc>)
 80008d0:	f7ff fcd4 	bl	800027c <set_button_channel>
	set_button_channel(LOCK_YZ_AXIS_SW_GPIO_Port, LOCK_YZ_AXIS_SW_Pin, LOCK_YZ_AXIS_SW_CH);
 80008d4:	220d      	movs	r2, #13
 80008d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008da:	4808      	ldr	r0, [pc, #32]	; (80008fc <Init_interfaces+0xdc>)
 80008dc:	f7ff fcce 	bl	800027c <set_button_channel>

	// Turn off all LEDs
	turn_off_leds();
 80008e0:	f000 f810 	bl	8000904 <turn_off_leds>

	// Start UART2 reception
	start_uart2_reception();
 80008e4:	f000 fdee 	bl	80014c4 <start_uart2_reception>
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000148 	.word	0x20000148
 80008f0:	20000190 	.word	0x20000190
 80008f4:	20000100 	.word	0x20000100
 80008f8:	200001d8 	.word	0x200001d8
 80008fc:	40010800 	.word	0x40010800
 8000900:	40010c00 	.word	0x40010c00

08000904 <turn_off_leds>:

/**
  * @brief Turn off all system LEDs
  */
void turn_off_leds(void){
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLOOD_LED_GPIO_Port, FLOOD_LED_Pin, LED_STATE_OFF);
 8000908:	2201      	movs	r2, #1
 800090a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090e:	482a      	ldr	r0, [pc, #168]	; (80009b8 <turn_off_leds+0xb4>)
 8000910:	f001 fbe7 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MIST_LED_GPIO_Port, MIST_LED_Pin, LED_STATE_OFF);
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091a:	4827      	ldr	r0, [pc, #156]	; (80009b8 <turn_off_leds+0xb4>)
 800091c:	f001 fbe1 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CYCLE_START_LED_GPIO_Port, CYCLE_START_LED_Pin, LED_STATE_OFF);
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000926:	4824      	ldr	r0, [pc, #144]	; (80009b8 <turn_off_leds+0xb4>)
 8000928:	f001 fbdb 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HOLD_LED_GPIO_Port, HOLD_LED_Pin, LED_STATE_OFF);
 800092c:	2201      	movs	r2, #1
 800092e:	2180      	movs	r1, #128	; 0x80
 8000930:	4822      	ldr	r0, [pc, #136]	; (80009bc <turn_off_leds+0xb8>)
 8000932:	f001 fbd6 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MPG_ON_LED_GPIO_Port, MPG_ON_LED_Pin, LED_STATE_OFF);
 8000936:	2201      	movs	r2, #1
 8000938:	f44f 7100 	mov.w	r1, #512	; 0x200
 800093c:	4820      	ldr	r0, [pc, #128]	; (80009c0 <turn_off_leds+0xbc>)
 800093e:	f001 fbd0 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YZ_SW_LED_Y_GPIO_Port, YZ_SW_LED_Y_Pin, LED_STATE_OFF);
 8000942:	2201      	movs	r2, #1
 8000944:	2120      	movs	r1, #32
 8000946:	481d      	ldr	r0, [pc, #116]	; (80009bc <turn_off_leds+0xb8>)
 8000948:	f001 fbcb 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YZ_SW_LED_Z_GPIO_Port, YZ_SW_LED_Z_Pin, LED_STATE_OFF);
 800094c:	2201      	movs	r2, #1
 800094e:	2140      	movs	r1, #64	; 0x40
 8000950:	481a      	ldr	r0, [pc, #104]	; (80009bc <turn_off_leds+0xb8>)
 8000952:	f001 fbc6 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPINDLE_CW_LED_GPIO_Port, SPINDLE_CW_LED_Pin, LED_STATE_OFF);
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 7180 	mov.w	r1, #256	; 0x100
 800095c:	4817      	ldr	r0, [pc, #92]	; (80009bc <turn_off_leds+0xb8>)
 800095e:	f001 fbc0 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPINDLE_CCW_LED_GPIO_Port, SPINDLE_CCW_LED_Pin, LED_STATE_OFF);
 8000962:	2201      	movs	r2, #1
 8000964:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000968:	4814      	ldr	r0, [pc, #80]	; (80009bc <turn_off_leds+0xb8>)
 800096a:	f001 fbba 	bl	80020e2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(AXIS_X_MULTIPLIER_LED_1_GPIO_Port, AXIS_X_MULTIPLIER_LED_1_Pin, LED_STATE_OFF);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000974:	4812      	ldr	r0, [pc, #72]	; (80009c0 <turn_off_leds+0xbc>)
 8000976:	f001 fbb4 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AXIS_X_MULTIPLIER_LED_2_GPIO_Port, AXIS_X_MULTIPLIER_LED_2_Pin, LED_STATE_OFF);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000980:	480f      	ldr	r0, [pc, #60]	; (80009c0 <turn_off_leds+0xbc>)
 8000982:	f001 fbae 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AXIS_X_MULTIPLIER_LED_3_GPIO_Port, AXIS_X_MULTIPLIER_LED_3_Pin, LED_STATE_OFF);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <turn_off_leds+0xbc>)
 800098e:	f001 fba8 	bl	80020e2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(AXIS_YZ_MULTIPLIER_LED_1_GPIO_Port, AXIS_YZ_MULTIPLIER_LED_1_Pin, LED_STATE_OFF);
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <turn_off_leds+0xbc>)
 800099a:	f001 fba2 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AXIS_YZ_MULTIPLIER_LED_2_GPIO_Port, AXIS_YZ_MULTIPLIER_LED_2_Pin, LED_STATE_OFF);
 800099e:	2201      	movs	r2, #1
 80009a0:	2108      	movs	r1, #8
 80009a2:	4806      	ldr	r0, [pc, #24]	; (80009bc <turn_off_leds+0xb8>)
 80009a4:	f001 fb9d 	bl	80020e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AXIS_YZ_MULTIPLIER_LED_3_GPIO_Port, AXIS_YZ_MULTIPLIER_LED_3_Pin, LED_STATE_OFF);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2110      	movs	r1, #16
 80009ac:	4803      	ldr	r0, [pc, #12]	; (80009bc <turn_off_leds+0xb8>)
 80009ae:	f001 fb98 	bl	80020e2 <HAL_GPIO_WritePin>
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40011000 	.word	0x40011000
 80009bc:	40010c00 	.word	0x40010c00
 80009c0:	40010800 	.word	0x40010800

080009c4 <process_inputs>:


/**
  * @brief Process system inputs
  */
void process_inputs(void){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
	static bool y_or_z_last_state = false;
	uint8_t lock_x_axis = get_button_state(LOCK_X_AXIS_SW_CH);	// Get X axis lock state
 80009ca:	200c      	movs	r0, #12
 80009cc:	f7ff fc84 	bl	80002d8 <get_button_state>
 80009d0:	4603      	mov	r3, r0
 80009d2:	71fb      	strb	r3, [r7, #7]
	uint8_t lock_yz_axis = get_button_state(LOCK_YZ_AXIS_SW_CH); // Get Y/Z axes lock state
 80009d4:	200d      	movs	r0, #13
 80009d6:	f7ff fc7f 	bl	80002d8 <get_button_state>
 80009da:	4603      	mov	r3, r0
 80009dc:	71bb      	strb	r3, [r7, #6]

	// Check MPG functionality switch input (it disables/enables MPG functionality)
	if(get_button_state(MPG_BUT_CH) == GPIO_PIN_RESET){
 80009de:	2007      	movs	r0, #7
 80009e0:	f7ff fc7a 	bl	80002d8 <get_button_state>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d124      	bne.n	8000a34 <process_inputs+0x70>
		if(++button_action_delay_cnt_ch[MPG_BUT_DELAY_CH] >= button_delay_action_cnt || \
 80009ea:	4ba1      	ldr	r3, [pc, #644]	; (8000c70 <process_inputs+0x2ac>)
 80009ec:	785b      	ldrb	r3, [r3, #1]
 80009ee:	3301      	adds	r3, #1
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4b9f      	ldr	r3, [pc, #636]	; (8000c70 <process_inputs+0x2ac>)
 80009f4:	705a      	strb	r2, [r3, #1]
 80009f6:	4b9e      	ldr	r3, [pc, #632]	; (8000c70 <process_inputs+0x2ac>)
 80009f8:	785b      	ldrb	r3, [r3, #1]
 80009fa:	2204      	movs	r2, #4
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d203      	bcs.n	8000a08 <process_inputs+0x44>
		   button_action_delay_cnt_ch[MPG_BUT_DELAY_CH] == 1){
 8000a00:	4b9b      	ldr	r3, [pc, #620]	; (8000c70 <process_inputs+0x2ac>)
 8000a02:	785b      	ldrb	r3, [r3, #1]
		if(++button_action_delay_cnt_ch[MPG_BUT_DELAY_CH] >= button_delay_action_cnt || \
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d118      	bne.n	8000a3a <process_inputs+0x76>
			if(button_action_delay_cnt_ch[MPG_BUT_DELAY_CH] != 1 && button_delay_action_cnt != 1){
 8000a08:	4b99      	ldr	r3, [pc, #612]	; (8000c70 <process_inputs+0x2ac>)
 8000a0a:	785b      	ldrb	r3, [r3, #1]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d005      	beq.n	8000a1c <process_inputs+0x58>
 8000a10:	2304      	movs	r3, #4
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d002      	beq.n	8000a1c <process_inputs+0x58>
				button_action_delay_cnt_ch[MPG_BUT_DELAY_CH] = 0;
 8000a16:	4b96      	ldr	r3, [pc, #600]	; (8000c70 <process_inputs+0x2ac>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	705a      	strb	r2, [r3, #1]
			}

			if(pendant_mpg_status != MPG_STATUS_DISABLED){
 8000a1c:	4b95      	ldr	r3, [pc, #596]	; (8000c74 <process_inputs+0x2b0>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d003      	beq.n	8000a2c <process_inputs+0x68>
				pendant_mpg_status = MPG_STATUS_DISABLED;
 8000a24:	4b93      	ldr	r3, [pc, #588]	; (8000c74 <process_inputs+0x2b0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
 8000a2a:	e006      	b.n	8000a3a <process_inputs+0x76>
			}else{
				pendant_mpg_status = MPG_STATUS_ENABLE_ONGOING;
 8000a2c:	4b91      	ldr	r3, [pc, #580]	; (8000c74 <process_inputs+0x2b0>)
 8000a2e:	2202      	movs	r2, #2
 8000a30:	701a      	strb	r2, [r3, #0]
 8000a32:	e002      	b.n	8000a3a <process_inputs+0x76>
			}
		}
	}else{
		button_action_delay_cnt_ch[MPG_BUT_DELAY_CH] = 0;
 8000a34:	4b8e      	ldr	r3, [pc, #568]	; (8000c70 <process_inputs+0x2ac>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	705a      	strb	r2, [r3, #1]
	}

	// The program will enter this if statement, if the system
	// is enabled and it's MPg functionality is turned on
	if(pendant_status && pendant_data.mpg){
 8000a3a:	4b8f      	ldr	r3, [pc, #572]	; (8000c78 <process_inputs+0x2b4>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d020      	beq.n	8000a84 <process_inputs+0xc0>
 8000a42:	4b8e      	ldr	r3, [pc, #568]	; (8000c7c <process_inputs+0x2b8>)
 8000a44:	7b9b      	ldrb	r3, [r3, #14]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d01c      	beq.n	8000a84 <process_inputs+0xc0>
		// Keep or "discard" axis movement data based on locks states
		if(lock_x_axis == GPIO_PIN_RESET){
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d105      	bne.n	8000a5c <process_inputs+0x98>
			pendant_data.encoder1_val = ENCODER_1_TIM.Instance->CNT;
 8000a50:	4b8b      	ldr	r3, [pc, #556]	; (8000c80 <process_inputs+0x2bc>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a56:	4a89      	ldr	r2, [pc, #548]	; (8000c7c <process_inputs+0x2b8>)
 8000a58:	6013      	str	r3, [r2, #0]
 8000a5a:	e004      	b.n	8000a66 <process_inputs+0xa2>
		}else{
			ENCODER_1_TIM.Instance->CNT = pendant_data.encoder1_val;
 8000a5c:	4b88      	ldr	r3, [pc, #544]	; (8000c80 <process_inputs+0x2bc>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a86      	ldr	r2, [pc, #536]	; (8000c7c <process_inputs+0x2b8>)
 8000a62:	6812      	ldr	r2, [r2, #0]
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(lock_yz_axis == GPIO_PIN_RESET){
 8000a66:	79bb      	ldrb	r3, [r7, #6]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d105      	bne.n	8000a78 <process_inputs+0xb4>
			pendant_data.encoder2_val = ENCODER_2_TIM.Instance->CNT;
 8000a6c:	4b85      	ldr	r3, [pc, #532]	; (8000c84 <process_inputs+0x2c0>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a72:	4a82      	ldr	r2, [pc, #520]	; (8000c7c <process_inputs+0x2b8>)
 8000a74:	6053      	str	r3, [r2, #4]
		if(lock_yz_axis == GPIO_PIN_RESET){
 8000a76:	e013      	b.n	8000aa0 <process_inputs+0xdc>
		}else{
			ENCODER_2_TIM.Instance->CNT = pendant_data.encoder2_val;
 8000a78:	4b82      	ldr	r3, [pc, #520]	; (8000c84 <process_inputs+0x2c0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a7f      	ldr	r2, [pc, #508]	; (8000c7c <process_inputs+0x2b8>)
 8000a7e:	6852      	ldr	r2, [r2, #4]
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
		if(lock_yz_axis == GPIO_PIN_RESET){
 8000a82:	e00d      	b.n	8000aa0 <process_inputs+0xdc>
		}
	}else{
		// Discard encoder inputs
		pendant_data.encoder1_val = 0;
 8000a84:	4b7d      	ldr	r3, [pc, #500]	; (8000c7c <process_inputs+0x2b8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
		pendant_data.encoder2_val = 0;
 8000a8a:	4b7c      	ldr	r3, [pc, #496]	; (8000c7c <process_inputs+0x2b8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
		ENCODER_1_TIM.Instance->CNT = 0;
 8000a90:	4b7b      	ldr	r3, [pc, #492]	; (8000c80 <process_inputs+0x2bc>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_2_TIM.Instance->CNT = 0;
 8000a98:	4b7a      	ldr	r3, [pc, #488]	; (8000c84 <process_inputs+0x2c0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	// If pendant's MPG functionality is enabled,
	// execute the following code inside the if statement
	if(pendant_mpg_status == MPG_STATUS_ENABLED){
 8000aa0:	4b74      	ldr	r3, [pc, #464]	; (8000c74 <process_inputs+0x2b0>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	f040 81e4 	bne.w	8000e72 <process_inputs+0x4ae>
		pendant_data.spindle_mode = get_spindle_mode(); // Get spindle mode
 8000aaa:	f000 f9f7 	bl	8000e9c <get_spindle_mode>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b72      	ldr	r3, [pc, #456]	; (8000c7c <process_inputs+0x2b8>)
 8000ab4:	731a      	strb	r2, [r3, #12]
		pendant_data.jog_mode = 0;	//TODO: need to have an input for jogging mode switching
 8000ab6:	4b71      	ldr	r3, [pc, #452]	; (8000c7c <process_inputs+0x2b8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	72da      	strb	r2, [r3, #11]
		pendant_data.x_axis_multiplicity = get_x_axis_multiplier(); // Get X axis multiplier
 8000abc:	f000 fa29 	bl	8000f12 <get_x_axis_multiplier>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4b6d      	ldr	r3, [pc, #436]	; (8000c7c <process_inputs+0x2b8>)
 8000ac6:	721a      	strb	r2, [r3, #8]
		pendant_data.yz_axis_multiplicity = get_yz_axis_multiplier(); // Get Y/Z axes multiplier
 8000ac8:	f000 fa5e 	bl	8000f88 <get_yz_axis_multiplier>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b6a      	ldr	r3, [pc, #424]	; (8000c7c <process_inputs+0x2b8>)
 8000ad2:	725a      	strb	r2, [r3, #9]

		// Check Y/Z axes switch input
		if(get_button_state(YZ_SW_CH) == GPIO_PIN_RESET){
 8000ad4:	2006      	movs	r0, #6
 8000ad6:	f7ff fbff 	bl	80002d8 <get_button_state>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d11e      	bne.n	8000b1e <process_inputs+0x15a>
			if(!y_or_z_last_state){
 8000ae0:	4b69      	ldr	r3, [pc, #420]	; (8000c88 <process_inputs+0x2c4>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	f083 0301 	eor.w	r3, r3, #1
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d005      	beq.n	8000afa <process_inputs+0x136>
				y_or_z_last_state = true;
 8000aee:	4b66      	ldr	r3, [pc, #408]	; (8000c88 <process_inputs+0x2c4>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
				button_action_delay_cnt_ch[Y_OR_Z_BUT_DELAY_CH] = 0;
 8000af4:	4b5e      	ldr	r3, [pc, #376]	; (8000c70 <process_inputs+0x2ac>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
			}
			if(++button_action_delay_cnt_ch[Y_OR_Z_BUT_DELAY_CH] >= button_delay_action_cnt){
 8000afa:	4b5d      	ldr	r3, [pc, #372]	; (8000c70 <process_inputs+0x2ac>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	3301      	adds	r3, #1
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4b5b      	ldr	r3, [pc, #364]	; (8000c70 <process_inputs+0x2ac>)
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	4b5a      	ldr	r3, [pc, #360]	; (8000c70 <process_inputs+0x2ac>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d321      	bcc.n	8000b54 <process_inputs+0x190>
				button_action_delay_cnt_ch[Y_OR_Z_BUT_DELAY_CH] = 0;
 8000b10:	4b57      	ldr	r3, [pc, #348]	; (8000c70 <process_inputs+0x2ac>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
				pendant_data.y_or_z = YZ_MOVEMENT_Z;	// Set to Z axis
 8000b16:	4b59      	ldr	r3, [pc, #356]	; (8000c7c <process_inputs+0x2b8>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	729a      	strb	r2, [r3, #10]
 8000b1c:	e01a      	b.n	8000b54 <process_inputs+0x190>
			}
		}else{
			if(y_or_z_last_state){
 8000b1e:	4b5a      	ldr	r3, [pc, #360]	; (8000c88 <process_inputs+0x2c4>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d005      	beq.n	8000b32 <process_inputs+0x16e>
				y_or_z_last_state = false;
 8000b26:	4b58      	ldr	r3, [pc, #352]	; (8000c88 <process_inputs+0x2c4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
				button_action_delay_cnt_ch[Y_OR_Z_BUT_DELAY_CH] = 0;
 8000b2c:	4b50      	ldr	r3, [pc, #320]	; (8000c70 <process_inputs+0x2ac>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
			}
			if(++button_action_delay_cnt_ch[Y_OR_Z_BUT_DELAY_CH] >= button_delay_action_cnt){
 8000b32:	4b4f      	ldr	r3, [pc, #316]	; (8000c70 <process_inputs+0x2ac>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	3301      	adds	r3, #1
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4b4d      	ldr	r3, [pc, #308]	; (8000c70 <process_inputs+0x2ac>)
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	4b4c      	ldr	r3, [pc, #304]	; (8000c70 <process_inputs+0x2ac>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2204      	movs	r2, #4
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d305      	bcc.n	8000b54 <process_inputs+0x190>
				button_action_delay_cnt_ch[Y_OR_Z_BUT_DELAY_CH] = 0;
 8000b48:	4b49      	ldr	r3, [pc, #292]	; (8000c70 <process_inputs+0x2ac>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
				pendant_data.y_or_z = YZ_MOVEMENT_Y;	// Set to Z axis
 8000b4e:	4b4b      	ldr	r3, [pc, #300]	; (8000c7c <process_inputs+0x2b8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	729a      	strb	r2, [r3, #10]
			}
		}

		// Check FLOOD coolant switch input
		if(get_button_state(FLOOD_SW_CH) == GPIO_PIN_RESET){
 8000b54:	200a      	movs	r0, #10
 8000b56:	f7ff fbbf 	bl	80002d8 <get_button_state>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d115      	bne.n	8000b8c <process_inputs+0x1c8>
			if(++button_action_delay_cnt_ch[FLOOD_BUT_DELAY_CH] >= button_delay_action_cnt){
 8000b60:	4b43      	ldr	r3, [pc, #268]	; (8000c70 <process_inputs+0x2ac>)
 8000b62:	789b      	ldrb	r3, [r3, #2]
 8000b64:	3301      	adds	r3, #1
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	4b41      	ldr	r3, [pc, #260]	; (8000c70 <process_inputs+0x2ac>)
 8000b6a:	709a      	strb	r2, [r3, #2]
 8000b6c:	4b40      	ldr	r3, [pc, #256]	; (8000c70 <process_inputs+0x2ac>)
 8000b6e:	789b      	ldrb	r3, [r3, #2]
 8000b70:	2204      	movs	r2, #4
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d30d      	bcc.n	8000b92 <process_inputs+0x1ce>
				button_action_delay_cnt_ch[FLOOD_BUT_DELAY_CH] = 0;
 8000b76:	4b3e      	ldr	r3, [pc, #248]	; (8000c70 <process_inputs+0x2ac>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	709a      	strb	r2, [r3, #2]
				pendant_data.flood = (pendant_data.flood ? false : true);
 8000b7c:	4b3f      	ldr	r3, [pc, #252]	; (8000c7c <process_inputs+0x2b8>)
 8000b7e:	7bdb      	ldrb	r3, [r3, #15]
 8000b80:	f083 0301 	eor.w	r3, r3, #1
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b3d      	ldr	r3, [pc, #244]	; (8000c7c <process_inputs+0x2b8>)
 8000b88:	73da      	strb	r2, [r3, #15]
 8000b8a:	e002      	b.n	8000b92 <process_inputs+0x1ce>
			}
		}else{
			button_action_delay_cnt_ch[FLOOD_BUT_DELAY_CH] = 0;
 8000b8c:	4b38      	ldr	r3, [pc, #224]	; (8000c70 <process_inputs+0x2ac>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	709a      	strb	r2, [r3, #2]
		}

		// Check MIST coolant switch input
		if(get_button_state(MIST_SW_CH) == GPIO_PIN_RESET){
 8000b92:	200b      	movs	r0, #11
 8000b94:	f7ff fba0 	bl	80002d8 <get_button_state>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d115      	bne.n	8000bca <process_inputs+0x206>
			if(++button_action_delay_cnt_ch[MIST_BUT_DELAY_CH] >= button_delay_action_cnt){
 8000b9e:	4b34      	ldr	r3, [pc, #208]	; (8000c70 <process_inputs+0x2ac>)
 8000ba0:	78db      	ldrb	r3, [r3, #3]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b32      	ldr	r3, [pc, #200]	; (8000c70 <process_inputs+0x2ac>)
 8000ba8:	70da      	strb	r2, [r3, #3]
 8000baa:	4b31      	ldr	r3, [pc, #196]	; (8000c70 <process_inputs+0x2ac>)
 8000bac:	78db      	ldrb	r3, [r3, #3]
 8000bae:	2204      	movs	r2, #4
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d30d      	bcc.n	8000bd0 <process_inputs+0x20c>
				button_action_delay_cnt_ch[MIST_BUT_DELAY_CH] = 0;
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <process_inputs+0x2ac>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	70da      	strb	r2, [r3, #3]
				pendant_data.mist = (pendant_data.mist ? false : true);
 8000bba:	4b30      	ldr	r3, [pc, #192]	; (8000c7c <process_inputs+0x2b8>)
 8000bbc:	7c1b      	ldrb	r3, [r3, #16]
 8000bbe:	f083 0301 	eor.w	r3, r3, #1
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	4b2d      	ldr	r3, [pc, #180]	; (8000c7c <process_inputs+0x2b8>)
 8000bc6:	741a      	strb	r2, [r3, #16]
 8000bc8:	e002      	b.n	8000bd0 <process_inputs+0x20c>
			}
		}else{
			button_action_delay_cnt_ch[MIST_BUT_DELAY_CH] = 0;
 8000bca:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <process_inputs+0x2ac>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	70da      	strb	r2, [r3, #3]
		}

		// Check HOLD and Cycle start button input
		if(get_button_state(HOLD_BUT_CH) == GPIO_PIN_RESET){	// System HOLD status
 8000bd0:	2008      	movs	r0, #8
 8000bd2:	f7ff fb81 	bl	80002d8 <get_button_state>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d103      	bne.n	8000be4 <process_inputs+0x220>
			pendant_data.system_status = Hold;		// Set system status to Hold
 8000bdc:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <process_inputs+0x2b8>)
 8000bde:	2204      	movs	r2, #4
 8000be0:	735a      	strb	r2, [r3, #13]
 8000be2:	e008      	b.n	8000bf6 <process_inputs+0x232>
		}else if(get_button_state(CYCLE_START_BUT_CH) == GPIO_PIN_RESET){	// System CYCLE START status
 8000be4:	2009      	movs	r0, #9
 8000be6:	f7ff fb77 	bl	80002d8 <get_button_state>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <process_inputs+0x232>
			pendant_data.system_status = Idle;		// Set system status to Idle
 8000bf0:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <process_inputs+0x2b8>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	735a      	strb	r2, [r3, #13]
		}

		// Set / Reset MPG status LED
		if(pendant_mpg_status != MPG_STATUS_DISABLED){
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <process_inputs+0x2b0>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d006      	beq.n	8000c0c <process_inputs+0x248>
			HAL_GPIO_WritePin(MPG_ON_LED_GPIO_Port, MPG_ON_LED_Pin, LED_STATE_OFF);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c04:	4821      	ldr	r0, [pc, #132]	; (8000c8c <process_inputs+0x2c8>)
 8000c06:	f001 fa6c 	bl	80020e2 <HAL_GPIO_WritePin>
 8000c0a:	e005      	b.n	8000c18 <process_inputs+0x254>
		}else{
			HAL_GPIO_WritePin(MPG_ON_LED_GPIO_Port, MPG_ON_LED_Pin, LED_STATE_ON);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c12:	481e      	ldr	r0, [pc, #120]	; (8000c8c <process_inputs+0x2c8>)
 8000c14:	f001 fa65 	bl	80020e2 <HAL_GPIO_WritePin>
		}

		// Set / Reset LED for which axis between Y and Z is selected
		if(pendant_data.y_or_z == YZ_MOVEMENT_Z){
 8000c18:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <process_inputs+0x2b8>)
 8000c1a:	7a9b      	ldrb	r3, [r3, #10]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d00a      	beq.n	8000c36 <process_inputs+0x272>
			HAL_GPIO_WritePin(YZ_SW_LED_Y_GPIO_Port, YZ_SW_LED_Y_Pin, LED_STATE_OFF);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2120      	movs	r1, #32
 8000c24:	481a      	ldr	r0, [pc, #104]	; (8000c90 <process_inputs+0x2cc>)
 8000c26:	f001 fa5c 	bl	80020e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YZ_SW_LED_Z_GPIO_Port, YZ_SW_LED_Z_Pin, LED_STATE_ON);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2140      	movs	r1, #64	; 0x40
 8000c2e:	4818      	ldr	r0, [pc, #96]	; (8000c90 <process_inputs+0x2cc>)
 8000c30:	f001 fa57 	bl	80020e2 <HAL_GPIO_WritePin>
 8000c34:	e010      	b.n	8000c58 <process_inputs+0x294>
		}else if(pendant_data.y_or_z == YZ_MOVEMENT_Y){
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <process_inputs+0x2b8>)
 8000c38:	7a9b      	ldrb	r3, [r3, #10]
 8000c3a:	f083 0301 	eor.w	r3, r3, #1
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d009      	beq.n	8000c58 <process_inputs+0x294>
			HAL_GPIO_WritePin(YZ_SW_LED_Y_GPIO_Port, YZ_SW_LED_Y_Pin, LED_STATE_ON);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2120      	movs	r1, #32
 8000c48:	4811      	ldr	r0, [pc, #68]	; (8000c90 <process_inputs+0x2cc>)
 8000c4a:	f001 fa4a 	bl	80020e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YZ_SW_LED_Z_GPIO_Port, YZ_SW_LED_Z_Pin, LED_STATE_OFF);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2140      	movs	r1, #64	; 0x40
 8000c52:	480f      	ldr	r0, [pc, #60]	; (8000c90 <process_inputs+0x2cc>)
 8000c54:	f001 fa45 	bl	80020e2 <HAL_GPIO_WritePin>
		}

		// Set / Reset flood coolant LED
		if(pendant_data.flood){
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <process_inputs+0x2b8>)
 8000c5a:	7bdb      	ldrb	r3, [r3, #15]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d01b      	beq.n	8000c98 <process_inputs+0x2d4>
			HAL_GPIO_WritePin(FLOOD_LED_GPIO_Port, FLOOD_LED_Pin, LED_STATE_ON);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c66:	480b      	ldr	r0, [pc, #44]	; (8000c94 <process_inputs+0x2d0>)
 8000c68:	f001 fa3b 	bl	80020e2 <HAL_GPIO_WritePin>
 8000c6c:	e01a      	b.n	8000ca4 <process_inputs+0x2e0>
 8000c6e:	bf00      	nop
 8000c70:	200002f4 	.word	0x200002f4
 8000c74:	200002f2 	.word	0x200002f2
 8000c78:	200002f1 	.word	0x200002f1
 8000c7c:	2000032c 	.word	0x2000032c
 8000c80:	20000148 	.word	0x20000148
 8000c84:	20000190 	.word	0x20000190
 8000c88:	20000304 	.word	0x20000304
 8000c8c:	40010800 	.word	0x40010800
 8000c90:	40010c00 	.word	0x40010c00
 8000c94:	40011000 	.word	0x40011000
		}else{
			HAL_GPIO_WritePin(FLOOD_LED_GPIO_Port, FLOOD_LED_Pin, LED_STATE_OFF);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c9e:	487a      	ldr	r0, [pc, #488]	; (8000e88 <process_inputs+0x4c4>)
 8000ca0:	f001 fa1f 	bl	80020e2 <HAL_GPIO_WritePin>
		}

		// Set / Reset mist coolant LED
		if(pendant_data.mist){
 8000ca4:	4b79      	ldr	r3, [pc, #484]	; (8000e8c <process_inputs+0x4c8>)
 8000ca6:	7c1b      	ldrb	r3, [r3, #16]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d006      	beq.n	8000cba <process_inputs+0x2f6>
			HAL_GPIO_WritePin(MIST_LED_GPIO_Port, MIST_LED_Pin, LED_STATE_ON);
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb2:	4875      	ldr	r0, [pc, #468]	; (8000e88 <process_inputs+0x4c4>)
 8000cb4:	f001 fa15 	bl	80020e2 <HAL_GPIO_WritePin>
 8000cb8:	e005      	b.n	8000cc6 <process_inputs+0x302>
		}else{
			HAL_GPIO_WritePin(MIST_LED_GPIO_Port, MIST_LED_Pin, LED_STATE_OFF);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc0:	4871      	ldr	r0, [pc, #452]	; (8000e88 <process_inputs+0x4c4>)
 8000cc2:	f001 fa0e 	bl	80020e2 <HAL_GPIO_WritePin>
		}

		// Set / Reset X axis multiplier LEDs
		switch(pendant_data.x_axis_multiplicity){
 8000cc6:	4b71      	ldr	r3, [pc, #452]	; (8000e8c <process_inputs+0x4c8>)
 8000cc8:	7a1b      	ldrb	r3, [r3, #8]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d02c      	beq.n	8000d28 <process_inputs+0x364>
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	dc3d      	bgt.n	8000d4e <process_inputs+0x38a>
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <process_inputs+0x318>
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d013      	beq.n	8000d02 <process_inputs+0x33e>
				HAL_GPIO_WritePin(AXIS_X_MULTIPLIER_LED_1_GPIO_Port, AXIS_X_MULTIPLIER_LED_1_Pin, LED_STATE_OFF);
				HAL_GPIO_WritePin(AXIS_X_MULTIPLIER_LED_2_GPIO_Port, AXIS_X_MULTIPLIER_LED_2_Pin, LED_STATE_OFF);
				HAL_GPIO_WritePin(AXIS_X_MULTIPLIER_LED_3_GPIO_Port, AXIS_X_MULTIPLIER_LED_3_Pin, LED_STATE_ON);
				break;
			default:
				break;
 8000cda:	e038      	b.n	8000d4e <process_inputs+0x38a>
				HAL_GPIO_WritePin(AXIS_X_MULTIPLIER_LED_1_GPIO_Port, AXIS_X_MULTIPLIER_LED_1_Pin, LED_STATE_ON);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce2:	486b      	ldr	r0, [pc, #428]	; (8000e90 <process_inputs+0x4cc>)
 8000ce4:	f001 f9fd 	bl	80020e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(AXIS_X_MULTIPLIER_LED_2_GPIO_Port, AXIS_X_MULTIPLIER_LED_2_Pin, LED_STATE_OFF);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cee:	4868      	ldr	r0, [pc, #416]	; (8000e90 <process_inputs+0x4cc>)
 8000cf0:	f001 f9f7 	bl	80020e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(AXIS_X_MULTIPLIER_LED_3_GPIO_Port, AXIS_X_MULTIPLIER_LED_3_Pin, LED_STATE_OFF);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cfa:	4865      	ldr	r0, [pc, #404]	; (8000e90 <process_inputs+0x4cc>)
 8000cfc:	f001 f9f1 	bl	80020e2 <HAL_GPIO_WritePin>
				break;
 8000d00:	e026      	b.n	8000d50 <process_inputs+0x38c>
				HAL_GPIO_WritePin(AXIS_X_MULTIPLIER_LED_1_GPIO_Port, AXIS_X_MULTIPLIER_LED_1_Pin, LED_STATE_OFF);
 8000d02:	2201      	movs	r2, #1
 8000d04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d08:	4861      	ldr	r0, [pc, #388]	; (8000e90 <process_inputs+0x4cc>)
 8000d0a:	f001 f9ea 	bl	80020e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(AXIS_X_MULTIPLIER_LED_2_GPIO_Port, AXIS_X_MULTIPLIER_LED_2_Pin, LED_STATE_ON);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d14:	485e      	ldr	r0, [pc, #376]	; (8000e90 <process_inputs+0x4cc>)
 8000d16:	f001 f9e4 	bl	80020e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(AXIS_X_MULTIPLIER_LED_3_GPIO_Port, AXIS_X_MULTIPLIER_LED_3_Pin, LED_STATE_OFF);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d20:	485b      	ldr	r0, [pc, #364]	; (8000e90 <process_inputs+0x4cc>)
 8000d22:	f001 f9de 	bl	80020e2 <HAL_GPIO_WritePin>
				break;
 8000d26:	e013      	b.n	8000d50 <process_inputs+0x38c>
				HAL_GPIO_WritePin(AXIS_X_MULTIPLIER_LED_1_GPIO_Port, AXIS_X_MULTIPLIER_LED_1_Pin, LED_STATE_OFF);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d2e:	4858      	ldr	r0, [pc, #352]	; (8000e90 <process_inputs+0x4cc>)
 8000d30:	f001 f9d7 	bl	80020e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(AXIS_X_MULTIPLIER_LED_2_GPIO_Port, AXIS_X_MULTIPLIER_LED_2_Pin, LED_STATE_OFF);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d3a:	4855      	ldr	r0, [pc, #340]	; (8000e90 <process_inputs+0x4cc>)
 8000d3c:	f001 f9d1 	bl	80020e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(AXIS_X_MULTIPLIER_LED_3_GPIO_Port, AXIS_X_MULTIPLIER_LED_3_Pin, LED_STATE_ON);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d46:	4852      	ldr	r0, [pc, #328]	; (8000e90 <process_inputs+0x4cc>)
 8000d48:	f001 f9cb 	bl	80020e2 <HAL_GPIO_WritePin>
				break;
 8000d4c:	e000      	b.n	8000d50 <process_inputs+0x38c>
				break;
 8000d4e:	bf00      	nop
		}

		// Set / Reset YZ axis multiplier LEDs
		switch(pendant_data.x_axis_multiplicity){
 8000d50:	4b4e      	ldr	r3, [pc, #312]	; (8000e8c <process_inputs+0x4c8>)
 8000d52:	7a1b      	ldrb	r3, [r3, #8]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d028      	beq.n	8000daa <process_inputs+0x3e6>
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	dc37      	bgt.n	8000dcc <process_inputs+0x408>
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d002      	beq.n	8000d66 <process_inputs+0x3a2>
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d011      	beq.n	8000d88 <process_inputs+0x3c4>
				HAL_GPIO_WritePin(AXIS_YZ_MULTIPLIER_LED_1_GPIO_Port, AXIS_YZ_MULTIPLIER_LED_1_Pin, LED_STATE_OFF);
				HAL_GPIO_WritePin(AXIS_YZ_MULTIPLIER_LED_2_GPIO_Port, AXIS_YZ_MULTIPLIER_LED_2_Pin, LED_STATE_OFF);
				HAL_GPIO_WritePin(AXIS_YZ_MULTIPLIER_LED_3_GPIO_Port, AXIS_YZ_MULTIPLIER_LED_3_Pin, LED_STATE_ON);
				break;
			default:
				break;
 8000d64:	e032      	b.n	8000dcc <process_inputs+0x408>
				HAL_GPIO_WritePin(AXIS_YZ_MULTIPLIER_LED_1_GPIO_Port, AXIS_YZ_MULTIPLIER_LED_1_Pin, LED_STATE_ON);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d6c:	4848      	ldr	r0, [pc, #288]	; (8000e90 <process_inputs+0x4cc>)
 8000d6e:	f001 f9b8 	bl	80020e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(AXIS_YZ_MULTIPLIER_LED_2_GPIO_Port, AXIS_YZ_MULTIPLIER_LED_2_Pin, LED_STATE_OFF);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2108      	movs	r1, #8
 8000d76:	4847      	ldr	r0, [pc, #284]	; (8000e94 <process_inputs+0x4d0>)
 8000d78:	f001 f9b3 	bl	80020e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(AXIS_YZ_MULTIPLIER_LED_3_GPIO_Port, AXIS_YZ_MULTIPLIER_LED_3_Pin, LED_STATE_OFF);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4844      	ldr	r0, [pc, #272]	; (8000e94 <process_inputs+0x4d0>)
 8000d82:	f001 f9ae 	bl	80020e2 <HAL_GPIO_WritePin>
				break;
 8000d86:	e022      	b.n	8000dce <process_inputs+0x40a>
				HAL_GPIO_WritePin(AXIS_YZ_MULTIPLIER_LED_1_GPIO_Port, AXIS_YZ_MULTIPLIER_LED_1_Pin, LED_STATE_OFF);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8e:	4840      	ldr	r0, [pc, #256]	; (8000e90 <process_inputs+0x4cc>)
 8000d90:	f001 f9a7 	bl	80020e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(AXIS_YZ_MULTIPLIER_LED_2_GPIO_Port, AXIS_YZ_MULTIPLIER_LED_2_Pin, LED_STATE_ON);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2108      	movs	r1, #8
 8000d98:	483e      	ldr	r0, [pc, #248]	; (8000e94 <process_inputs+0x4d0>)
 8000d9a:	f001 f9a2 	bl	80020e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(AXIS_YZ_MULTIPLIER_LED_3_GPIO_Port, AXIS_YZ_MULTIPLIER_LED_3_Pin, LED_STATE_OFF);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2110      	movs	r1, #16
 8000da2:	483c      	ldr	r0, [pc, #240]	; (8000e94 <process_inputs+0x4d0>)
 8000da4:	f001 f99d 	bl	80020e2 <HAL_GPIO_WritePin>
				break;
 8000da8:	e011      	b.n	8000dce <process_inputs+0x40a>
				HAL_GPIO_WritePin(AXIS_YZ_MULTIPLIER_LED_1_GPIO_Port, AXIS_YZ_MULTIPLIER_LED_1_Pin, LED_STATE_OFF);
 8000daa:	2201      	movs	r2, #1
 8000dac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000db0:	4837      	ldr	r0, [pc, #220]	; (8000e90 <process_inputs+0x4cc>)
 8000db2:	f001 f996 	bl	80020e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(AXIS_YZ_MULTIPLIER_LED_2_GPIO_Port, AXIS_YZ_MULTIPLIER_LED_2_Pin, LED_STATE_OFF);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2108      	movs	r1, #8
 8000dba:	4836      	ldr	r0, [pc, #216]	; (8000e94 <process_inputs+0x4d0>)
 8000dbc:	f001 f991 	bl	80020e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(AXIS_YZ_MULTIPLIER_LED_3_GPIO_Port, AXIS_YZ_MULTIPLIER_LED_3_Pin, LED_STATE_ON);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	4833      	ldr	r0, [pc, #204]	; (8000e94 <process_inputs+0x4d0>)
 8000dc6:	f001 f98c 	bl	80020e2 <HAL_GPIO_WritePin>
				break;
 8000dca:	e000      	b.n	8000dce <process_inputs+0x40a>
				break;
 8000dcc:	bf00      	nop
		}

		// Set / Reset spindle mode LEDs
		switch(pendant_data.spindle_mode){
 8000dce:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <process_inputs+0x4c8>)
 8000dd0:	7b1b      	ldrb	r3, [r3, #12]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d012      	beq.n	8000dfc <process_inputs+0x438>
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	dc2a      	bgt.n	8000e30 <process_inputs+0x46c>
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d01b      	beq.n	8000e16 <process_inputs+0x452>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d126      	bne.n	8000e30 <process_inputs+0x46c>
			case SPINDLE_MODE_CW:
				HAL_GPIO_WritePin(SPINDLE_CW_LED_GPIO_Port, SPINDLE_CW_LED_Pin, LED_STATE_ON);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de8:	482a      	ldr	r0, [pc, #168]	; (8000e94 <process_inputs+0x4d0>)
 8000dea:	f001 f97a 	bl	80020e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SPINDLE_CCW_LED_GPIO_Port, SPINDLE_CCW_LED_Pin, LED_STATE_OFF);
 8000dee:	2201      	movs	r2, #1
 8000df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df4:	4827      	ldr	r0, [pc, #156]	; (8000e94 <process_inputs+0x4d0>)
 8000df6:	f001 f974 	bl	80020e2 <HAL_GPIO_WritePin>
				break;
 8000dfa:	e01a      	b.n	8000e32 <process_inputs+0x46e>
			case SPINDLE_MODE_CCW:
				HAL_GPIO_WritePin(SPINDLE_CW_LED_GPIO_Port, SPINDLE_CW_LED_Pin, LED_STATE_OFF);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e02:	4824      	ldr	r0, [pc, #144]	; (8000e94 <process_inputs+0x4d0>)
 8000e04:	f001 f96d 	bl	80020e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SPINDLE_CCW_LED_GPIO_Port, SPINDLE_CCW_LED_Pin, LED_STATE_ON);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e0e:	4821      	ldr	r0, [pc, #132]	; (8000e94 <process_inputs+0x4d0>)
 8000e10:	f001 f967 	bl	80020e2 <HAL_GPIO_WritePin>
				break;
 8000e14:	e00d      	b.n	8000e32 <process_inputs+0x46e>
			case SPINDLE_MODE_OFF:
				HAL_GPIO_WritePin(SPINDLE_CW_LED_GPIO_Port, SPINDLE_CW_LED_Pin, LED_STATE_OFF);
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1c:	481d      	ldr	r0, [pc, #116]	; (8000e94 <process_inputs+0x4d0>)
 8000e1e:	f001 f960 	bl	80020e2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SPINDLE_CCW_LED_GPIO_Port, SPINDLE_CCW_LED_Pin, LED_STATE_OFF);
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e28:	481a      	ldr	r0, [pc, #104]	; (8000e94 <process_inputs+0x4d0>)
 8000e2a:	f001 f95a 	bl	80020e2 <HAL_GPIO_WritePin>
				break;
 8000e2e:	e000      	b.n	8000e32 <process_inputs+0x46e>
			default:
				break;
 8000e30:	bf00      	nop
		}

		// Set / Reset machine status LEDs
		if(pendant_data.system_status == Idle){
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <process_inputs+0x4c8>)
 8000e34:	7b5b      	ldrb	r3, [r3, #13]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d10b      	bne.n	8000e52 <process_inputs+0x48e>
			HAL_GPIO_WritePin(CYCLE_START_LED_GPIO_Port, CYCLE_START_LED_Pin, LED_STATE_ON);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e40:	4811      	ldr	r0, [pc, #68]	; (8000e88 <process_inputs+0x4c4>)
 8000e42:	f001 f94e 	bl	80020e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HOLD_LED_GPIO_Port, HOLD_LED_Pin, LED_STATE_OFF);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	4812      	ldr	r0, [pc, #72]	; (8000e94 <process_inputs+0x4d0>)
 8000e4c:	f001 f949 	bl	80020e2 <HAL_GPIO_WritePin>
		}
	}else if(pendant_mpg_status == MPG_STATUS_DISABLED){
		// Turn off system LEDs
		turn_off_leds();
	}
}
 8000e50:	e015      	b.n	8000e7e <process_inputs+0x4ba>
		}else if(pendant_data.system_status == Hold){
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <process_inputs+0x4c8>)
 8000e54:	7b5b      	ldrb	r3, [r3, #13]
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	d111      	bne.n	8000e7e <process_inputs+0x4ba>
			HAL_GPIO_WritePin(CYCLE_START_LED_GPIO_Port, CYCLE_START_LED_Pin, LED_STATE_OFF);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e60:	4809      	ldr	r0, [pc, #36]	; (8000e88 <process_inputs+0x4c4>)
 8000e62:	f001 f93e 	bl	80020e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HOLD_LED_GPIO_Port, HOLD_LED_Pin, LED_STATE_ON);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	480a      	ldr	r0, [pc, #40]	; (8000e94 <process_inputs+0x4d0>)
 8000e6c:	f001 f939 	bl	80020e2 <HAL_GPIO_WritePin>
}
 8000e70:	e005      	b.n	8000e7e <process_inputs+0x4ba>
	}else if(pendant_mpg_status == MPG_STATUS_DISABLED){
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <process_inputs+0x4d4>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <process_inputs+0x4ba>
		turn_off_leds();
 8000e7a:	f7ff fd43 	bl	8000904 <turn_off_leds>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40011000 	.word	0x40011000
 8000e8c:	2000032c 	.word	0x2000032c
 8000e90:	40010800 	.word	0x40010800
 8000e94:	40010c00 	.word	0x40010c00
 8000e98:	200002f2 	.word	0x200002f2

08000e9c <get_spindle_mode>:

/**
  * @brief Analyze spindle mode switch input and return spindle mode
  */
uint8_t get_spindle_mode(void){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
	uint8_t button_states = 0x00;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	71fb      	strb	r3, [r7, #7]

	button_states |= (~get_button_state(SPINDLE_3POS_SW_NC_1_CH)) & 0x01;
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff fa16 	bl	80002d8 <get_button_state>
 8000eac:	4603      	mov	r3, r0
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	bf0c      	ite	eq
 8000eb6:	2301      	moveq	r3, #1
 8000eb8:	2300      	movne	r3, #0
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	b25a      	sxtb	r2, r3
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	b25b      	sxtb	r3, r3
 8000ec6:	71fb      	strb	r3, [r7, #7]
	button_states |= (((~get_button_state(SPINDLE_3POS_SW_NC_2_CH)) & 0x01) << 1);
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f7ff fa05 	bl	80002d8 <get_button_state>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <get_spindle_mode+0x40>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	e000      	b.n	8000ede <get_spindle_mode+0x42>
 8000edc:	2300      	movs	r3, #0
 8000ede:	b25a      	sxtb	r2, r3
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	71fb      	strb	r3, [r7, #7]

	if(button_states == 0x03){
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d101      	bne.n	8000ef4 <get_spindle_mode+0x58>
		return SPINDLE_MODE_OFF;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e00a      	b.n	8000f0a <get_spindle_mode+0x6e>
	}else if(button_states == 0x01){
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d101      	bne.n	8000efe <get_spindle_mode+0x62>
		return SPINDLE_MODE_CW;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e005      	b.n	8000f0a <get_spindle_mode+0x6e>
	}else if(button_states == 0x02){
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d101      	bne.n	8000f08 <get_spindle_mode+0x6c>
		return SPINDLE_MODE_CCW;
 8000f04:	2302      	movs	r3, #2
 8000f06:	e000      	b.n	8000f0a <get_spindle_mode+0x6e>
	}

	return SPINDLE_MODE_OFF;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <get_x_axis_multiplier>:

/**
  * @brief Analyze X axis multiplier selector input and return the selected multiplier
  */
uint8_t get_x_axis_multiplier(void){
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
	uint8_t button_states = 0x00;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	71fb      	strb	r3, [r7, #7]

	button_states |= (~get_button_state(AXIS_X_MULTIPLIER_SW_NC_1_CH)) & 0x01;
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f7ff f9db 	bl	80002d8 <get_button_state>
 8000f22:	4603      	mov	r3, r0
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	bf0c      	ite	eq
 8000f2c:	2301      	moveq	r3, #1
 8000f2e:	2300      	movne	r3, #0
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	b25a      	sxtb	r2, r3
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	71fb      	strb	r3, [r7, #7]
	button_states |= (((~get_button_state(AXIS_X_MULTIPLIER_SW_NC_2_CH)) & 0x01) << 1);
 8000f3e:	2003      	movs	r0, #3
 8000f40:	f7ff f9ca 	bl	80002d8 <get_button_state>
 8000f44:	4603      	mov	r3, r0
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <get_x_axis_multiplier+0x40>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e000      	b.n	8000f54 <get_x_axis_multiplier+0x42>
 8000f52:	2300      	movs	r3, #0
 8000f54:	b25a      	sxtb	r2, r3
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	71fb      	strb	r3, [r7, #7]

	if(button_states == 0x03){
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	d101      	bne.n	8000f6a <get_x_axis_multiplier+0x58>
		return 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e00a      	b.n	8000f80 <get_x_axis_multiplier+0x6e>
	}else if(button_states == 0x01){
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <get_x_axis_multiplier+0x62>
		return 1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e005      	b.n	8000f80 <get_x_axis_multiplier+0x6e>
	}else if(button_states == 0x02){
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d101      	bne.n	8000f7e <get_x_axis_multiplier+0x6c>
		return 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e000      	b.n	8000f80 <get_x_axis_multiplier+0x6e>
	}

	return 0;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <get_yz_axis_multiplier>:

/**
  * @brief Analyze Y/Z axes multiplier selector input and return the selected multiplier
  */
uint8_t get_yz_axis_multiplier(void){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
	uint8_t button_states = 0x00;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	71fb      	strb	r3, [r7, #7]

	button_states |= (~get_button_state(AXIS_YZ_MULTIPLIER_SW_NC_1_CH) & 0x01);
 8000f92:	2004      	movs	r0, #4
 8000f94:	f7ff f9a0 	bl	80002d8 <get_button_state>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	bf0c      	ite	eq
 8000fa2:	2301      	moveq	r3, #1
 8000fa4:	2300      	movne	r3, #0
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	b25a      	sxtb	r2, r3
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	71fb      	strb	r3, [r7, #7]
	button_states |= (((~get_button_state(AXIS_YZ_MULTIPLIER_SW_NC_2_CH)) & 0x01) << 1);
 8000fb4:	2005      	movs	r0, #5
 8000fb6:	f7ff f98f 	bl	80002d8 <get_button_state>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <get_yz_axis_multiplier+0x40>
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e000      	b.n	8000fca <get_yz_axis_multiplier+0x42>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	b25a      	sxtb	r2, r3
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	71fb      	strb	r3, [r7, #7]

	if(button_states == 0x03){
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d101      	bne.n	8000fe0 <get_yz_axis_multiplier+0x58>
		return 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e00a      	b.n	8000ff6 <get_yz_axis_multiplier+0x6e>
	}else if(button_states == 0x01){
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d101      	bne.n	8000fea <get_yz_axis_multiplier+0x62>
		return 1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e005      	b.n	8000ff6 <get_yz_axis_multiplier+0x6e>
	}else if(button_states == 0x02){
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d101      	bne.n	8000ff4 <get_yz_axis_multiplier+0x6c>
		return 2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e000      	b.n	8000ff6 <get_yz_axis_multiplier+0x6e>
	}

	return 0;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001002:	b672      	cpsid	i
}
 8001004:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001006:	e7fe      	b.n	8001006 <Error_Handler+0x8>

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_MspInit+0x40>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <HAL_MspInit+0x40>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6193      	str	r3, [r2, #24]
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <HAL_MspInit+0x40>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_MspInit+0x40>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a07      	ldr	r2, [pc, #28]	; (8001048 <HAL_MspInit+0x40>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001030:	61d3      	str	r3, [r2, #28]
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_MspInit+0x40>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	40021000 	.word	0x40021000

0800104c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a16      	ldr	r2, [pc, #88]	; (80010b4 <HAL_TIM_Base_MspInit+0x68>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10c      	bne.n	8001078 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <HAL_TIM_Base_MspInit+0x6c>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	4a15      	ldr	r2, [pc, #84]	; (80010b8 <HAL_TIM_Base_MspInit+0x6c>)
 8001064:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001068:	6193      	str	r3, [r2, #24]
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <HAL_TIM_Base_MspInit+0x6c>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001076:	e018      	b.n	80010aa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <HAL_TIM_Base_MspInit+0x70>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d113      	bne.n	80010aa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <HAL_TIM_Base_MspInit+0x6c>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	4a0c      	ldr	r2, [pc, #48]	; (80010b8 <HAL_TIM_Base_MspInit+0x6c>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	61d3      	str	r3, [r2, #28]
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_TIM_Base_MspInit+0x6c>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2102      	movs	r1, #2
 800109e:	201e      	movs	r0, #30
 80010a0:	f000 fbab 	bl	80017fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80010a4:	201e      	movs	r0, #30
 80010a6:	f000 fbc4 	bl	8001832 <HAL_NVIC_EnableIRQ>
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40012c00 	.word	0x40012c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40000800 	.word	0x40000800

080010c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0318 	add.w	r3, r7, #24
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010de:	d124      	bne.n	800112a <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010e0:	4b28      	ldr	r3, [pc, #160]	; (8001184 <HAL_TIM_Encoder_MspInit+0xc4>)
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	4a27      	ldr	r2, [pc, #156]	; (8001184 <HAL_TIM_Encoder_MspInit+0xc4>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	61d3      	str	r3, [r2, #28]
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <HAL_TIM_Encoder_MspInit+0xc4>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <HAL_TIM_Encoder_MspInit+0xc4>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a21      	ldr	r2, [pc, #132]	; (8001184 <HAL_TIM_Encoder_MspInit+0xc4>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001110:	2303      	movs	r3, #3
 8001112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 0318 	add.w	r3, r7, #24
 8001120:	4619      	mov	r1, r3
 8001122:	4819      	ldr	r0, [pc, #100]	; (8001188 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001124:	f000 fe42 	bl	8001dac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001128:	e028      	b.n	800117c <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM3)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a17      	ldr	r2, [pc, #92]	; (800118c <HAL_TIM_Encoder_MspInit+0xcc>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d123      	bne.n	800117c <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	4a12      	ldr	r2, [pc, #72]	; (8001184 <HAL_TIM_Encoder_MspInit+0xc4>)
 800113a:	f043 0302 	orr.w	r3, r3, #2
 800113e:	61d3      	str	r3, [r2, #28]
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_TIM_Encoder_MspInit+0xc4>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_TIM_Encoder_MspInit+0xc4>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001164:	23c0      	movs	r3, #192	; 0xc0
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 0318 	add.w	r3, r7, #24
 8001174:	4619      	mov	r1, r3
 8001176:	4804      	ldr	r0, [pc, #16]	; (8001188 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001178:	f000 fe18 	bl	8001dac <HAL_GPIO_Init>
}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	; 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40021000 	.word	0x40021000
 8001188:	40010800 	.word	0x40010800
 800118c:	40000400 	.word	0x40000400

08001190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a46      	ldr	r2, [pc, #280]	; (80012c4 <HAL_UART_MspInit+0x134>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	f040 8084 	bne.w	80012ba <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011b2:	4b45      	ldr	r3, [pc, #276]	; (80012c8 <HAL_UART_MspInit+0x138>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	4a44      	ldr	r2, [pc, #272]	; (80012c8 <HAL_UART_MspInit+0x138>)
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011bc:	61d3      	str	r3, [r2, #28]
 80011be:	4b42      	ldr	r3, [pc, #264]	; (80012c8 <HAL_UART_MspInit+0x138>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <HAL_UART_MspInit+0x138>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4a3e      	ldr	r2, [pc, #248]	; (80012c8 <HAL_UART_MspInit+0x138>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6193      	str	r3, [r2, #24]
 80011d6:	4b3c      	ldr	r3, [pc, #240]	; (80012c8 <HAL_UART_MspInit+0x138>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011e2:	2304      	movs	r3, #4
 80011e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	4619      	mov	r1, r3
 80011f4:	4835      	ldr	r0, [pc, #212]	; (80012cc <HAL_UART_MspInit+0x13c>)
 80011f6:	f000 fdd9 	bl	8001dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011fa:	2308      	movs	r3, #8
 80011fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0310 	add.w	r3, r7, #16
 800120a:	4619      	mov	r1, r3
 800120c:	482f      	ldr	r0, [pc, #188]	; (80012cc <HAL_UART_MspInit+0x13c>)
 800120e:	f000 fdcd 	bl	8001dac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001212:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <HAL_UART_MspInit+0x140>)
 8001214:	4a2f      	ldr	r2, [pc, #188]	; (80012d4 <HAL_UART_MspInit+0x144>)
 8001216:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001218:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <HAL_UART_MspInit+0x140>)
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800121e:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <HAL_UART_MspInit+0x140>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001224:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <HAL_UART_MspInit+0x140>)
 8001226:	2280      	movs	r2, #128	; 0x80
 8001228:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <HAL_UART_MspInit+0x140>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001230:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <HAL_UART_MspInit+0x140>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <HAL_UART_MspInit+0x140>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <HAL_UART_MspInit+0x140>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001242:	4823      	ldr	r0, [pc, #140]	; (80012d0 <HAL_UART_MspInit+0x140>)
 8001244:	f000 fb10 	bl	8001868 <HAL_DMA_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800124e:	f7ff fed6 	bl	8000ffe <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a1e      	ldr	r2, [pc, #120]	; (80012d0 <HAL_UART_MspInit+0x140>)
 8001256:	63da      	str	r2, [r3, #60]	; 0x3c
 8001258:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <HAL_UART_MspInit+0x140>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800125e:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <HAL_UART_MspInit+0x148>)
 8001260:	4a1e      	ldr	r2, [pc, #120]	; (80012dc <HAL_UART_MspInit+0x14c>)
 8001262:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <HAL_UART_MspInit+0x148>)
 8001266:	2210      	movs	r2, #16
 8001268:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800126a:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <HAL_UART_MspInit+0x148>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <HAL_UART_MspInit+0x148>)
 8001272:	2280      	movs	r2, #128	; 0x80
 8001274:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_UART_MspInit+0x148>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <HAL_UART_MspInit+0x148>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <HAL_UART_MspInit+0x148>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <HAL_UART_MspInit+0x148>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800128e:	4812      	ldr	r0, [pc, #72]	; (80012d8 <HAL_UART_MspInit+0x148>)
 8001290:	f000 faea 	bl	8001868 <HAL_DMA_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800129a:	f7ff feb0 	bl	8000ffe <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <HAL_UART_MspInit+0x148>)
 80012a2:	639a      	str	r2, [r3, #56]	; 0x38
 80012a4:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <HAL_UART_MspInit+0x148>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2026      	movs	r0, #38	; 0x26
 80012b0:	f000 faa3 	bl	80017fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012b4:	2026      	movs	r0, #38	; 0x26
 80012b6:	f000 fabc 	bl	8001832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	3720      	adds	r7, #32
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40004400 	.word	0x40004400
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40010800 	.word	0x40010800
 80012d0:	20000268 	.word	0x20000268
 80012d4:	4002006c 	.word	0x4002006c
 80012d8:	200002ac 	.word	0x200002ac
 80012dc:	40020080 	.word	0x40020080

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <NMI_Handler+0x4>

080012e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <MemManage_Handler+0x4>

080012f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <UsageFault_Handler+0x4>

080012fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001326:	f000 f975 	bl	8001614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <DMA1_Channel6_IRQHandler+0x10>)
 8001336:	f000 fc05 	bl	8001b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000268 	.word	0x20000268

08001344 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <DMA1_Channel7_IRQHandler+0x10>)
 800134a:	f000 fbfb 	bl	8001b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200002ac 	.word	0x200002ac

08001358 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	// Call function that implements the updating
	// of button channel statuses in a de-bouncer
	update_button_status();
 800135c:	f7fe fef6 	bl	800014c <update_button_status>

	// Increment a counter and when it reaches TIM1_INT_ENTRIES
	// set a flag that shows whether the main program should
	// process the system inputs
	if(++inputs_counter >= TIM1_INT_ENTRIES){
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <TIM4_IRQHandler+0x34>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <TIM4_IRQHandler+0x34>)
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <TIM4_IRQHandler+0x34>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b04      	cmp	r3, #4
 8001372:	d905      	bls.n	8001380 <TIM4_IRQHandler+0x28>
		inputs_counter = 0;
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <TIM4_IRQHandler+0x34>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
		process_inputs_flag = true;
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <TIM4_IRQHandler+0x38>)
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <TIM4_IRQHandler+0x3c>)
 8001382:	f001 fd4b 	bl	8002e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000328 	.word	0x20000328
 8001390:	200002f0 	.word	0x200002f0
 8001394:	200001d8 	.word	0x200001d8

08001398 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <USART2_IRQHandler+0x10>)
 800139e:	f002 f9ed 	bl	800377c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000220 	.word	0x20000220

080013ac <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 1 */
// CALLBACKS
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART2){ // Events for USART2
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a3b      	ldr	r2, [pc, #236]	; (80014ac <HAL_UARTEx_RxEventCallback+0x100>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d16f      	bne.n	80014a2 <HAL_UARTEx_RxEventCallback+0xf6>
		HAL_UART_RxEventTypeTypeDef eventId = HAL_UARTEx_GetRxEventType(huart);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f002 f9cf 	bl	8003766 <HAL_UARTEx_GetRxEventType>
 80013c8:	60f8      	str	r0, [r7, #12]

		if(eventId == HAL_UART_RXEVENT_IDLE || eventId == HAL_UART_RXEVENT_TC){
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d002      	beq.n	80013d6 <HAL_UARTEx_RxEventCallback+0x2a>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d165      	bne.n	80014a2 <HAL_UARTEx_RxEventCallback+0xf6>
			// The program will enter this if statement,
			// if the received message has "GET_DATA" in it
			if(strstr((char*)uart2_rx_buf, "GET_DATA")){
 80013d6:	4936      	ldr	r1, [pc, #216]	; (80014b0 <HAL_UARTEx_RxEventCallback+0x104>)
 80013d8:	4836      	ldr	r0, [pc, #216]	; (80014b4 <HAL_UARTEx_RxEventCallback+0x108>)
 80013da:	f003 f8d9 	bl	8004590 <strstr>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d056      	beq.n	8001492 <HAL_UARTEx_RxEventCallback+0xe6>
				// The program will enter this if statement, if
				// the received message's size is more than 13
				if(Size >= 13){
 80013e4:	887b      	ldrh	r3, [r7, #2]
 80013e6:	2b0c      	cmp	r3, #12
 80013e8:	d951      	bls.n	800148e <HAL_UARTEx_RxEventCallback+0xe2>
					//uint16_t spindle_sw_delay_action = atoi(uart2_rx_buf + 13);	//TODO
					if(uart2_rx_buf[9] == '1'){ // Received system status is ON
 80013ea:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <HAL_UARTEx_RxEventCallback+0x108>)
 80013ec:	7a5b      	ldrb	r3, [r3, #9]
 80013ee:	2b31      	cmp	r3, #49	; 0x31
 80013f0:	d140      	bne.n	8001474 <HAL_UARTEx_RxEventCallback+0xc8>
						// Turn on system
						pendant_status = true;
 80013f2:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <HAL_UARTEx_RxEventCallback+0x10c>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]

						// Logic for enabling/disabling the MPG functionality
						if(uart2_rx_buf[11] == ('0' + MPG_STATUS_DISABLED) && pendant_mpg_status == MPG_STATUS_ENABLE_ONGOING && !pendant_data.mpg){
 80013f8:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <HAL_UARTEx_RxEventCallback+0x108>)
 80013fa:	7adb      	ldrb	r3, [r3, #11]
 80013fc:	2b30      	cmp	r3, #48	; 0x30
 80013fe:	d10e      	bne.n	800141e <HAL_UARTEx_RxEventCallback+0x72>
 8001400:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <HAL_UARTEx_RxEventCallback+0x110>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d10a      	bne.n	800141e <HAL_UARTEx_RxEventCallback+0x72>
 8001408:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <HAL_UARTEx_RxEventCallback+0x114>)
 800140a:	7b9b      	ldrb	r3, [r3, #14]
 800140c:	f083 0301 	eor.w	r3, r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_UARTEx_RxEventCallback+0x72>
							pendant_data.mpg = true;
 8001416:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <HAL_UARTEx_RxEventCallback+0x114>)
 8001418:	2201      	movs	r2, #1
 800141a:	739a      	strb	r2, [r3, #14]
 800141c:	e037      	b.n	800148e <HAL_UARTEx_RxEventCallback+0xe2>
						}else if(uart2_rx_buf[11] == ('0' + MPG_STATUS_ENABLED) && pendant_mpg_status == MPG_STATUS_ENABLE_ONGOING){
 800141e:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <HAL_UARTEx_RxEventCallback+0x108>)
 8001420:	7adb      	ldrb	r3, [r3, #11]
 8001422:	2b31      	cmp	r3, #49	; 0x31
 8001424:	d10a      	bne.n	800143c <HAL_UARTEx_RxEventCallback+0x90>
 8001426:	4b25      	ldr	r3, [pc, #148]	; (80014bc <HAL_UARTEx_RxEventCallback+0x110>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d106      	bne.n	800143c <HAL_UARTEx_RxEventCallback+0x90>
							pendant_data.mpg = true;
 800142e:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <HAL_UARTEx_RxEventCallback+0x114>)
 8001430:	2201      	movs	r2, #1
 8001432:	739a      	strb	r2, [r3, #14]
							pendant_mpg_status = MPG_STATUS_ENABLED;
 8001434:	4b21      	ldr	r3, [pc, #132]	; (80014bc <HAL_UARTEx_RxEventCallback+0x110>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e028      	b.n	800148e <HAL_UARTEx_RxEventCallback+0xe2>
						}else if(uart2_rx_buf[11] == ('0' + MPG_STATUS_ENABLED) && pendant_mpg_status == MPG_STATUS_DISABLED){
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_UARTEx_RxEventCallback+0x108>)
 800143e:	7adb      	ldrb	r3, [r3, #11]
 8001440:	2b31      	cmp	r3, #49	; 0x31
 8001442:	d107      	bne.n	8001454 <HAL_UARTEx_RxEventCallback+0xa8>
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <HAL_UARTEx_RxEventCallback+0x110>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d103      	bne.n	8001454 <HAL_UARTEx_RxEventCallback+0xa8>
							pendant_data.mpg = false;
 800144c:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <HAL_UARTEx_RxEventCallback+0x114>)
 800144e:	2200      	movs	r2, #0
 8001450:	739a      	strb	r2, [r3, #14]
 8001452:	e01c      	b.n	800148e <HAL_UARTEx_RxEventCallback+0xe2>
						}else if(uart2_rx_buf[11] == ('0' + MPG_STATUS_DISABLED) && pendant_mpg_status == MPG_STATUS_ENABLED && pendant_data.mpg){
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <HAL_UARTEx_RxEventCallback+0x108>)
 8001456:	7adb      	ldrb	r3, [r3, #11]
 8001458:	2b30      	cmp	r3, #48	; 0x30
 800145a:	d118      	bne.n	800148e <HAL_UARTEx_RxEventCallback+0xe2>
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <HAL_UARTEx_RxEventCallback+0x110>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d114      	bne.n	800148e <HAL_UARTEx_RxEventCallback+0xe2>
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <HAL_UARTEx_RxEventCallback+0x114>)
 8001466:	7b9b      	ldrb	r3, [r3, #14]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d010      	beq.n	800148e <HAL_UARTEx_RxEventCallback+0xe2>
							pendant_data.mpg = false;
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <HAL_UARTEx_RxEventCallback+0x114>)
 800146e:	2200      	movs	r2, #0
 8001470:	739a      	strb	r2, [r3, #14]
 8001472:	e00c      	b.n	800148e <HAL_UARTEx_RxEventCallback+0xe2>
						}
					}else if(uart2_rx_buf[9] == '0'){ // Received system status is OFF
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_UARTEx_RxEventCallback+0x108>)
 8001476:	7a5b      	ldrb	r3, [r3, #9]
 8001478:	2b30      	cmp	r3, #48	; 0x30
 800147a:	d108      	bne.n	800148e <HAL_UARTEx_RxEventCallback+0xe2>
						// Turn off system
						pendant_status = false;
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_UARTEx_RxEventCallback+0x10c>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]

						// Turn off system MPG functionality
						pendant_mpg_status = MPG_STATUS_DISABLED;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_UARTEx_RxEventCallback+0x110>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]

						// Reset pendant data MPG functionality flag
						pendant_data.mpg = false;
 8001488:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <HAL_UARTEx_RxEventCallback+0x114>)
 800148a:	2200      	movs	r2, #0
 800148c:	739a      	strb	r2, [r3, #14]
					}
				}

				// Call function that sends message
				// with system data via UART
				send_system_data();
 800148e:	f000 f839 	bl	8001504 <send_system_data>
			}

			// Clear UART2 transmit buffer
			// from index 0 to index "Size"
			memset(uart2_rx_buf, 0, Size);
 8001492:	887b      	ldrh	r3, [r7, #2]
 8001494:	461a      	mov	r2, r3
 8001496:	2100      	movs	r1, #0
 8001498:	4806      	ldr	r0, [pc, #24]	; (80014b4 <HAL_UARTEx_RxEventCallback+0x108>)
 800149a:	f003 f871 	bl	8004580 <memset>

			// Call function that initiates DMA reception transfer on UART2
			start_uart2_reception();
 800149e:	f000 f811 	bl	80014c4 <start_uart2_reception>
		}
	}
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40004400 	.word	0x40004400
 80014b0:	0800461c 	.word	0x0800461c
 80014b4:	20000308 	.word	0x20000308
 80014b8:	200002f1 	.word	0x200002f1
 80014bc:	200002f2 	.word	0x200002f2
 80014c0:	2000032c 	.word	0x2000032c

080014c4 <start_uart2_reception>:


// CUSTOM FUCNTIONS
void start_uart2_reception(void){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	if(HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart2_rx_buf, UART_BUF_SIZE) == HAL_OK){
 80014c8:	2220      	movs	r2, #32
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <start_uart2_reception+0x28>)
 80014cc:	4808      	ldr	r0, [pc, #32]	; (80014f0 <start_uart2_reception+0x2c>)
 80014ce:	f002 f8ed 	bl	80036ac <HAL_UARTEx_ReceiveToIdle_DMA>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d107      	bne.n	80014e8 <start_uart2_reception+0x24>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <start_uart2_reception+0x30>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <start_uart2_reception+0x30>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0204 	bic.w	r2, r2, #4
 80014e6:	601a      	str	r2, [r3, #0]
	}
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000308 	.word	0x20000308
 80014f0:	20000220 	.word	0x20000220
 80014f4:	20000268 	.word	0x20000268

080014f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <send_system_data>:

/* Private user code ---------------------------------------------------------*/
/**
  * @brief Send system data packet/message via UART
  */
void send_system_data(void){
 8001504:	b5b0      	push	{r4, r5, r7, lr}
 8001506:	af00      	add	r7, sp, #0
	// Clear UART2 transmit buffer
	memset(uart2_tx_buf, 0, UART_BUF_SIZE);
 8001508:	2220      	movs	r2, #32
 800150a:	2100      	movs	r1, #0
 800150c:	4808      	ldr	r0, [pc, #32]	; (8001530 <send_system_data+0x2c>)
 800150e:	f003 f837 	bl	8004580 <memset>

	// Copy pendant data global structure into buffer
	memcpy(uart2_tx_buf, &pendant_data, sizeof(pendant_data_t));
 8001512:	4a07      	ldr	r2, [pc, #28]	; (8001530 <send_system_data+0x2c>)
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <send_system_data+0x30>)
 8001516:	4614      	mov	r4, r2
 8001518:	461d      	mov	r5, r3
 800151a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800151c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151e:	682b      	ldr	r3, [r5, #0]
 8001520:	6023      	str	r3, [r4, #0]

	// Transmit buffer via UART
	HAL_UART_Transmit_DMA(&huart2, uart2_tx_buf, sizeof(pendant_data_t));
 8001522:	2214      	movs	r2, #20
 8001524:	4902      	ldr	r1, [pc, #8]	; (8001530 <send_system_data+0x2c>)
 8001526:	4804      	ldr	r0, [pc, #16]	; (8001538 <send_system_data+0x34>)
 8001528:	f002 f850 	bl	80035cc <HAL_UART_Transmit_DMA>
}
 800152c:	bf00      	nop
 800152e:	bdb0      	pop	{r4, r5, r7, pc}
 8001530:	20000340 	.word	0x20000340
 8001534:	2000032c 	.word	0x2000032c
 8001538:	20000220 	.word	0x20000220

0800153c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800153c:	f7ff ffdc 	bl	80014f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001540:	480b      	ldr	r0, [pc, #44]	; (8001570 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001542:	490c      	ldr	r1, [pc, #48]	; (8001574 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001544:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001558:	4c09      	ldr	r4, [pc, #36]	; (8001580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001566:	f003 f829 	bl	80045bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800156a:	f7fe fec5 	bl	80002f8 <main>
  bx lr
 800156e:	4770      	bx	lr
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001578:	0800465c 	.word	0x0800465c
  ldr r2, =_sbss
 800157c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001580:	20000364 	.word	0x20000364

08001584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC1_2_IRQHandler>
	...

08001588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_Init+0x28>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_Init+0x28>)
 8001592:	f043 0310 	orr.w	r3, r3, #16
 8001596:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001598:	2003      	movs	r0, #3
 800159a:	f000 f923 	bl	80017e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159e:	200f      	movs	r0, #15
 80015a0:	f000 f808 	bl	80015b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a4:	f7ff fd30 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40022000 	.word	0x40022000

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_InitTick+0x54>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_InitTick+0x58>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f93b 	bl	800184e <HAL_SYSTICK_Config>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e00e      	b.n	8001600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b0f      	cmp	r3, #15
 80015e6:	d80a      	bhi.n	80015fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e8:	2200      	movs	r2, #0
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f000 f903 	bl	80017fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <HAL_InitTick+0x5c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e000      	b.n	8001600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000004 	.word	0x20000004
 800160c:	2000000c 	.word	0x2000000c
 8001610:	20000008 	.word	0x20000008

08001614 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_IncTick+0x1c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_IncTick+0x20>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	4a03      	ldr	r2, [pc, #12]	; (8001634 <HAL_IncTick+0x20>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	2000000c 	.word	0x2000000c
 8001634:	20000360 	.word	0x20000360

08001638 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b02      	ldr	r3, [pc, #8]	; (8001648 <HAL_GetTick+0x10>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	20000360 	.word	0x20000360

0800164c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001668:	4013      	ands	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167e:	4a04      	ldr	r2, [pc, #16]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	60d3      	str	r3, [r2, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <__NVIC_GetPriorityGrouping+0x18>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	f003 0307 	and.w	r3, r3, #7
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db0b      	blt.n	80016da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	f003 021f 	and.w	r2, r3, #31
 80016c8:	4906      	ldr	r1, [pc, #24]	; (80016e4 <__NVIC_EnableIRQ+0x34>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	2001      	movs	r0, #1
 80016d2:	fa00 f202 	lsl.w	r2, r0, r2
 80016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100

080016e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db0a      	blt.n	8001712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	490c      	ldr	r1, [pc, #48]	; (8001734 <__NVIC_SetPriority+0x4c>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	440b      	add	r3, r1
 800170c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001710:	e00a      	b.n	8001728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4908      	ldr	r1, [pc, #32]	; (8001738 <__NVIC_SetPriority+0x50>)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	3b04      	subs	r3, #4
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	440b      	add	r3, r1
 8001726:	761a      	strb	r2, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f1c3 0307 	rsb	r3, r3, #7
 8001756:	2b04      	cmp	r3, #4
 8001758:	bf28      	it	cs
 800175a:	2304      	movcs	r3, #4
 800175c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3304      	adds	r3, #4
 8001762:	2b06      	cmp	r3, #6
 8001764:	d902      	bls.n	800176c <NVIC_EncodePriority+0x30>
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3b03      	subs	r3, #3
 800176a:	e000      	b.n	800176e <NVIC_EncodePriority+0x32>
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	f04f 32ff 	mov.w	r2, #4294967295
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43da      	mvns	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	401a      	ands	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	43d9      	mvns	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	4313      	orrs	r3, r2
         );
}
 8001796:	4618      	mov	r0, r3
 8001798:	3724      	adds	r7, #36	; 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b0:	d301      	bcc.n	80017b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00f      	b.n	80017d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <SysTick_Config+0x40>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017be:	210f      	movs	r1, #15
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f7ff ff90 	bl	80016e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <SysTick_Config+0x40>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ce:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <SysTick_Config+0x40>)
 80017d0:	2207      	movs	r2, #7
 80017d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010

080017e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff2d 	bl	800164c <__NVIC_SetPriorityGrouping>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800180c:	f7ff ff42 	bl	8001694 <__NVIC_GetPriorityGrouping>
 8001810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	6978      	ldr	r0, [r7, #20]
 8001818:	f7ff ff90 	bl	800173c <NVIC_EncodePriority>
 800181c:	4602      	mov	r2, r0
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff5f 	bl	80016e8 <__NVIC_SetPriority>
}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff35 	bl	80016b0 <__NVIC_EnableIRQ>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ffa2 	bl	80017a0 <SysTick_Config>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e043      	b.n	8001906 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	4b22      	ldr	r3, [pc, #136]	; (8001910 <HAL_DMA_Init+0xa8>)
 8001886:	4413      	add	r3, r2
 8001888:	4a22      	ldr	r2, [pc, #136]	; (8001914 <HAL_DMA_Init+0xac>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	091b      	lsrs	r3, r3, #4
 8001890:	009a      	lsls	r2, r3, #2
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a1f      	ldr	r2, [pc, #124]	; (8001918 <HAL_DMA_Init+0xb0>)
 800189a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2202      	movs	r2, #2
 80018a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80018b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80018b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80018c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	bffdfff8 	.word	0xbffdfff8
 8001914:	cccccccd 	.word	0xcccccccd
 8001918:	40020000 	.word	0x40020000

0800191c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <HAL_DMA_Start_IT+0x20>
 8001938:	2302      	movs	r3, #2
 800193a:	e04b      	b.n	80019d4 <HAL_DMA_Start_IT+0xb8>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b01      	cmp	r3, #1
 800194e:	d13a      	bne.n	80019c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2202      	movs	r2, #2
 8001954:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0201 	bic.w	r2, r2, #1
 800196c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	68b9      	ldr	r1, [r7, #8]
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 f9eb 	bl	8001d50 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	2b00      	cmp	r3, #0
 8001980:	d008      	beq.n	8001994 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 020e 	orr.w	r2, r2, #14
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	e00f      	b.n	80019b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0204 	bic.w	r2, r2, #4
 80019a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 020a 	orr.w	r2, r2, #10
 80019b2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0201 	orr.w	r2, r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	e005      	b.n	80019d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80019ce:	2302      	movs	r3, #2
 80019d0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80019d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d008      	beq.n	8001a06 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2204      	movs	r2, #4
 80019f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e020      	b.n	8001a48 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 020e 	bic.w	r2, r2, #14
 8001a14:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2e:	2101      	movs	r1, #1
 8001a30:	fa01 f202 	lsl.w	r2, r1, r2
 8001a34:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
	...

08001a54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d005      	beq.n	8001a78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	e051      	b.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 020e 	bic.w	r2, r2, #14
 8001a86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a22      	ldr	r2, [pc, #136]	; (8001b28 <HAL_DMA_Abort_IT+0xd4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d029      	beq.n	8001af6 <HAL_DMA_Abort_IT+0xa2>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a21      	ldr	r2, [pc, #132]	; (8001b2c <HAL_DMA_Abort_IT+0xd8>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d022      	beq.n	8001af2 <HAL_DMA_Abort_IT+0x9e>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <HAL_DMA_Abort_IT+0xdc>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d01a      	beq.n	8001aec <HAL_DMA_Abort_IT+0x98>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a1e      	ldr	r2, [pc, #120]	; (8001b34 <HAL_DMA_Abort_IT+0xe0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d012      	beq.n	8001ae6 <HAL_DMA_Abort_IT+0x92>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1c      	ldr	r2, [pc, #112]	; (8001b38 <HAL_DMA_Abort_IT+0xe4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00a      	beq.n	8001ae0 <HAL_DMA_Abort_IT+0x8c>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <HAL_DMA_Abort_IT+0xe8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d102      	bne.n	8001ada <HAL_DMA_Abort_IT+0x86>
 8001ad4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ad8:	e00e      	b.n	8001af8 <HAL_DMA_Abort_IT+0xa4>
 8001ada:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ade:	e00b      	b.n	8001af8 <HAL_DMA_Abort_IT+0xa4>
 8001ae0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ae4:	e008      	b.n	8001af8 <HAL_DMA_Abort_IT+0xa4>
 8001ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aea:	e005      	b.n	8001af8 <HAL_DMA_Abort_IT+0xa4>
 8001aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001af0:	e002      	b.n	8001af8 <HAL_DMA_Abort_IT+0xa4>
 8001af2:	2310      	movs	r3, #16
 8001af4:	e000      	b.n	8001af8 <HAL_DMA_Abort_IT+0xa4>
 8001af6:	2301      	movs	r3, #1
 8001af8:	4a11      	ldr	r2, [pc, #68]	; (8001b40 <HAL_DMA_Abort_IT+0xec>)
 8001afa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	4798      	blx	r3
    } 
  }
  return status;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40020008 	.word	0x40020008
 8001b2c:	4002001c 	.word	0x4002001c
 8001b30:	40020030 	.word	0x40020030
 8001b34:	40020044 	.word	0x40020044
 8001b38:	40020058 	.word	0x40020058
 8001b3c:	4002006c 	.word	0x4002006c
 8001b40:	40020000 	.word	0x40020000

08001b44 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	2204      	movs	r2, #4
 8001b62:	409a      	lsls	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d04f      	beq.n	8001c0c <HAL_DMA_IRQHandler+0xc8>
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d04a      	beq.n	8001c0c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d107      	bne.n	8001b94 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0204 	bic.w	r2, r2, #4
 8001b92:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a66      	ldr	r2, [pc, #408]	; (8001d34 <HAL_DMA_IRQHandler+0x1f0>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d029      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0xae>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a65      	ldr	r2, [pc, #404]	; (8001d38 <HAL_DMA_IRQHandler+0x1f4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d022      	beq.n	8001bee <HAL_DMA_IRQHandler+0xaa>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a63      	ldr	r2, [pc, #396]	; (8001d3c <HAL_DMA_IRQHandler+0x1f8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d01a      	beq.n	8001be8 <HAL_DMA_IRQHandler+0xa4>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a62      	ldr	r2, [pc, #392]	; (8001d40 <HAL_DMA_IRQHandler+0x1fc>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d012      	beq.n	8001be2 <HAL_DMA_IRQHandler+0x9e>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a60      	ldr	r2, [pc, #384]	; (8001d44 <HAL_DMA_IRQHandler+0x200>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00a      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x98>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a5f      	ldr	r2, [pc, #380]	; (8001d48 <HAL_DMA_IRQHandler+0x204>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d102      	bne.n	8001bd6 <HAL_DMA_IRQHandler+0x92>
 8001bd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bd4:	e00e      	b.n	8001bf4 <HAL_DMA_IRQHandler+0xb0>
 8001bd6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001bda:	e00b      	b.n	8001bf4 <HAL_DMA_IRQHandler+0xb0>
 8001bdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001be0:	e008      	b.n	8001bf4 <HAL_DMA_IRQHandler+0xb0>
 8001be2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001be6:	e005      	b.n	8001bf4 <HAL_DMA_IRQHandler+0xb0>
 8001be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bec:	e002      	b.n	8001bf4 <HAL_DMA_IRQHandler+0xb0>
 8001bee:	2340      	movs	r3, #64	; 0x40
 8001bf0:	e000      	b.n	8001bf4 <HAL_DMA_IRQHandler+0xb0>
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	4a55      	ldr	r2, [pc, #340]	; (8001d4c <HAL_DMA_IRQHandler+0x208>)
 8001bf6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 8094 	beq.w	8001d2a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c0a:	e08e      	b.n	8001d2a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	2202      	movs	r2, #2
 8001c12:	409a      	lsls	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d056      	beq.n	8001cca <HAL_DMA_IRQHandler+0x186>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d051      	beq.n	8001cca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0320 	and.w	r3, r3, #32
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10b      	bne.n	8001c4c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 020a 	bic.w	r2, r2, #10
 8001c42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a38      	ldr	r2, [pc, #224]	; (8001d34 <HAL_DMA_IRQHandler+0x1f0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d029      	beq.n	8001caa <HAL_DMA_IRQHandler+0x166>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a37      	ldr	r2, [pc, #220]	; (8001d38 <HAL_DMA_IRQHandler+0x1f4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d022      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x162>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a35      	ldr	r2, [pc, #212]	; (8001d3c <HAL_DMA_IRQHandler+0x1f8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01a      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x15c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a34      	ldr	r2, [pc, #208]	; (8001d40 <HAL_DMA_IRQHandler+0x1fc>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d012      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x156>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a32      	ldr	r2, [pc, #200]	; (8001d44 <HAL_DMA_IRQHandler+0x200>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00a      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x150>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a31      	ldr	r2, [pc, #196]	; (8001d48 <HAL_DMA_IRQHandler+0x204>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d102      	bne.n	8001c8e <HAL_DMA_IRQHandler+0x14a>
 8001c88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c8c:	e00e      	b.n	8001cac <HAL_DMA_IRQHandler+0x168>
 8001c8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c92:	e00b      	b.n	8001cac <HAL_DMA_IRQHandler+0x168>
 8001c94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c98:	e008      	b.n	8001cac <HAL_DMA_IRQHandler+0x168>
 8001c9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c9e:	e005      	b.n	8001cac <HAL_DMA_IRQHandler+0x168>
 8001ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca4:	e002      	b.n	8001cac <HAL_DMA_IRQHandler+0x168>
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	e000      	b.n	8001cac <HAL_DMA_IRQHandler+0x168>
 8001caa:	2302      	movs	r3, #2
 8001cac:	4a27      	ldr	r2, [pc, #156]	; (8001d4c <HAL_DMA_IRQHandler+0x208>)
 8001cae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d034      	beq.n	8001d2a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001cc8:	e02f      	b.n	8001d2a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	2208      	movs	r2, #8
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d028      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x1e8>
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d023      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 020e 	bic.w	r2, r2, #14
 8001cf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001d02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d004      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	4798      	blx	r3
    }
  }
  return;
 8001d2a:	bf00      	nop
 8001d2c:	bf00      	nop
}
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40020008 	.word	0x40020008
 8001d38:	4002001c 	.word	0x4002001c
 8001d3c:	40020030 	.word	0x40020030
 8001d40:	40020044 	.word	0x40020044
 8001d44:	40020058 	.word	0x40020058
 8001d48:	4002006c 	.word	0x4002006c
 8001d4c:	40020000 	.word	0x40020000

08001d50 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d66:	2101      	movs	r1, #1
 8001d68:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d108      	bne.n	8001d90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d8e:	e007      	b.n	8001da0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	60da      	str	r2, [r3, #12]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
	...

08001dac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b08b      	sub	sp, #44	; 0x2c
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dbe:	e169      	b.n	8002094 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	f040 8158 	bne.w	800208e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4a9a      	ldr	r2, [pc, #616]	; (800204c <HAL_GPIO_Init+0x2a0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d05e      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001de8:	4a98      	ldr	r2, [pc, #608]	; (800204c <HAL_GPIO_Init+0x2a0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d875      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001dee:	4a98      	ldr	r2, [pc, #608]	; (8002050 <HAL_GPIO_Init+0x2a4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d058      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001df4:	4a96      	ldr	r2, [pc, #600]	; (8002050 <HAL_GPIO_Init+0x2a4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d86f      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001dfa:	4a96      	ldr	r2, [pc, #600]	; (8002054 <HAL_GPIO_Init+0x2a8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d052      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001e00:	4a94      	ldr	r2, [pc, #592]	; (8002054 <HAL_GPIO_Init+0x2a8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d869      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001e06:	4a94      	ldr	r2, [pc, #592]	; (8002058 <HAL_GPIO_Init+0x2ac>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d04c      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001e0c:	4a92      	ldr	r2, [pc, #584]	; (8002058 <HAL_GPIO_Init+0x2ac>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d863      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001e12:	4a92      	ldr	r2, [pc, #584]	; (800205c <HAL_GPIO_Init+0x2b0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d046      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
 8001e18:	4a90      	ldr	r2, [pc, #576]	; (800205c <HAL_GPIO_Init+0x2b0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d85d      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001e1e:	2b12      	cmp	r3, #18
 8001e20:	d82a      	bhi.n	8001e78 <HAL_GPIO_Init+0xcc>
 8001e22:	2b12      	cmp	r3, #18
 8001e24:	d859      	bhi.n	8001eda <HAL_GPIO_Init+0x12e>
 8001e26:	a201      	add	r2, pc, #4	; (adr r2, 8001e2c <HAL_GPIO_Init+0x80>)
 8001e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2c:	08001ea7 	.word	0x08001ea7
 8001e30:	08001e81 	.word	0x08001e81
 8001e34:	08001e93 	.word	0x08001e93
 8001e38:	08001ed5 	.word	0x08001ed5
 8001e3c:	08001edb 	.word	0x08001edb
 8001e40:	08001edb 	.word	0x08001edb
 8001e44:	08001edb 	.word	0x08001edb
 8001e48:	08001edb 	.word	0x08001edb
 8001e4c:	08001edb 	.word	0x08001edb
 8001e50:	08001edb 	.word	0x08001edb
 8001e54:	08001edb 	.word	0x08001edb
 8001e58:	08001edb 	.word	0x08001edb
 8001e5c:	08001edb 	.word	0x08001edb
 8001e60:	08001edb 	.word	0x08001edb
 8001e64:	08001edb 	.word	0x08001edb
 8001e68:	08001edb 	.word	0x08001edb
 8001e6c:	08001edb 	.word	0x08001edb
 8001e70:	08001e89 	.word	0x08001e89
 8001e74:	08001e9d 	.word	0x08001e9d
 8001e78:	4a79      	ldr	r2, [pc, #484]	; (8002060 <HAL_GPIO_Init+0x2b4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e7e:	e02c      	b.n	8001eda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	623b      	str	r3, [r7, #32]
          break;
 8001e86:	e029      	b.n	8001edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	623b      	str	r3, [r7, #32]
          break;
 8001e90:	e024      	b.n	8001edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	3308      	adds	r3, #8
 8001e98:	623b      	str	r3, [r7, #32]
          break;
 8001e9a:	e01f      	b.n	8001edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	330c      	adds	r3, #12
 8001ea2:	623b      	str	r3, [r7, #32]
          break;
 8001ea4:	e01a      	b.n	8001edc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d102      	bne.n	8001eb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eae:	2304      	movs	r3, #4
 8001eb0:	623b      	str	r3, [r7, #32]
          break;
 8001eb2:	e013      	b.n	8001edc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d105      	bne.n	8001ec8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ebc:	2308      	movs	r3, #8
 8001ebe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	611a      	str	r2, [r3, #16]
          break;
 8001ec6:	e009      	b.n	8001edc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec8:	2308      	movs	r3, #8
 8001eca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	615a      	str	r2, [r3, #20]
          break;
 8001ed2:	e003      	b.n	8001edc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	623b      	str	r3, [r7, #32]
          break;
 8001ed8:	e000      	b.n	8001edc <HAL_GPIO_Init+0x130>
          break;
 8001eda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2bff      	cmp	r3, #255	; 0xff
 8001ee0:	d801      	bhi.n	8001ee6 <HAL_GPIO_Init+0x13a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	e001      	b.n	8001eea <HAL_GPIO_Init+0x13e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2bff      	cmp	r3, #255	; 0xff
 8001ef0:	d802      	bhi.n	8001ef8 <HAL_GPIO_Init+0x14c>
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	e002      	b.n	8001efe <HAL_GPIO_Init+0x152>
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	3b08      	subs	r3, #8
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	210f      	movs	r1, #15
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	401a      	ands	r2, r3
 8001f10:	6a39      	ldr	r1, [r7, #32]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	fa01 f303 	lsl.w	r3, r1, r3
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80b1 	beq.w	800208e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f2c:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	4a4c      	ldr	r2, [pc, #304]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6193      	str	r3, [r2, #24]
 8001f38:	4b4a      	ldr	r3, [pc, #296]	; (8002064 <HAL_GPIO_Init+0x2b8>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f44:	4a48      	ldr	r2, [pc, #288]	; (8002068 <HAL_GPIO_Init+0x2bc>)
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4013      	ands	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a40      	ldr	r2, [pc, #256]	; (800206c <HAL_GPIO_Init+0x2c0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d013      	beq.n	8001f98 <HAL_GPIO_Init+0x1ec>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a3f      	ldr	r2, [pc, #252]	; (8002070 <HAL_GPIO_Init+0x2c4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d00d      	beq.n	8001f94 <HAL_GPIO_Init+0x1e8>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a3e      	ldr	r2, [pc, #248]	; (8002074 <HAL_GPIO_Init+0x2c8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d007      	beq.n	8001f90 <HAL_GPIO_Init+0x1e4>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a3d      	ldr	r2, [pc, #244]	; (8002078 <HAL_GPIO_Init+0x2cc>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d101      	bne.n	8001f8c <HAL_GPIO_Init+0x1e0>
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e006      	b.n	8001f9a <HAL_GPIO_Init+0x1ee>
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	e004      	b.n	8001f9a <HAL_GPIO_Init+0x1ee>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e002      	b.n	8001f9a <HAL_GPIO_Init+0x1ee>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_GPIO_Init+0x1ee>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9c:	f002 0203 	and.w	r2, r2, #3
 8001fa0:	0092      	lsls	r2, r2, #2
 8001fa2:	4093      	lsls	r3, r2
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001faa:	492f      	ldr	r1, [pc, #188]	; (8002068 <HAL_GPIO_Init+0x2bc>)
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	089b      	lsrs	r3, r3, #2
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fc4:	4b2d      	ldr	r3, [pc, #180]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	492c      	ldr	r1, [pc, #176]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	608b      	str	r3, [r1, #8]
 8001fd0:	e006      	b.n	8001fe0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	4928      	ldr	r1, [pc, #160]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d006      	beq.n	8001ffa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fec:	4b23      	ldr	r3, [pc, #140]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	4922      	ldr	r1, [pc, #136]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60cb      	str	r3, [r1, #12]
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	43db      	mvns	r3, r3
 8002002:	491e      	ldr	r1, [pc, #120]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8002004:	4013      	ands	r3, r2
 8002006:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002014:	4b19      	ldr	r3, [pc, #100]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	4918      	ldr	r1, [pc, #96]	; (800207c <HAL_GPIO_Init+0x2d0>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002022:	4b16      	ldr	r3, [pc, #88]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	43db      	mvns	r3, r3
 800202a:	4914      	ldr	r1, [pc, #80]	; (800207c <HAL_GPIO_Init+0x2d0>)
 800202c:	4013      	ands	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d021      	beq.n	8002080 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <HAL_GPIO_Init+0x2d0>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	490e      	ldr	r1, [pc, #56]	; (800207c <HAL_GPIO_Init+0x2d0>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]
 8002048:	e021      	b.n	800208e <HAL_GPIO_Init+0x2e2>
 800204a:	bf00      	nop
 800204c:	10320000 	.word	0x10320000
 8002050:	10310000 	.word	0x10310000
 8002054:	10220000 	.word	0x10220000
 8002058:	10210000 	.word	0x10210000
 800205c:	10120000 	.word	0x10120000
 8002060:	10110000 	.word	0x10110000
 8002064:	40021000 	.word	0x40021000
 8002068:	40010000 	.word	0x40010000
 800206c:	40010800 	.word	0x40010800
 8002070:	40010c00 	.word	0x40010c00
 8002074:	40011000 	.word	0x40011000
 8002078:	40011400 	.word	0x40011400
 800207c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_GPIO_Init+0x304>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	43db      	mvns	r3, r3
 8002088:	4909      	ldr	r1, [pc, #36]	; (80020b0 <HAL_GPIO_Init+0x304>)
 800208a:	4013      	ands	r3, r2
 800208c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	3301      	adds	r3, #1
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	fa22 f303 	lsr.w	r3, r2, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f47f ae8e 	bne.w	8001dc0 <HAL_GPIO_Init+0x14>
  }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	372c      	adds	r7, #44	; 0x2c
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	40010400 	.word	0x40010400

080020b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	887b      	ldrh	r3, [r7, #2]
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
 80020d0:	e001      	b.n	80020d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	807b      	strh	r3, [r7, #2]
 80020ee:	4613      	mov	r3, r2
 80020f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020f2:	787b      	ldrb	r3, [r7, #1]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f8:	887a      	ldrh	r2, [r7, #2]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020fe:	e003      	b.n	8002108 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002100:	887b      	ldrh	r3, [r7, #2]
 8002102:	041a      	lsls	r2, r3, #16
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	611a      	str	r2, [r3, #16]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
	...

08002114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e272      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 8087 	beq.w	8002242 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002134:	4b92      	ldr	r3, [pc, #584]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b04      	cmp	r3, #4
 800213e:	d00c      	beq.n	800215a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002140:	4b8f      	ldr	r3, [pc, #572]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b08      	cmp	r3, #8
 800214a:	d112      	bne.n	8002172 <HAL_RCC_OscConfig+0x5e>
 800214c:	4b8c      	ldr	r3, [pc, #560]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002158:	d10b      	bne.n	8002172 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215a:	4b89      	ldr	r3, [pc, #548]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d06c      	beq.n	8002240 <HAL_RCC_OscConfig+0x12c>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d168      	bne.n	8002240 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e24c      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x76>
 800217c:	4b80      	ldr	r3, [pc, #512]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a7f      	ldr	r2, [pc, #508]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	e02e      	b.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x98>
 8002192:	4b7b      	ldr	r3, [pc, #492]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a7a      	ldr	r2, [pc, #488]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b78      	ldr	r3, [pc, #480]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a77      	ldr	r2, [pc, #476]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e01d      	b.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0xbc>
 80021b6:	4b72      	ldr	r3, [pc, #456]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a71      	ldr	r2, [pc, #452]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b6f      	ldr	r3, [pc, #444]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a6e      	ldr	r2, [pc, #440]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e00b      	b.n	80021e8 <HAL_RCC_OscConfig+0xd4>
 80021d0:	4b6b      	ldr	r3, [pc, #428]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a6a      	ldr	r2, [pc, #424]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b68      	ldr	r3, [pc, #416]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a67      	ldr	r2, [pc, #412]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7ff fa22 	bl	8001638 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7ff fa1e 	bl	8001638 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e200      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	4b5d      	ldr	r3, [pc, #372]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0xe4>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff fa0e 	bl	8001638 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7ff fa0a 	bl	8001638 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1ec      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002232:	4b53      	ldr	r3, [pc, #332]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x10c>
 800223e:	e000      	b.n	8002242 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d063      	beq.n	8002316 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800224e:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800225a:	4b49      	ldr	r3, [pc, #292]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b08      	cmp	r3, #8
 8002264:	d11c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x18c>
 8002266:	4b46      	ldr	r3, [pc, #280]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d116      	bne.n	80022a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002272:	4b43      	ldr	r3, [pc, #268]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_RCC_OscConfig+0x176>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d001      	beq.n	800228a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e1c0      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4939      	ldr	r1, [pc, #228]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229e:	e03a      	b.n	8002316 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d020      	beq.n	80022ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a8:	4b36      	ldr	r3, [pc, #216]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ae:	f7ff f9c3 	bl	8001638 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b6:	f7ff f9bf 	bl	8001638 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e1a1      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c8:	4b2d      	ldr	r3, [pc, #180]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d4:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4927      	ldr	r1, [pc, #156]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	600b      	str	r3, [r1, #0]
 80022e8:	e015      	b.n	8002316 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <HAL_RCC_OscConfig+0x270>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7ff f9a2 	bl	8001638 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f8:	f7ff f99e 	bl	8001638 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e180      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d03a      	beq.n	8002398 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d019      	beq.n	800235e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232a:	4b17      	ldr	r3, [pc, #92]	; (8002388 <HAL_RCC_OscConfig+0x274>)
 800232c:	2201      	movs	r2, #1
 800232e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002330:	f7ff f982 	bl	8001638 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002338:	f7ff f97e 	bl	8001638 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e160      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234a:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <HAL_RCC_OscConfig+0x26c>)
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002356:	2001      	movs	r0, #1
 8002358:	f000 face 	bl	80028f8 <RCC_Delay>
 800235c:	e01c      	b.n	8002398 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <HAL_RCC_OscConfig+0x274>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002364:	f7ff f968 	bl	8001638 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236a:	e00f      	b.n	800238c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236c:	f7ff f964 	bl	8001638 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d908      	bls.n	800238c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e146      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	42420000 	.word	0x42420000
 8002388:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238c:	4b92      	ldr	r3, [pc, #584]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1e9      	bne.n	800236c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80a6 	beq.w	80024f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a6:	2300      	movs	r3, #0
 80023a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023aa:	4b8b      	ldr	r3, [pc, #556]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10d      	bne.n	80023d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	4b88      	ldr	r3, [pc, #544]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4a87      	ldr	r2, [pc, #540]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c0:	61d3      	str	r3, [r2, #28]
 80023c2:	4b85      	ldr	r3, [pc, #532]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ce:	2301      	movs	r3, #1
 80023d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d2:	4b82      	ldr	r3, [pc, #520]	; (80025dc <HAL_RCC_OscConfig+0x4c8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d118      	bne.n	8002410 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023de:	4b7f      	ldr	r3, [pc, #508]	; (80025dc <HAL_RCC_OscConfig+0x4c8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a7e      	ldr	r2, [pc, #504]	; (80025dc <HAL_RCC_OscConfig+0x4c8>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ea:	f7ff f925 	bl	8001638 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f2:	f7ff f921 	bl	8001638 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b64      	cmp	r3, #100	; 0x64
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e103      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	4b75      	ldr	r3, [pc, #468]	; (80025dc <HAL_RCC_OscConfig+0x4c8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x312>
 8002418:	4b6f      	ldr	r3, [pc, #444]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a6e      	ldr	r2, [pc, #440]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	e02d      	b.n	8002482 <HAL_RCC_OscConfig+0x36e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0x334>
 800242e:	4b6a      	ldr	r3, [pc, #424]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4a69      	ldr	r2, [pc, #420]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	6213      	str	r3, [r2, #32]
 800243a:	4b67      	ldr	r3, [pc, #412]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4a66      	ldr	r2, [pc, #408]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	f023 0304 	bic.w	r3, r3, #4
 8002444:	6213      	str	r3, [r2, #32]
 8002446:	e01c      	b.n	8002482 <HAL_RCC_OscConfig+0x36e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b05      	cmp	r3, #5
 800244e:	d10c      	bne.n	800246a <HAL_RCC_OscConfig+0x356>
 8002450:	4b61      	ldr	r3, [pc, #388]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	4a60      	ldr	r2, [pc, #384]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	6213      	str	r3, [r2, #32]
 800245c:	4b5e      	ldr	r3, [pc, #376]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	4a5d      	ldr	r2, [pc, #372]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6213      	str	r3, [r2, #32]
 8002468:	e00b      	b.n	8002482 <HAL_RCC_OscConfig+0x36e>
 800246a:	4b5b      	ldr	r3, [pc, #364]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	4a5a      	ldr	r2, [pc, #360]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002470:	f023 0301 	bic.w	r3, r3, #1
 8002474:	6213      	str	r3, [r2, #32]
 8002476:	4b58      	ldr	r3, [pc, #352]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	4a57      	ldr	r2, [pc, #348]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	f023 0304 	bic.w	r3, r3, #4
 8002480:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d015      	beq.n	80024b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7ff f8d5 	bl	8001638 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7ff f8d1 	bl	8001638 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e0b1      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	4b4b      	ldr	r3, [pc, #300]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ee      	beq.n	8002492 <HAL_RCC_OscConfig+0x37e>
 80024b4:	e014      	b.n	80024e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b6:	f7ff f8bf 	bl	8001638 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7ff f8bb 	bl	8001638 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e09b      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	4b40      	ldr	r3, [pc, #256]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1ee      	bne.n	80024be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d105      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e6:	4b3c      	ldr	r3, [pc, #240]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4a3b      	ldr	r2, [pc, #236]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8087 	beq.w	800260a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024fc:	4b36      	ldr	r3, [pc, #216]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b08      	cmp	r3, #8
 8002506:	d061      	beq.n	80025cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d146      	bne.n	800259e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002510:	4b33      	ldr	r3, [pc, #204]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7ff f88f 	bl	8001638 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251e:	f7ff f88b 	bl	8001638 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e06d      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002530:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f0      	bne.n	800251e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002544:	d108      	bne.n	8002558 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002546:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	4921      	ldr	r1, [pc, #132]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002558:	4b1f      	ldr	r3, [pc, #124]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a19      	ldr	r1, [r3, #32]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	430b      	orrs	r3, r1
 800256a:	491b      	ldr	r1, [pc, #108]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002576:	f7ff f85f 	bl	8001638 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257e:	f7ff f85b 	bl	8001638 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e03d      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002590:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x46a>
 800259c:	e035      	b.n	800260a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7ff f848 	bl	8001638 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ac:	f7ff f844 	bl	8001638 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e026      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x498>
 80025ca:	e01e      	b.n	800260a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e019      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40007000 	.word	0x40007000
 80025e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_OscConfig+0x500>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d001      	beq.n	800260a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000

08002618 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0d0      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800262c:	4b6a      	ldr	r3, [pc, #424]	; (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d910      	bls.n	800265c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b67      	ldr	r3, [pc, #412]	; (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 0207 	bic.w	r2, r3, #7
 8002642:	4965      	ldr	r1, [pc, #404]	; (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b63      	ldr	r3, [pc, #396]	; (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0b8      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d020      	beq.n	80026aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002674:	4b59      	ldr	r3, [pc, #356]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a58      	ldr	r2, [pc, #352]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800267e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800268c:	4b53      	ldr	r3, [pc, #332]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4a52      	ldr	r2, [pc, #328]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002696:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002698:	4b50      	ldr	r3, [pc, #320]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	494d      	ldr	r1, [pc, #308]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d040      	beq.n	8002738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d115      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e07f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d6:	4b41      	ldr	r3, [pc, #260]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e073      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e6:	4b3d      	ldr	r3, [pc, #244]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e06b      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f6:	4b39      	ldr	r3, [pc, #228]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f023 0203 	bic.w	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4936      	ldr	r1, [pc, #216]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002708:	f7fe ff96 	bl	8001638 <HAL_GetTick>
 800270c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270e:	e00a      	b.n	8002726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002710:	f7fe ff92 	bl	8001638 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	; 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e053      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	4b2d      	ldr	r3, [pc, #180]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 020c 	and.w	r2, r3, #12
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	429a      	cmp	r2, r3
 8002736:	d1eb      	bne.n	8002710 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002738:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d210      	bcs.n	8002768 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002746:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 0207 	bic.w	r2, r3, #7
 800274e:	4922      	ldr	r1, [pc, #136]	; (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e032      	b.n	80027ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002774:	4b19      	ldr	r3, [pc, #100]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4916      	ldr	r1, [pc, #88]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	490e      	ldr	r1, [pc, #56]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027a6:	f000 f821 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 80027aa:	4602      	mov	r2, r0
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	490a      	ldr	r1, [pc, #40]	; (80027e0 <HAL_RCC_ClockConfig+0x1c8>)
 80027b8:	5ccb      	ldrb	r3, [r1, r3]
 80027ba:	fa22 f303 	lsr.w	r3, r2, r3
 80027be:	4a09      	ldr	r2, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x1cc>)
 80027c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_RCC_ClockConfig+0x1d0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fef4 	bl	80015b4 <HAL_InitTick>

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40022000 	.word	0x40022000
 80027dc:	40021000 	.word	0x40021000
 80027e0:	08004628 	.word	0x08004628
 80027e4:	20000004 	.word	0x20000004
 80027e8:	20000008 	.word	0x20000008

080027ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002806:	4b1e      	ldr	r3, [pc, #120]	; (8002880 <HAL_RCC_GetSysClockFreq+0x94>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d002      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x30>
 8002816:	2b08      	cmp	r3, #8
 8002818:	d003      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0x36>
 800281a:	e027      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_RCC_GetSysClockFreq+0x98>)
 800281e:	613b      	str	r3, [r7, #16]
      break;
 8002820:	e027      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	0c9b      	lsrs	r3, r3, #18
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	4a17      	ldr	r2, [pc, #92]	; (8002888 <HAL_RCC_GetSysClockFreq+0x9c>)
 800282c:	5cd3      	ldrb	r3, [r2, r3]
 800282e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d010      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800283a:	4b11      	ldr	r3, [pc, #68]	; (8002880 <HAL_RCC_GetSysClockFreq+0x94>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	0c5b      	lsrs	r3, r3, #17
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	4a11      	ldr	r2, [pc, #68]	; (800288c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <HAL_RCC_GetSysClockFreq+0x98>)
 800284e:	fb03 f202 	mul.w	r2, r3, r2
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	e004      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a0c      	ldr	r2, [pc, #48]	; (8002890 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	613b      	str	r3, [r7, #16]
      break;
 800286a:	e002      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_RCC_GetSysClockFreq+0x98>)
 800286e:	613b      	str	r3, [r7, #16]
      break;
 8002870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002872:	693b      	ldr	r3, [r7, #16]
}
 8002874:	4618      	mov	r0, r3
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	007a1200 	.word	0x007a1200
 8002888:	08004640 	.word	0x08004640
 800288c:	08004650 	.word	0x08004650
 8002890:	003d0900 	.word	0x003d0900

08002894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002898:	4b02      	ldr	r3, [pc, #8]	; (80028a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	20000004 	.word	0x20000004

080028a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028ac:	f7ff fff2 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	4903      	ldr	r1, [pc, #12]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028be:	5ccb      	ldrb	r3, [r1, r3]
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	08004638 	.word	0x08004638

080028d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028d4:	f7ff ffde 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	0adb      	lsrs	r3, r3, #11
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	4903      	ldr	r1, [pc, #12]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000
 80028f4:	08004638 	.word	0x08004638

080028f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <RCC_Delay+0x34>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <RCC_Delay+0x38>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	0a5b      	lsrs	r3, r3, #9
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	fb02 f303 	mul.w	r3, r2, r3
 8002912:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002914:	bf00      	nop
  }
  while (Delay --);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1e5a      	subs	r2, r3, #1
 800291a:	60fa      	str	r2, [r7, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f9      	bne.n	8002914 <RCC_Delay+0x1c>
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	20000004 	.word	0x20000004
 8002930:	10624dd3 	.word	0x10624dd3

08002934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e041      	b.n	80029ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fe fb76 	bl	800104c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3304      	adds	r3, #4
 8002970:	4619      	mov	r1, r3
 8002972:	4610      	mov	r0, r2
 8002974:	f000 fc4e 	bl	8003214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d001      	beq.n	80029ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e03a      	b.n	8002a62 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <HAL_TIM_Base_Start_IT+0x98>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00e      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x58>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a16:	d009      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x58>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a14      	ldr	r2, [pc, #80]	; (8002a70 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d004      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x58>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d111      	bne.n	8002a50 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d010      	beq.n	8002a60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0201 	orr.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4e:	e007      	b.n	8002a60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr
 8002a6c:	40012c00 	.word	0x40012c00
 8002a70:	40000400 	.word	0x40000400
 8002a74:	40000800 	.word	0x40000800

08002a78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d109      	bne.n	8002a9c <HAL_TIM_PWM_Start+0x24>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	bf14      	ite	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	2300      	moveq	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	e022      	b.n	8002ae2 <HAL_TIM_PWM_Start+0x6a>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d109      	bne.n	8002ab6 <HAL_TIM_PWM_Start+0x3e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	bf14      	ite	ne
 8002aae:	2301      	movne	r3, #1
 8002ab0:	2300      	moveq	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	e015      	b.n	8002ae2 <HAL_TIM_PWM_Start+0x6a>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d109      	bne.n	8002ad0 <HAL_TIM_PWM_Start+0x58>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	bf14      	ite	ne
 8002ac8:	2301      	movne	r3, #1
 8002aca:	2300      	moveq	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e008      	b.n	8002ae2 <HAL_TIM_PWM_Start+0x6a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	bf14      	ite	ne
 8002adc:	2301      	movne	r3, #1
 8002ade:	2300      	moveq	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e05e      	b.n	8002ba8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d104      	bne.n	8002afa <HAL_TIM_PWM_Start+0x82>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af8:	e013      	b.n	8002b22 <HAL_TIM_PWM_Start+0xaa>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d104      	bne.n	8002b0a <HAL_TIM_PWM_Start+0x92>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b08:	e00b      	b.n	8002b22 <HAL_TIM_PWM_Start+0xaa>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d104      	bne.n	8002b1a <HAL_TIM_PWM_Start+0xa2>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b18:	e003      	b.n	8002b22 <HAL_TIM_PWM_Start+0xaa>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2201      	movs	r2, #1
 8002b28:	6839      	ldr	r1, [r7, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fc6a 	bl	8003404 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1e      	ldr	r2, [pc, #120]	; (8002bb0 <HAL_TIM_PWM_Start+0x138>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d107      	bne.n	8002b4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <HAL_TIM_PWM_Start+0x138>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d00e      	beq.n	8002b72 <HAL_TIM_PWM_Start+0xfa>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5c:	d009      	beq.n	8002b72 <HAL_TIM_PWM_Start+0xfa>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a14      	ldr	r2, [pc, #80]	; (8002bb4 <HAL_TIM_PWM_Start+0x13c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d004      	beq.n	8002b72 <HAL_TIM_PWM_Start+0xfa>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <HAL_TIM_PWM_Start+0x140>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d111      	bne.n	8002b96 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b06      	cmp	r3, #6
 8002b82:	d010      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b94:	e007      	b.n	8002ba6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0201 	orr.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40012c00 	.word	0x40012c00
 8002bb4:	40000400 	.word	0x40000400
 8002bb8:	40000800 	.word	0x40000800

08002bbc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e093      	b.n	8002cf8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d106      	bne.n	8002bea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7fe fa6b 	bl	80010c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2202      	movs	r2, #2
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c00:	f023 0307 	bic.w	r3, r3, #7
 8002c04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4610      	mov	r0, r2
 8002c12:	f000 faff 	bl	8003214 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3e:	f023 0303 	bic.w	r3, r3, #3
 8002c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c5c:	f023 030c 	bic.w	r3, r3, #12
 8002c60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	011a      	lsls	r2, r3, #4
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	031b      	lsls	r3, r3, #12
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002c9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d110      	bne.n	8002d52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d102      	bne.n	8002d3c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d36:	7b7b      	ldrb	r3, [r7, #13]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d001      	beq.n	8002d40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e069      	b.n	8002e14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d50:	e031      	b.n	8002db6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d110      	bne.n	8002d7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d58:	7bbb      	ldrb	r3, [r7, #14]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d102      	bne.n	8002d64 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d5e:	7b3b      	ldrb	r3, [r7, #12]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d001      	beq.n	8002d68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e055      	b.n	8002e14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d78:	e01d      	b.n	8002db6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d108      	bne.n	8002d92 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d80:	7bbb      	ldrb	r3, [r7, #14]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d105      	bne.n	8002d92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d86:	7b7b      	ldrb	r3, [r7, #13]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d102      	bne.n	8002d92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d8c:	7b3b      	ldrb	r3, [r7, #12]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d001      	beq.n	8002d96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e03e      	b.n	8002e14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2202      	movs	r2, #2
 8002daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_TIM_Encoder_Start+0xc4>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d008      	beq.n	8002dd4 <HAL_TIM_Encoder_Start+0xd4>
 8002dc2:	e00f      	b.n	8002de4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 fb19 	bl	8003404 <TIM_CCxChannelCmd>
      break;
 8002dd2:	e016      	b.n	8002e02 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	2104      	movs	r1, #4
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fb11 	bl	8003404 <TIM_CCxChannelCmd>
      break;
 8002de2:	e00e      	b.n	8002e02 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2201      	movs	r2, #1
 8002dea:	2100      	movs	r1, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fb09 	bl	8003404 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2201      	movs	r2, #1
 8002df8:	2104      	movs	r1, #4
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fb02 	bl	8003404 <TIM_CCxChannelCmd>
      break;
 8002e00:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0201 	orr.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d122      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d11b      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0202 	mvn.w	r2, #2
 8002e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f9bd 	bl	80031de <HAL_TIM_IC_CaptureCallback>
 8002e64:	e005      	b.n	8002e72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f9b0 	bl	80031cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f9bf 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d122      	bne.n	8002ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d11b      	bne.n	8002ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0204 	mvn.w	r2, #4
 8002e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f993 	bl	80031de <HAL_TIM_IC_CaptureCallback>
 8002eb8:	e005      	b.n	8002ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f986 	bl	80031cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f995 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d122      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d11b      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0208 	mvn.w	r2, #8
 8002ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f969 	bl	80031de <HAL_TIM_IC_CaptureCallback>
 8002f0c:	e005      	b.n	8002f1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f95c 	bl	80031cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f96b 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b10      	cmp	r3, #16
 8002f2c:	d122      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b10      	cmp	r3, #16
 8002f3a:	d11b      	bne.n	8002f74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0210 	mvn.w	r2, #16
 8002f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2208      	movs	r2, #8
 8002f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f93f 	bl	80031de <HAL_TIM_IC_CaptureCallback>
 8002f60:	e005      	b.n	8002f6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f932 	bl	80031cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f941 	bl	80031f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d10e      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d107      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0201 	mvn.w	r2, #1
 8002f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f90d 	bl	80031ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002faa:	2b80      	cmp	r3, #128	; 0x80
 8002fac:	d10e      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb8:	2b80      	cmp	r3, #128	; 0x80
 8002fba:	d107      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 faa7 	bl	800351a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd6:	2b40      	cmp	r3, #64	; 0x40
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d107      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f905 	bl	8003202 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b20      	cmp	r3, #32
 8003004:	d10e      	bne.n	8003024 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b20      	cmp	r3, #32
 8003012:	d107      	bne.n	8003024 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0220 	mvn.w	r2, #32
 800301c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fa72 	bl	8003508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_TIM_ConfigClockSource+0x1c>
 8003044:	2302      	movs	r3, #2
 8003046:	e0b4      	b.n	80031b2 <HAL_TIM_ConfigClockSource+0x186>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800306e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003080:	d03e      	beq.n	8003100 <HAL_TIM_ConfigClockSource+0xd4>
 8003082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003086:	f200 8087 	bhi.w	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 800308a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308e:	f000 8086 	beq.w	800319e <HAL_TIM_ConfigClockSource+0x172>
 8003092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003096:	d87f      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b70      	cmp	r3, #112	; 0x70
 800309a:	d01a      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0xa6>
 800309c:	2b70      	cmp	r3, #112	; 0x70
 800309e:	d87b      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030a0:	2b60      	cmp	r3, #96	; 0x60
 80030a2:	d050      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0x11a>
 80030a4:	2b60      	cmp	r3, #96	; 0x60
 80030a6:	d877      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030a8:	2b50      	cmp	r3, #80	; 0x50
 80030aa:	d03c      	beq.n	8003126 <HAL_TIM_ConfigClockSource+0xfa>
 80030ac:	2b50      	cmp	r3, #80	; 0x50
 80030ae:	d873      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030b0:	2b40      	cmp	r3, #64	; 0x40
 80030b2:	d058      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0x13a>
 80030b4:	2b40      	cmp	r3, #64	; 0x40
 80030b6:	d86f      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030b8:	2b30      	cmp	r3, #48	; 0x30
 80030ba:	d064      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x15a>
 80030bc:	2b30      	cmp	r3, #48	; 0x30
 80030be:	d86b      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d060      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x15a>
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d867      	bhi.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d05c      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x15a>
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d05a      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x15a>
 80030d0:	e062      	b.n	8003198 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030e2:	f000 f970 	bl	80033c6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	609a      	str	r2, [r3, #8]
      break;
 80030fe:	e04f      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003110:	f000 f959 	bl	80033c6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003122:	609a      	str	r2, [r3, #8]
      break;
 8003124:	e03c      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003132:	461a      	mov	r2, r3
 8003134:	f000 f8d0 	bl	80032d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2150      	movs	r1, #80	; 0x50
 800313e:	4618      	mov	r0, r3
 8003140:	f000 f927 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8003144:	e02c      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003152:	461a      	mov	r2, r3
 8003154:	f000 f8ee 	bl	8003334 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2160      	movs	r1, #96	; 0x60
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f917 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8003164:	e01c      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003172:	461a      	mov	r2, r3
 8003174:	f000 f8b0 	bl	80032d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2140      	movs	r1, #64	; 0x40
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f907 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8003184:	e00c      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4619      	mov	r1, r3
 8003190:	4610      	mov	r0, r2
 8003192:	f000 f8fe 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8003196:	e003      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
      break;
 800319c:	e000      	b.n	80031a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800319e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a29      	ldr	r2, [pc, #164]	; (80032cc <TIM_Base_SetConfig+0xb8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00b      	beq.n	8003244 <TIM_Base_SetConfig+0x30>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003232:	d007      	beq.n	8003244 <TIM_Base_SetConfig+0x30>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a26      	ldr	r2, [pc, #152]	; (80032d0 <TIM_Base_SetConfig+0xbc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d003      	beq.n	8003244 <TIM_Base_SetConfig+0x30>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a25      	ldr	r2, [pc, #148]	; (80032d4 <TIM_Base_SetConfig+0xc0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d108      	bne.n	8003256 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a1c      	ldr	r2, [pc, #112]	; (80032cc <TIM_Base_SetConfig+0xb8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00b      	beq.n	8003276 <TIM_Base_SetConfig+0x62>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003264:	d007      	beq.n	8003276 <TIM_Base_SetConfig+0x62>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a19      	ldr	r2, [pc, #100]	; (80032d0 <TIM_Base_SetConfig+0xbc>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d003      	beq.n	8003276 <TIM_Base_SetConfig+0x62>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <TIM_Base_SetConfig+0xc0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d108      	bne.n	8003288 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800327c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a07      	ldr	r2, [pc, #28]	; (80032cc <TIM_Base_SetConfig+0xb8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d103      	bne.n	80032bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	615a      	str	r2, [r3, #20]
}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr
 80032cc:	40012c00 	.word	0x40012c00
 80032d0:	40000400 	.word	0x40000400
 80032d4:	40000800 	.word	0x40000800

080032d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f023 0201 	bic.w	r2, r3, #1
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f023 030a 	bic.w	r3, r3, #10
 8003314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4313      	orrs	r3, r2
 800331c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	621a      	str	r2, [r3, #32]
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f023 0210 	bic.w	r2, r3, #16
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800335e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	031b      	lsls	r3, r3, #12
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003370:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	621a      	str	r2, [r3, #32]
}
 8003388:	bf00      	nop
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr

08003392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003392:	b480      	push	{r7}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f043 0307 	orr.w	r3, r3, #7
 80033b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	609a      	str	r2, [r3, #8]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b087      	sub	sp, #28
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	021a      	lsls	r2, r3, #8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	431a      	orrs	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	609a      	str	r2, [r3, #8]
}
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	2201      	movs	r2, #1
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a1a      	ldr	r2, [r3, #32]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	43db      	mvns	r3, r3
 8003426:	401a      	ands	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1a      	ldr	r2, [r3, #32]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	fa01 f303 	lsl.w	r3, r1, r3
 800343c:	431a      	orrs	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	621a      	str	r2, [r3, #32]
}
 8003442:	bf00      	nop
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr

0800344c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003460:	2302      	movs	r3, #2
 8003462:	e046      	b.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a16      	ldr	r2, [pc, #88]	; (80034fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00e      	beq.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d009      	beq.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a12      	ldr	r2, [pc, #72]	; (8003500 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d004      	beq.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a10      	ldr	r2, [pc, #64]	; (8003504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d10c      	bne.n	80034e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	40012c00 	.word	0x40012c00
 8003500:	40000400 	.word	0x40000400
 8003504:	40000800 	.word	0x40000800

08003508 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr

0800351a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e042      	b.n	80035c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fd fe1c 	bl	8001190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2224      	movs	r2, #36	; 0x24
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800356e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 ff77 	bl	8004464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08c      	sub	sp, #48	; 0x30
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	4613      	mov	r3, r2
 80035d8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d156      	bne.n	8003694 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_UART_Transmit_DMA+0x26>
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e04f      	b.n	8003696 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	88fa      	ldrh	r2, [r7, #6]
 8003606:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2221      	movs	r2, #33	; 0x21
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	4a21      	ldr	r2, [pc, #132]	; (80036a0 <HAL_UART_Transmit_DMA+0xd4>)
 800361c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	4a20      	ldr	r2, [pc, #128]	; (80036a4 <HAL_UART_Transmit_DMA+0xd8>)
 8003624:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	4a1f      	ldr	r2, [pc, #124]	; (80036a8 <HAL_UART_Transmit_DMA+0xdc>)
 800362c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003632:	2200      	movs	r2, #0
 8003634:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8003636:	f107 0308 	add.w	r3, r7, #8
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3304      	adds	r3, #4
 800364a:	461a      	mov	r2, r3
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	f7fe f965 	bl	800191c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800365a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3314      	adds	r3, #20
 8003662:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	617b      	str	r3, [r7, #20]
   return(result);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003672:	62bb      	str	r3, [r7, #40]	; 0x28
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3314      	adds	r3, #20
 800367a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800367c:	627a      	str	r2, [r7, #36]	; 0x24
 800367e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	6a39      	ldr	r1, [r7, #32]
 8003682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003684:	e841 2300 	strex	r3, r2, [r1]
 8003688:	61fb      	str	r3, [r7, #28]
   return(result);
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e5      	bne.n	800365c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e000      	b.n	8003696 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003694:	2302      	movs	r3, #2
  }
}
 8003696:	4618      	mov	r0, r3
 8003698:	3730      	adds	r7, #48	; 0x30
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	08003cfb 	.word	0x08003cfb
 80036a4:	08003d95 	.word	0x08003d95
 80036a8:	08003f19 	.word	0x08003f19

080036ac <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08c      	sub	sp, #48	; 0x30
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	4613      	mov	r3, r2
 80036b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	d14a      	bne.n	800375c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e043      	b.n	800375e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	461a      	mov	r2, r3
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 fc5f 	bl	8003fac <UART_Start_Receive_DMA>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80036f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d12c      	bne.n	8003756 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	2b01      	cmp	r3, #1
 8003702:	d125      	bne.n	8003750 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003704:	2300      	movs	r3, #0
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	330c      	adds	r3, #12
 8003720:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	e853 3f00 	ldrex	r3, [r3]
 8003728:	617b      	str	r3, [r7, #20]
   return(result);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f043 0310 	orr.w	r3, r3, #16
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	330c      	adds	r3, #12
 8003738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800373a:	627a      	str	r2, [r7, #36]	; 0x24
 800373c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373e:	6a39      	ldr	r1, [r7, #32]
 8003740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003742:	e841 2300 	strex	r3, r2, [r1]
 8003746:	61fb      	str	r3, [r7, #28]
   return(result);
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1e5      	bne.n	800371a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800374e:	e002      	b.n	8003756 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003756:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800375a:	e000      	b.n	800375e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
  }
}
 800375e:	4618      	mov	r0, r3
 8003760:	3730      	adds	r7, #48	; 0x30
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_UARTEx_GetRxEventType>:
  *        When DMA is configured in Circular Mode, HT, TC or IDLE events don't stop Reception process;
  * @param  huart UART handle.
  * @retval Rx Event Type (returned value will be a value of @ref UART_RxEvent_Type_Values)
  */
HAL_UART_RxEventTypeTypeDef HAL_UARTEx_GetRxEventType(UART_HandleTypeDef *huart)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  /* Return Rx Event type value, as stored in UART handle */
  return(huart->RxEventType);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b0ba      	sub	sp, #232	; 0xe8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80037ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10f      	bne.n	80037e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <HAL_UART_IRQHandler+0x66>
 80037ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fd84 	bl	80042e8 <UART_Receive_IT>
      return;
 80037e0:	e25b      	b.n	8003c9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 80de 	beq.w	80039a8 <HAL_UART_IRQHandler+0x22c>
 80037ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d106      	bne.n	8003806 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80d1 	beq.w	80039a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00b      	beq.n	800382a <HAL_UART_IRQHandler+0xae>
 8003812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f043 0201 	orr.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800382a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00b      	beq.n	800384e <HAL_UART_IRQHandler+0xd2>
 8003836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	f043 0202 	orr.w	r2, r3, #2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800384e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00b      	beq.n	8003872 <HAL_UART_IRQHandler+0xf6>
 800385a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	f043 0204 	orr.w	r2, r3, #4
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d011      	beq.n	80038a2 <HAL_UART_IRQHandler+0x126>
 800387e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	d105      	bne.n	8003896 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800388a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f043 0208 	orr.w	r2, r3, #8
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 81f2 	beq.w	8003c90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b0:	f003 0320 	and.w	r3, r3, #32
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_UART_IRQHandler+0x14e>
 80038b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fd0f 	bl	80042e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf14      	ite	ne
 80038d8:	2301      	movne	r3, #1
 80038da:	2300      	moveq	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d103      	bne.n	80038f6 <HAL_UART_IRQHandler+0x17a>
 80038ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d04f      	beq.n	8003996 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fc19 	bl	800412e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d041      	beq.n	800398e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3314      	adds	r3, #20
 8003910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003920:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003928:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3314      	adds	r3, #20
 8003932:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003936:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800393a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003942:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800394e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1d9      	bne.n	800390a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d013      	beq.n	8003986 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	4a7e      	ldr	r2, [pc, #504]	; (8003b5c <HAL_UART_IRQHandler+0x3e0>)
 8003964:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe f872 	bl	8001a54 <HAL_DMA_Abort_IT>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d016      	beq.n	80039a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003980:	4610      	mov	r0, r2
 8003982:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003984:	e00e      	b.n	80039a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f9ae 	bl	8003ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800398c:	e00a      	b.n	80039a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f9aa 	bl	8003ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003994:	e006      	b.n	80039a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f9a6 	bl	8003ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80039a2:	e175      	b.n	8003c90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a4:	bf00      	nop
    return;
 80039a6:	e173      	b.n	8003c90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	f040 814f 	bne.w	8003c50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b6:	f003 0310 	and.w	r3, r3, #16
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 8148 	beq.w	8003c50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8141 	beq.w	8003c50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80b6 	beq.w	8003b60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8145 	beq.w	8003c94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a12:	429a      	cmp	r2, r3
 8003a14:	f080 813e 	bcs.w	8003c94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	f000 8088 	beq.w	8003b3c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	330c      	adds	r3, #12
 8003a32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	330c      	adds	r3, #12
 8003a54:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a58:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a64:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1d9      	bne.n	8003a2c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3314      	adds	r3, #20
 8003a7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a82:	e853 3f00 	ldrex	r3, [r3]
 8003a86:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a8a:	f023 0301 	bic.w	r3, r3, #1
 8003a8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3314      	adds	r3, #20
 8003a98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003aa0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003aa4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003aae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e1      	bne.n	8003a78 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3314      	adds	r3, #20
 8003aba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003abe:	e853 3f00 	ldrex	r3, [r3]
 8003ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3314      	adds	r3, #20
 8003ad4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ad8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ada:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003adc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ade:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ae0:	e841 2300 	strex	r3, r2, [r1]
 8003ae4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ae6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e3      	bne.n	8003ab4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	330c      	adds	r3, #12
 8003b00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b0c:	f023 0310 	bic.w	r3, r3, #16
 8003b10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b20:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e3      	bne.n	8003afa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fd ff50 	bl	80019dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	4619      	mov	r1, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd fc2a 	bl	80013ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b58:	e09c      	b.n	8003c94 <HAL_UART_IRQHandler+0x518>
 8003b5a:	bf00      	nop
 8003b5c:	080041f3 	.word	0x080041f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 808e 	beq.w	8003c98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8089 	beq.w	8003c98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	330c      	adds	r3, #12
 8003b8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	330c      	adds	r3, #12
 8003ba6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003baa:	647a      	str	r2, [r7, #68]	; 0x44
 8003bac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bb2:	e841 2300 	strex	r3, r2, [r1]
 8003bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e3      	bne.n	8003b86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3314      	adds	r3, #20
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	623b      	str	r3, [r7, #32]
   return(result);
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3314      	adds	r3, #20
 8003bde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003be2:	633a      	str	r2, [r7, #48]	; 0x30
 8003be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1e3      	bne.n	8003bbe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0310 	bic.w	r3, r3, #16
 8003c1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c28:	61fa      	str	r2, [r7, #28]
 8003c2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	69b9      	ldr	r1, [r7, #24]
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	e841 2300 	strex	r3, r2, [r1]
 8003c34:	617b      	str	r3, [r7, #20]
   return(result);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e3      	bne.n	8003c04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c46:	4619      	mov	r1, r3
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7fd fbaf 	bl	80013ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c4e:	e023      	b.n	8003c98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d009      	beq.n	8003c70 <HAL_UART_IRQHandler+0x4f4>
 8003c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fad6 	bl	800421a <UART_Transmit_IT>
    return;
 8003c6e:	e014      	b.n	8003c9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00e      	beq.n	8003c9a <HAL_UART_IRQHandler+0x51e>
 8003c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fb15 	bl	80042b8 <UART_EndTransmit_IT>
    return;
 8003c8e:	e004      	b.n	8003c9a <HAL_UART_IRQHandler+0x51e>
    return;
 8003c90:	bf00      	nop
 8003c92:	e002      	b.n	8003c9a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c94:	bf00      	nop
 8003c96:	e000      	b.n	8003c9a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c98:	bf00      	nop
  }
}
 8003c9a:	37e8      	adds	r7, #232	; 0xe8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr

08003cfa <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b090      	sub	sp, #64	; 0x40
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d137      	bne.n	8003d86 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d18:	2200      	movs	r2, #0
 8003d1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3314      	adds	r3, #20
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	623b      	str	r3, [r7, #32]
   return(result);
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d32:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3314      	adds	r3, #20
 8003d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d3c:	633a      	str	r2, [r7, #48]	; 0x30
 8003d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e5      	bne.n	8003d1c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	330c      	adds	r3, #12
 8003d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d66:	637b      	str	r3, [r7, #52]	; 0x34
 8003d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d70:	61fa      	str	r2, [r7, #28]
 8003d72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	69b9      	ldr	r1, [r7, #24]
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e5      	bne.n	8003d50 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d84:	e002      	b.n	8003d8c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003d86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003d88:	f7ff ff8a 	bl	8003ca0 <HAL_UART_TxCpltCallback>
}
 8003d8c:	bf00      	nop
 8003d8e:	3740      	adds	r7, #64	; 0x40
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f7ff ff85 	bl	8003cb2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003da8:	bf00      	nop
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b09c      	sub	sp, #112	; 0x70
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d172      	bne.n	8003eb2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dce:	2200      	movs	r2, #0
 8003dd0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	330c      	adds	r3, #12
 8003dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	330c      	adds	r3, #12
 8003df0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003df2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003df4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003df8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e5      	bne.n	8003dd2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3314      	adds	r3, #20
 8003e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3314      	adds	r3, #20
 8003e24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003e26:	647a      	str	r2, [r7, #68]	; 0x44
 8003e28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e5      	bne.n	8003e06 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	623b      	str	r3, [r7, #32]
   return(result);
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e50:	663b      	str	r3, [r7, #96]	; 0x60
 8003e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3314      	adds	r3, #20
 8003e58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e5a:	633a      	str	r2, [r7, #48]	; 0x30
 8003e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e5      	bne.n	8003e3a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d119      	bne.n	8003eb2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	330c      	adds	r3, #12
 8003e84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f023 0310 	bic.w	r3, r3, #16
 8003e94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	330c      	adds	r3, #12
 8003e9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e9e:	61fa      	str	r2, [r7, #28]
 8003ea0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	69b9      	ldr	r1, [r7, #24]
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	e841 2300 	strex	r3, r2, [r1]
 8003eaa:	617b      	str	r3, [r7, #20]
   return(result);
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1e5      	bne.n	8003e7e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d106      	bne.n	8003ece <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003ec8:	f7fd fa70 	bl	80013ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ecc:	e002      	b.n	8003ed4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003ece:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003ed0:	f7ff fef8 	bl	8003cc4 <HAL_UART_RxCpltCallback>
}
 8003ed4:	bf00      	nop
 8003ed6:	3770      	adds	r7, #112	; 0x70
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d108      	bne.n	8003f0a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003efc:	085b      	lsrs	r3, r3, #1
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	4619      	mov	r1, r3
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7fd fa52 	bl	80013ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f08:	e002      	b.n	8003f10 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff fee3 	bl	8003cd6 <HAL_UART_RxHalfCpltCallback>
}
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	bf14      	ite	ne
 8003f38:	2301      	movne	r3, #1
 8003f3a:	2300      	moveq	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b21      	cmp	r3, #33	; 0x21
 8003f4a:	d108      	bne.n	8003f5e <UART_DMAError+0x46>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2200      	movs	r2, #0
 8003f56:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003f58:	68b8      	ldr	r0, [r7, #8]
 8003f5a:	f000 f8c1 	bl	80040e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	bf14      	ite	ne
 8003f6c:	2301      	movne	r3, #1
 8003f6e:	2300      	moveq	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b22      	cmp	r3, #34	; 0x22
 8003f7e:	d108      	bne.n	8003f92 <UART_DMAError+0x7a>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f8c:	68b8      	ldr	r0, [r7, #8]
 8003f8e:	f000 f8ce 	bl	800412e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	f043 0210 	orr.w	r2, r3, #16
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f9e:	68b8      	ldr	r0, [r7, #8]
 8003fa0:	f7ff fea2 	bl	8003ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b098      	sub	sp, #96	; 0x60
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	88fa      	ldrh	r2, [r7, #6]
 8003fc4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2222      	movs	r2, #34	; 0x22
 8003fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd8:	4a3e      	ldr	r2, [pc, #248]	; (80040d4 <UART_Start_Receive_DMA+0x128>)
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	4a3d      	ldr	r2, [pc, #244]	; (80040d8 <UART_Start_Receive_DMA+0x12c>)
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe8:	4a3c      	ldr	r2, [pc, #240]	; (80040dc <UART_Start_Receive_DMA+0x130>)
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003ff4:	f107 0308 	add.w	r3, r7, #8
 8003ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	f7fd fc86 	bl	800191c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004010:	2300      	movs	r3, #0
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d019      	beq.n	8004062 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	330c      	adds	r3, #12
 8004034:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800403e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004044:	65bb      	str	r3, [r7, #88]	; 0x58
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800404e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004050:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004054:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800405c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e5      	bne.n	800402e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3314      	adds	r3, #20
 8004068:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	657b      	str	r3, [r7, #84]	; 0x54
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3314      	adds	r3, #20
 8004080:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004082:	63ba      	str	r2, [r7, #56]	; 0x38
 8004084:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004086:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800408a:	e841 2300 	strex	r3, r2, [r1]
 800408e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1e5      	bne.n	8004062 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3314      	adds	r3, #20
 800409c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	617b      	str	r3, [r7, #20]
   return(result);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ac:	653b      	str	r3, [r7, #80]	; 0x50
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3314      	adds	r3, #20
 80040b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80040b6:	627a      	str	r2, [r7, #36]	; 0x24
 80040b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6a39      	ldr	r1, [r7, #32]
 80040bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e5      	bne.n	8004096 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3760      	adds	r7, #96	; 0x60
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	08003db1 	.word	0x08003db1
 80040d8:	08003edd 	.word	0x08003edd
 80040dc:	08003f19 	.word	0x08003f19

080040e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b089      	sub	sp, #36	; 0x24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	330c      	adds	r3, #12
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	61ba      	str	r2, [r7, #24]
 800410a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410c:	6979      	ldr	r1, [r7, #20]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	e841 2300 	strex	r3, r2, [r1]
 8004114:	613b      	str	r3, [r7, #16]
   return(result);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1e5      	bne.n	80040e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004124:	bf00      	nop
 8004126:	3724      	adds	r7, #36	; 0x24
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr

0800412e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800412e:	b480      	push	{r7}
 8004130:	b095      	sub	sp, #84	; 0x54
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	330c      	adds	r3, #12
 800413c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800414c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	330c      	adds	r3, #12
 8004154:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004156:	643a      	str	r2, [r7, #64]	; 0x40
 8004158:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800415c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e5      	bne.n	8004136 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3314      	adds	r3, #20
 8004170:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	61fb      	str	r3, [r7, #28]
   return(result);
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f023 0301 	bic.w	r3, r3, #1
 8004180:	64bb      	str	r3, [r7, #72]	; 0x48
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3314      	adds	r3, #20
 8004188:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800418a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800418c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e5      	bne.n	800416a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d119      	bne.n	80041da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	330c      	adds	r3, #12
 80041ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f023 0310 	bic.w	r3, r3, #16
 80041bc:	647b      	str	r3, [r7, #68]	; 0x44
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	330c      	adds	r3, #12
 80041c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041c6:	61ba      	str	r2, [r7, #24]
 80041c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	6979      	ldr	r1, [r7, #20]
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	613b      	str	r3, [r7, #16]
   return(result);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e5      	bne.n	80041a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041e8:	bf00      	nop
 80041ea:	3754      	adds	r7, #84	; 0x54
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr

080041f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f7ff fd6b 	bl	8003ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b21      	cmp	r3, #33	; 0x21
 800422c:	d13e      	bne.n	80042ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004236:	d114      	bne.n	8004262 <UART_Transmit_IT+0x48>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d110      	bne.n	8004262 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004254:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	1c9a      	adds	r2, r3, #2
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	621a      	str	r2, [r3, #32]
 8004260:	e008      	b.n	8004274 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	1c59      	adds	r1, r3, #1
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6211      	str	r1, [r2, #32]
 800426c:	781a      	ldrb	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29b      	uxth	r3, r3
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	4619      	mov	r1, r3
 8004282:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10f      	bne.n	80042a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004296:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	e000      	b.n	80042ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042ac:	2302      	movs	r3, #2
  }
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff fce1 	bl	8003ca0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08c      	sub	sp, #48	; 0x30
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b22      	cmp	r3, #34	; 0x22
 80042fa:	f040 80ae 	bne.w	800445a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004306:	d117      	bne.n	8004338 <UART_Receive_IT+0x50>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d113      	bne.n	8004338 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004310:	2300      	movs	r3, #0
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	b29b      	uxth	r3, r3
 8004322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004326:	b29a      	uxth	r2, r3
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	1c9a      	adds	r2, r3, #2
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	629a      	str	r2, [r3, #40]	; 0x28
 8004336:	e026      	b.n	8004386 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800433e:	2300      	movs	r3, #0
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434a:	d007      	beq.n	800435c <UART_Receive_IT+0x74>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <UART_Receive_IT+0x82>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d106      	bne.n	800436a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	b2da      	uxtb	r2, r3
 8004364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	e008      	b.n	800437c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004376:	b2da      	uxtb	r2, r3
 8004378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29b      	uxth	r3, r3
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4619      	mov	r1, r3
 8004394:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004396:	2b00      	cmp	r3, #0
 8004398:	d15d      	bne.n	8004456 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0220 	bic.w	r2, r2, #32
 80043a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0201 	bic.w	r2, r2, #1
 80043c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d135      	bne.n	800444c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	613b      	str	r3, [r7, #16]
   return(result);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f023 0310 	bic.w	r3, r3, #16
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	330c      	adds	r3, #12
 8004404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004406:	623a      	str	r2, [r7, #32]
 8004408:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	69f9      	ldr	r1, [r7, #28]
 800440c:	6a3a      	ldr	r2, [r7, #32]
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	61bb      	str	r3, [r7, #24]
   return(result);
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1e5      	bne.n	80043e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b10      	cmp	r3, #16
 8004426:	d10a      	bne.n	800443e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004442:	4619      	mov	r1, r3
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7fc ffb1 	bl	80013ac <HAL_UARTEx_RxEventCallback>
 800444a:	e002      	b.n	8004452 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff fc39 	bl	8003cc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e002      	b.n	800445c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e000      	b.n	800445c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800445a:	2302      	movs	r3, #2
  }
}
 800445c:	4618      	mov	r0, r3
 800445e:	3730      	adds	r7, #48	; 0x30
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800449e:	f023 030c 	bic.w	r3, r3, #12
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	430b      	orrs	r3, r1
 80044aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a2c      	ldr	r2, [pc, #176]	; (8004578 <UART_SetConfig+0x114>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d103      	bne.n	80044d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044cc:	f7fe fa00 	bl	80028d0 <HAL_RCC_GetPCLK2Freq>
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	e002      	b.n	80044da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044d4:	f7fe f9e8 	bl	80028a8 <HAL_RCC_GetPCLK1Freq>
 80044d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009a      	lsls	r2, r3, #2
 80044e4:	441a      	add	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	4a22      	ldr	r2, [pc, #136]	; (800457c <UART_SetConfig+0x118>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	0119      	lsls	r1, r3, #4
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	009a      	lsls	r2, r3, #2
 8004504:	441a      	add	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004510:	4b1a      	ldr	r3, [pc, #104]	; (800457c <UART_SetConfig+0x118>)
 8004512:	fba3 0302 	umull	r0, r3, r3, r2
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	2064      	movs	r0, #100	; 0x64
 800451a:	fb00 f303 	mul.w	r3, r0, r3
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	3332      	adds	r3, #50	; 0x32
 8004524:	4a15      	ldr	r2, [pc, #84]	; (800457c <UART_SetConfig+0x118>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004530:	4419      	add	r1, r3
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	009a      	lsls	r2, r3, #2
 800453c:	441a      	add	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	fbb2 f2f3 	udiv	r2, r2, r3
 8004548:	4b0c      	ldr	r3, [pc, #48]	; (800457c <UART_SetConfig+0x118>)
 800454a:	fba3 0302 	umull	r0, r3, r3, r2
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	2064      	movs	r0, #100	; 0x64
 8004552:	fb00 f303 	mul.w	r3, r0, r3
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	3332      	adds	r3, #50	; 0x32
 800455c:	4a07      	ldr	r2, [pc, #28]	; (800457c <UART_SetConfig+0x118>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	f003 020f 	and.w	r2, r3, #15
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	440a      	add	r2, r1
 800456e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40013800 	.word	0x40013800
 800457c:	51eb851f 	.word	0x51eb851f

08004580 <memset>:
 8004580:	4603      	mov	r3, r0
 8004582:	4402      	add	r2, r0
 8004584:	4293      	cmp	r3, r2
 8004586:	d100      	bne.n	800458a <memset+0xa>
 8004588:	4770      	bx	lr
 800458a:	f803 1b01 	strb.w	r1, [r3], #1
 800458e:	e7f9      	b.n	8004584 <memset+0x4>

08004590 <strstr>:
 8004590:	780a      	ldrb	r2, [r1, #0]
 8004592:	b570      	push	{r4, r5, r6, lr}
 8004594:	b96a      	cbnz	r2, 80045b2 <strstr+0x22>
 8004596:	bd70      	pop	{r4, r5, r6, pc}
 8004598:	429a      	cmp	r2, r3
 800459a:	d109      	bne.n	80045b0 <strstr+0x20>
 800459c:	460c      	mov	r4, r1
 800459e:	4605      	mov	r5, r0
 80045a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f6      	beq.n	8004596 <strstr+0x6>
 80045a8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80045ac:	429e      	cmp	r6, r3
 80045ae:	d0f7      	beq.n	80045a0 <strstr+0x10>
 80045b0:	3001      	adds	r0, #1
 80045b2:	7803      	ldrb	r3, [r0, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ef      	bne.n	8004598 <strstr+0x8>
 80045b8:	4618      	mov	r0, r3
 80045ba:	e7ec      	b.n	8004596 <strstr+0x6>

080045bc <__libc_init_array>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	2600      	movs	r6, #0
 80045c0:	4d0c      	ldr	r5, [pc, #48]	; (80045f4 <__libc_init_array+0x38>)
 80045c2:	4c0d      	ldr	r4, [pc, #52]	; (80045f8 <__libc_init_array+0x3c>)
 80045c4:	1b64      	subs	r4, r4, r5
 80045c6:	10a4      	asrs	r4, r4, #2
 80045c8:	42a6      	cmp	r6, r4
 80045ca:	d109      	bne.n	80045e0 <__libc_init_array+0x24>
 80045cc:	f000 f81a 	bl	8004604 <_init>
 80045d0:	2600      	movs	r6, #0
 80045d2:	4d0a      	ldr	r5, [pc, #40]	; (80045fc <__libc_init_array+0x40>)
 80045d4:	4c0a      	ldr	r4, [pc, #40]	; (8004600 <__libc_init_array+0x44>)
 80045d6:	1b64      	subs	r4, r4, r5
 80045d8:	10a4      	asrs	r4, r4, #2
 80045da:	42a6      	cmp	r6, r4
 80045dc:	d105      	bne.n	80045ea <__libc_init_array+0x2e>
 80045de:	bd70      	pop	{r4, r5, r6, pc}
 80045e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e4:	4798      	blx	r3
 80045e6:	3601      	adds	r6, #1
 80045e8:	e7ee      	b.n	80045c8 <__libc_init_array+0xc>
 80045ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ee:	4798      	blx	r3
 80045f0:	3601      	adds	r6, #1
 80045f2:	e7f2      	b.n	80045da <__libc_init_array+0x1e>
 80045f4:	08004654 	.word	0x08004654
 80045f8:	08004654 	.word	0x08004654
 80045fc:	08004654 	.word	0x08004654
 8004600:	08004658 	.word	0x08004658

08004604 <_init>:
 8004604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004606:	bf00      	nop
 8004608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460a:	bc08      	pop	{r3}
 800460c:	469e      	mov	lr, r3
 800460e:	4770      	bx	lr

08004610 <_fini>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	bf00      	nop
 8004614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004616:	bc08      	pop	{r3}
 8004618:	469e      	mov	lr, r3
 800461a:	4770      	bx	lr
