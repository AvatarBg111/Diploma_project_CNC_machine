
CNC_Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042e4  080042e4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080042e4  080042e4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042e4  080042e4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e4  080042e4  000142e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042e8  080042e8  000142e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080042ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000010  080042fc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  080042fc  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cdbf  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000205e  00000000  00000000  0002ce3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  0002eea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ea  00000000  00000000  0002fb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000182b2  00000000  00000000  00030532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef0c  00000000  00000000  000487e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ae05  00000000  00000000  000576f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034a0  00000000  00000000  000e24f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e5998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08004294 	.word	0x08004294

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08004294 	.word	0x08004294

0800014c <update_button_status>:
/* Private user code ---------------------------------------------------------*/
/**
  * @brief Updates button statuses
  * Must be called from interrupt handler of a TIMER
  */
void update_button_status(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < BUTTON_CHANNELS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e057      	b.n	8000208 <update_button_status+0xbc>
		if(button_matrix[i].port == NULL){
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	4a2f      	ldr	r2, [pc, #188]	; (8000218 <update_button_status+0xcc>)
 800015c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000160:	2b00      	cmp	r3, #0
 8000162:	d04d      	beq.n	8000200 <update_button_status+0xb4>
			continue;
		}else if(HAL_GPIO_ReadPin(button_matrix[i].port, button_matrix[i].pin) != but_stat_channels[i]){
 8000164:	79fb      	ldrb	r3, [r7, #7]
 8000166:	4a2c      	ldr	r2, [pc, #176]	; (8000218 <update_button_status+0xcc>)
 8000168:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	492a      	ldr	r1, [pc, #168]	; (8000218 <update_button_status+0xcc>)
 8000170:	00db      	lsls	r3, r3, #3
 8000172:	440b      	add	r3, r1
 8000174:	889b      	ldrh	r3, [r3, #4]
 8000176:	4619      	mov	r1, r3
 8000178:	4610      	mov	r0, r2
 800017a:	f001 fde3 	bl	8001d44 <HAL_GPIO_ReadPin>
 800017e:	4603      	mov	r3, r0
 8000180:	4619      	mov	r1, r3
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	4a25      	ldr	r2, [pc, #148]	; (800021c <update_button_status+0xd0>)
 8000186:	5cd3      	ldrb	r3, [r2, r3]
 8000188:	4299      	cmp	r1, r3
 800018a:	d02a      	beq.n	80001e2 <update_button_status+0x96>
			if(++but_stat_cnts[i] >= update_time){
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	4a24      	ldr	r2, [pc, #144]	; (8000220 <update_button_status+0xd4>)
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	3201      	adds	r2, #1
 8000196:	4922      	ldr	r1, [pc, #136]	; (8000220 <update_button_status+0xd4>)
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800019c:	4a20      	ldr	r2, [pc, #128]	; (8000220 <update_button_status+0xd4>)
 800019e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001a2:	4a20      	ldr	r2, [pc, #128]	; (8000224 <update_button_status+0xd8>)
 80001a4:	7812      	ldrb	r2, [r2, #0]
 80001a6:	4293      	cmp	r3, r2
 80001a8:	d32b      	bcc.n	8000202 <update_button_status+0xb6>
				but_stat_cnts[i] = 0;
 80001aa:	79fb      	ldrb	r3, [r7, #7]
 80001ac:	4a1c      	ldr	r2, [pc, #112]	; (8000220 <update_button_status+0xd4>)
 80001ae:	2100      	movs	r1, #0
 80001b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

				if(but_stat_channels[i] == GPIO_PIN_RESET){
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	4a19      	ldr	r2, [pc, #100]	; (800021c <update_button_status+0xd0>)
 80001b8:	5cd3      	ldrb	r3, [r2, r3]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d108      	bne.n	80001d0 <update_button_status+0x84>
					but_stat_channels[i] = GPIO_PIN_SET;
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	4a16      	ldr	r2, [pc, #88]	; (800021c <update_button_status+0xd0>)
 80001c2:	2101      	movs	r1, #1
 80001c4:	54d1      	strb	r1, [r2, r3]
					update_time = update_time_high_to_low;
 80001c6:	4b18      	ldr	r3, [pc, #96]	; (8000228 <update_button_status+0xdc>)
 80001c8:	781a      	ldrb	r2, [r3, #0]
 80001ca:	4b16      	ldr	r3, [pc, #88]	; (8000224 <update_button_status+0xd8>)
 80001cc:	701a      	strb	r2, [r3, #0]
 80001ce:	e018      	b.n	8000202 <update_button_status+0xb6>
				}else{
					but_stat_channels[i] = GPIO_PIN_RESET;
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	4a12      	ldr	r2, [pc, #72]	; (800021c <update_button_status+0xd0>)
 80001d4:	2100      	movs	r1, #0
 80001d6:	54d1      	strb	r1, [r2, r3]
					update_time = update_time_low_to_high;
 80001d8:	4b14      	ldr	r3, [pc, #80]	; (800022c <update_button_status+0xe0>)
 80001da:	781a      	ldrb	r2, [r3, #0]
 80001dc:	4b11      	ldr	r3, [pc, #68]	; (8000224 <update_button_status+0xd8>)
 80001de:	701a      	strb	r2, [r3, #0]
 80001e0:	e00f      	b.n	8000202 <update_button_status+0xb6>
				}
			}
		}else{
			if(but_stat_cnts[i] > 0){
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	4a0e      	ldr	r2, [pc, #56]	; (8000220 <update_button_status+0xd4>)
 80001e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d009      	beq.n	8000202 <update_button_status+0xb6>
				but_stat_cnts[i]--;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	4a0b      	ldr	r2, [pc, #44]	; (8000220 <update_button_status+0xd4>)
 80001f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f6:	3a01      	subs	r2, #1
 80001f8:	4909      	ldr	r1, [pc, #36]	; (8000220 <update_button_status+0xd4>)
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80001fe:	e000      	b.n	8000202 <update_button_status+0xb6>
			continue;
 8000200:	bf00      	nop
	for(uint8_t i = 0; i < BUTTON_CHANNELS; i++){
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	3301      	adds	r3, #1
 8000206:	71fb      	strb	r3, [r7, #7]
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	2b0f      	cmp	r3, #15
 800020c:	d9a4      	bls.n	8000158 <update_button_status+0xc>
			}
		}
	}

	return;
 800020e:	bf00      	nop
}
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	2000002c 	.word	0x2000002c
 800021c:	200000ac 	.word	0x200000ac
 8000220:	200000bc 	.word	0x200000bc
 8000224:	200000fc 	.word	0x200000fc
 8000228:	20000000 	.word	0x20000000
 800022c:	20000001 	.word	0x20000001

08000230 <clear_button_statuses>:
}

/**
  * @brief Clear the buttons statuses
  */
void clear_button_statuses(void){
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < BUTTON_CHANNELS; i++){
 8000236:	2300      	movs	r3, #0
 8000238:	71fb      	strb	r3, [r7, #7]
 800023a:	e011      	b.n	8000260 <clear_button_statuses+0x30>
		button_matrix[i].port = NULL;
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <clear_button_statuses+0x44>)
 8000240:	2100      	movs	r1, #0
 8000242:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		button_matrix[i].pin = 0;
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	4a0a      	ldr	r2, [pc, #40]	; (8000274 <clear_button_statuses+0x44>)
 800024a:	00db      	lsls	r3, r3, #3
 800024c:	4413      	add	r3, r2
 800024e:	2200      	movs	r2, #0
 8000250:	809a      	strh	r2, [r3, #4]
		but_stat_channels[i] = GPIO_PIN_RESET;
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	4a08      	ldr	r2, [pc, #32]	; (8000278 <clear_button_statuses+0x48>)
 8000256:	2100      	movs	r1, #0
 8000258:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < BUTTON_CHANNELS; i++){
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	3301      	adds	r3, #1
 800025e:	71fb      	strb	r3, [r7, #7]
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	2b0f      	cmp	r3, #15
 8000264:	d9ea      	bls.n	800023c <clear_button_statuses+0xc>
	}
}
 8000266:	bf00      	nop
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	2000002c 	.word	0x2000002c
 8000278:	200000ac 	.word	0x200000ac

0800027c <set_button_channel>:

/**
  * @brief Set button pin association with a channel
  */
HAL_StatusTypeDef set_button_channel(GPIO_TypeDef *port, uint16_t pin, uint8_t channel){
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	460b      	mov	r3, r1
 8000286:	807b      	strh	r3, [r7, #2]
 8000288:	4613      	mov	r3, r2
 800028a:	707b      	strb	r3, [r7, #1]
	if(startup == true){
 800028c:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <set_button_channel+0x54>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d004      	beq.n	800029e <set_button_channel+0x22>
		startup = false;
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <set_button_channel+0x54>)
 8000296:	2200      	movs	r2, #0
 8000298:	701a      	strb	r2, [r3, #0]
		clear_button_statuses();
 800029a:	f7ff ffc9 	bl	8000230 <clear_button_statuses>
	}

	if(channel < BUTTON_CHANNELS && port != NULL){
 800029e:	787b      	ldrb	r3, [r7, #1]
 80002a0:	2b0f      	cmp	r3, #15
 80002a2:	d80f      	bhi.n	80002c4 <set_button_channel+0x48>
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00c      	beq.n	80002c4 <set_button_channel+0x48>
		button_matrix[channel].port = port;
 80002aa:	787b      	ldrb	r3, [r7, #1]
 80002ac:	4909      	ldr	r1, [pc, #36]	; (80002d4 <set_button_channel+0x58>)
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		button_matrix[channel].pin = pin;
 80002b4:	787b      	ldrb	r3, [r7, #1]
 80002b6:	4a07      	ldr	r2, [pc, #28]	; (80002d4 <set_button_channel+0x58>)
 80002b8:	00db      	lsls	r3, r3, #3
 80002ba:	4413      	add	r3, r2
 80002bc:	887a      	ldrh	r2, [r7, #2]
 80002be:	809a      	strh	r2, [r3, #4]
		return HAL_OK;
 80002c0:	2300      	movs	r3, #0
 80002c2:	e000      	b.n	80002c6 <set_button_channel+0x4a>
	}

	return HAL_ERROR;
 80002c4:	2301      	movs	r3, #1
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20000002 	.word	0x20000002
 80002d4:	2000002c 	.word	0x2000002c

080002d8 <get_button_state>:

/**
  * @brief Get button status
  */
GPIO_PinState get_button_state(uint8_t channel){
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	return but_stat_channels[channel];
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	4a03      	ldr	r2, [pc, #12]	; (80002f4 <get_button_state+0x1c>)
 80002e6:	5cd3      	ldrb	r3, [r2, r3]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	200000ac 	.word	0x200000ac

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fc:	f000 ff8c 	bl	8001218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000300:	f000 f81c 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000304:	f000 f9f2 	bl	80006ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000308:	f000 f9ca 	bl	80006a0 <MX_DMA_Init>
  MX_TIM2_Init();
 800030c:	f000 f8a8 	bl	8000460 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000310:	f000 f8fa 	bl	8000508 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000314:	f000 f852 	bl	80003bc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000318:	f000 f998 	bl	800064c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800031c:	f000 f948 	bl	80005b0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Init_interfaces();
 8000320:	f000 fa78 	bl	8000814 <Init_interfaces>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
	  if(process_inputs_flag){
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <main+0x40>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0fb      	beq.n	8000324 <main+0x2c>
		  process_inputs_flag = false;
 800032c:	4b02      	ldr	r3, [pc, #8]	; (8000338 <main+0x40>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
		  process_inputs();
 8000332:	f000 fadf 	bl	80008f4 <process_inputs>
	  if(process_inputs_flag){
 8000336:	e7f5      	b.n	8000324 <main+0x2c>
 8000338:	200002f0 	.word	0x200002f0

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b090      	sub	sp, #64	; 0x40
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	f107 0318 	add.w	r3, r7, #24
 8000346:	2228      	movs	r2, #40	; 0x28
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f003 ff60 	bl	8004210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
 800035c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800035e:	2302      	movs	r3, #2
 8000360:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000362:	2301      	movs	r3, #1
 8000364:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000366:	2310      	movs	r3, #16
 8000368:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036a:	2302      	movs	r3, #2
 800036c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800036e:	2300      	movs	r3, #0
 8000370:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000372:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000376:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	f107 0318 	add.w	r3, r7, #24
 800037c:	4618      	mov	r0, r3
 800037e:	f001 fd11 	bl	8001da4 <HAL_RCC_OscConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000388:	f000 fc81 	bl	8000c8e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038c:	230f      	movs	r3, #15
 800038e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000390:	2302      	movs	r3, #2
 8000392:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2101      	movs	r1, #1
 80003a4:	4618      	mov	r0, r3
 80003a6:	f001 ff7f 	bl	80022a8 <HAL_RCC_ClockConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80003b0:	f000 fc6d 	bl	8000c8e <Error_Handler>
  }
}
 80003b4:	bf00      	nop
 80003b6:	3740      	adds	r7, #64	; 0x40
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c2:	f107 0308 	add.w	r3, r7, #8
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d0:	463b      	mov	r3, r7
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003d8:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <MX_TIM1_Init+0x9c>)
 80003da:	4a20      	ldr	r2, [pc, #128]	; (800045c <MX_TIM1_Init+0xa0>)
 80003dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 80003de:	4b1e      	ldr	r3, [pc, #120]	; (8000458 <MX_TIM1_Init+0x9c>)
 80003e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e6:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <MX_TIM1_Init+0x9c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80003ec:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <MX_TIM1_Init+0x9c>)
 80003ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f4:	4b18      	ldr	r3, [pc, #96]	; (8000458 <MX_TIM1_Init+0x9c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003fa:	4b17      	ldr	r3, [pc, #92]	; (8000458 <MX_TIM1_Init+0x9c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <MX_TIM1_Init+0x9c>)
 8000402:	2200      	movs	r2, #0
 8000404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000406:	4814      	ldr	r0, [pc, #80]	; (8000458 <MX_TIM1_Init+0x9c>)
 8000408:	f002 f8dc 	bl	80025c4 <HAL_TIM_Base_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000412:	f000 fc3c 	bl	8000c8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800041c:	f107 0308 	add.w	r3, r7, #8
 8000420:	4619      	mov	r1, r3
 8000422:	480d      	ldr	r0, [pc, #52]	; (8000458 <MX_TIM1_Init+0x9c>)
 8000424:	f002 fc4a 	bl	8002cbc <HAL_TIM_ConfigClockSource>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800042e:	f000 fc2e 	bl	8000c8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000432:	2300      	movs	r3, #0
 8000434:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000436:	2300      	movs	r3, #0
 8000438:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800043a:	463b      	mov	r3, r7
 800043c:	4619      	mov	r1, r3
 800043e:	4806      	ldr	r0, [pc, #24]	; (8000458 <MX_TIM1_Init+0x9c>)
 8000440:	f002 fe4c 	bl	80030dc <HAL_TIMEx_MasterConfigSynchronization>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800044a:	f000 fc20 	bl	8000c8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	3718      	adds	r7, #24
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000100 	.word	0x20000100
 800045c:	40012c00 	.word	0x40012c00

08000460 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08c      	sub	sp, #48	; 0x30
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000466:	f107 030c 	add.w	r3, r7, #12
 800046a:	2224      	movs	r2, #36	; 0x24
 800046c:	2100      	movs	r1, #0
 800046e:	4618      	mov	r0, r3
 8000470:	f003 fece 	bl	8004210 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800047c:	4b21      	ldr	r3, [pc, #132]	; (8000504 <MX_TIM2_Init+0xa4>)
 800047e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000482:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000484:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <MX_TIM2_Init+0xa4>)
 8000486:	2200      	movs	r2, #0
 8000488:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048a:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <MX_TIM2_Init+0xa4>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000490:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <MX_TIM2_Init+0xa4>)
 8000492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000496:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000498:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <MX_TIM2_Init+0xa4>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <MX_TIM2_Init+0xa4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80004a4:	2301      	movs	r3, #1
 80004a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004a8:	2300      	movs	r3, #0
 80004aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004ac:	2301      	movs	r3, #1
 80004ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004b8:	2300      	movs	r3, #0
 80004ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004bc:	2301      	movs	r3, #1
 80004be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80004c8:	f107 030c 	add.w	r3, r7, #12
 80004cc:	4619      	mov	r1, r3
 80004ce:	480d      	ldr	r0, [pc, #52]	; (8000504 <MX_TIM2_Init+0xa4>)
 80004d0:	f002 f9bc 	bl	800284c <HAL_TIM_Encoder_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80004da:	f000 fbd8 	bl	8000c8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004de:	2300      	movs	r3, #0
 80004e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e2:	2300      	movs	r3, #0
 80004e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	4619      	mov	r1, r3
 80004ea:	4806      	ldr	r0, [pc, #24]	; (8000504 <MX_TIM2_Init+0xa4>)
 80004ec:	f002 fdf6 	bl	80030dc <HAL_TIMEx_MasterConfigSynchronization>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80004f6:	f000 fbca 	bl	8000c8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	3730      	adds	r7, #48	; 0x30
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000148 	.word	0x20000148

08000508 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	; 0x30
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	2224      	movs	r2, #36	; 0x24
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f003 fe7a 	bl	8004210 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000524:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <MX_TIM3_Init+0xa0>)
 8000526:	4a21      	ldr	r2, [pc, #132]	; (80005ac <MX_TIM3_Init+0xa4>)
 8000528:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800052a:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <MX_TIM3_Init+0xa0>)
 800052c:	2200      	movs	r2, #0
 800052e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000530:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <MX_TIM3_Init+0xa0>)
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <MX_TIM3_Init+0xa0>)
 8000538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800053c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800053e:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <MX_TIM3_Init+0xa0>)
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <MX_TIM3_Init+0xa0>)
 8000546:	2200      	movs	r2, #0
 8000548:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800054a:	2301      	movs	r3, #1
 800054c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800054e:	2300      	movs	r3, #0
 8000550:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000552:	2301      	movs	r3, #1
 8000554:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800055e:	2300      	movs	r3, #0
 8000560:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000562:	2301      	movs	r3, #1
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	4619      	mov	r1, r3
 8000574:	480c      	ldr	r0, [pc, #48]	; (80005a8 <MX_TIM3_Init+0xa0>)
 8000576:	f002 f969 	bl	800284c <HAL_TIM_Encoder_Init>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000580:	f000 fb85 	bl	8000c8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	4619      	mov	r1, r3
 8000590:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_TIM3_Init+0xa0>)
 8000592:	f002 fda3 	bl	80030dc <HAL_TIMEx_MasterConfigSynchronization>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800059c:	f000 fb77 	bl	8000c8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005a0:	bf00      	nop
 80005a2:	3730      	adds	r7, #48	; 0x30
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000190 	.word	0x20000190
 80005ac:	40000400 	.word	0x40000400

080005b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005b6:	f107 0308 	add.w	r3, r7, #8
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <MX_TIM4_Init+0x94>)
 80005ce:	4a1e      	ldr	r2, [pc, #120]	; (8000648 <MX_TIM4_Init+0x98>)
 80005d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 320;
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <MX_TIM4_Init+0x94>)
 80005d4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80005d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005da:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <MX_TIM4_Init+0x94>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000 - 1;
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <MX_TIM4_Init+0x94>)
 80005e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e8:	4b16      	ldr	r3, [pc, #88]	; (8000644 <MX_TIM4_Init+0x94>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <MX_TIM4_Init+0x94>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80005f4:	4813      	ldr	r0, [pc, #76]	; (8000644 <MX_TIM4_Init+0x94>)
 80005f6:	f001 ffe5 	bl	80025c4 <HAL_TIM_Base_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000600:	f000 fb45 	bl	8000c8e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	4619      	mov	r1, r3
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <MX_TIM4_Init+0x94>)
 8000612:	f002 fb53 	bl	8002cbc <HAL_TIM_ConfigClockSource>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800061c:	f000 fb37 	bl	8000c8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000628:	463b      	mov	r3, r7
 800062a:	4619      	mov	r1, r3
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_TIM4_Init+0x94>)
 800062e:	f002 fd55 	bl	80030dc <HAL_TIMEx_MasterConfigSynchronization>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000638:	f000 fb29 	bl	8000c8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200001d8 	.word	0x200001d8
 8000648:	40000800 	.word	0x40000800

0800064c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_USART2_UART_Init+0x48>)
 8000652:	4a11      	ldr	r2, [pc, #68]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 200000;
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_USART2_UART_Init+0x48>)
 8000658:	4a10      	ldr	r2, [pc, #64]	; (800069c <MX_USART2_UART_Init+0x50>)
 800065a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_USART2_UART_Init+0x48>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_USART2_UART_Init+0x48>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_USART2_UART_Init+0x48>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_USART2_UART_Init+0x48>)
 8000670:	220c      	movs	r2, #12
 8000672:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_USART2_UART_Init+0x48>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_USART2_UART_Init+0x48>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_USART2_UART_Init+0x48>)
 8000682:	f002 fd9b 	bl	80031bc <HAL_UART_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 800068c:	f000 faff 	bl	8000c8e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000220 	.word	0x20000220
 8000698:	40004400 	.word	0x40004400
 800069c:	00030d40 	.word	0x00030d40

080006a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_DMA_Init+0x48>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <MX_DMA_Init+0x48>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6153      	str	r3, [r2, #20]
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <MX_DMA_Init+0x48>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	2010      	movs	r0, #16
 80006c4:	f000 fee1 	bl	800148a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006c8:	2010      	movs	r0, #16
 80006ca:	f000 fefa 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	2011      	movs	r0, #17
 80006d4:	f000 fed9 	bl	800148a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80006d8:	2011      	movs	r0, #17
 80006da:	f000 fef2 	bl	80014c2 <HAL_NVIC_EnableIRQ>

}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40021000 	.word	0x40021000

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000700:	4b40      	ldr	r3, [pc, #256]	; (8000804 <MX_GPIO_Init+0x118>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a3f      	ldr	r2, [pc, #252]	; (8000804 <MX_GPIO_Init+0x118>)
 8000706:	f043 0310 	orr.w	r3, r3, #16
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b3d      	ldr	r3, [pc, #244]	; (8000804 <MX_GPIO_Init+0x118>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0310 	and.w	r3, r3, #16
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <MX_GPIO_Init+0x118>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a39      	ldr	r2, [pc, #228]	; (8000804 <MX_GPIO_Init+0x118>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b37      	ldr	r3, [pc, #220]	; (8000804 <MX_GPIO_Init+0x118>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0304 	and.w	r3, r3, #4
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000730:	4b34      	ldr	r3, [pc, #208]	; (8000804 <MX_GPIO_Init+0x118>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a33      	ldr	r2, [pc, #204]	; (8000804 <MX_GPIO_Init+0x118>)
 8000736:	f043 0308 	orr.w	r3, r3, #8
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b31      	ldr	r3, [pc, #196]	; (8000804 <MX_GPIO_Init+0x118>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0308 	and.w	r3, r3, #8
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLOOD_LED_Pin|MIST_LED_Pin|CYCLE_START_LED_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800074e:	482e      	ldr	r0, [pc, #184]	; (8000808 <MX_GPIO_Init+0x11c>)
 8000750:	f001 fb0f 	bl	8001d72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MPG_ON_LED_Pin|AXIS_X_MULTIPLIER_LED_1_Pin|AXIS_X_MULTIPLIER_LED_2_Pin|AXIS_X_MULTIPLIER_LED_3_Pin
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 411e 	mov.w	r1, #40448	; 0x9e00
 800075a:	482c      	ldr	r0, [pc, #176]	; (800080c <MX_GPIO_Init+0x120>)
 800075c:	f001 fb09 	bl	8001d72 <HAL_GPIO_WritePin>
                          |AXIS_YZ_MULTIPLIER_LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AXIS_YZ_MULTIPLIER_LED_2_Pin|AXIS_YZ_MULTIPLIER_LED_3_Pin|YZ_SW_LED_Y_Pin|YZ_SW_LED_Z_Pin
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8000766:	482a      	ldr	r0, [pc, #168]	; (8000810 <MX_GPIO_Init+0x124>)
 8000768:	f001 fb03 	bl	8001d72 <HAL_GPIO_WritePin>
                          |HOLD_LED_Pin|SPINDLE_CW_LED_Pin|SPINDLE_CCW_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : FLOOD_LED_Pin MIST_LED_Pin CYCLE_START_LED_Pin */
  GPIO_InitStruct.Pin = FLOOD_LED_Pin|MIST_LED_Pin|CYCLE_START_LED_Pin;
 800076c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2302      	movs	r3, #2
 800077c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	4619      	mov	r1, r3
 8000784:	4820      	ldr	r0, [pc, #128]	; (8000808 <MX_GPIO_Init+0x11c>)
 8000786:	f001 f959 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPINDLE_MODE_SW_NC_1_Pin SPINDLE_MODE_SW_NC_2_Pin MIST_Pin LOCK_X_AXIS_SW_Pin
                           LOCK_YZ_AXIS_SW_Pin */
  GPIO_InitStruct.Pin = SPINDLE_MODE_SW_NC_1_Pin|SPINDLE_MODE_SW_NC_2_Pin|MIST_Pin|LOCK_X_AXIS_SW_Pin
 800078a:	f246 1330 	movw	r3, #24880	; 0x6130
 800078e:	613b      	str	r3, [r7, #16]
                          |LOCK_YZ_AXIS_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000794:	2301      	movs	r3, #1
 8000796:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	4619      	mov	r1, r3
 800079e:	481b      	ldr	r0, [pc, #108]	; (800080c <MX_GPIO_Init+0x120>)
 80007a0:	f001 f94c 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : AXIS_X_MULTIPLIER_SW_NC_1_Pin AXIS_X_MULTIPLIER_SW_NC_2_Pin AXIS_YZ_MULTIPLIER_SW_NC_1_Pin AXIS_YZ_MULTIPLIER_SW_NC_2_Pin
                           YZ_SW_Pin MPG_SW_Pin HOLD_Pin CYCLE_START_Pin
                           FLOOD_Pin */
  GPIO_InitStruct.Pin = AXIS_X_MULTIPLIER_SW_NC_1_Pin|AXIS_X_MULTIPLIER_SW_NC_2_Pin|AXIS_YZ_MULTIPLIER_SW_NC_1_Pin|AXIS_YZ_MULTIPLIER_SW_NC_2_Pin
 80007a4:	f64f 4307 	movw	r3, #64519	; 0xfc07
 80007a8:	613b      	str	r3, [r7, #16]
                          |YZ_SW_Pin|MPG_SW_Pin|HOLD_Pin|CYCLE_START_Pin
                          |FLOOD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4619      	mov	r1, r3
 80007b8:	4815      	ldr	r0, [pc, #84]	; (8000810 <MX_GPIO_Init+0x124>)
 80007ba:	f001 f93f 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : MPG_ON_LED_Pin AXIS_X_MULTIPLIER_LED_1_Pin AXIS_X_MULTIPLIER_LED_2_Pin AXIS_X_MULTIPLIER_LED_3_Pin
                           AXIS_YZ_MULTIPLIER_LED_1_Pin */
  GPIO_InitStruct.Pin = MPG_ON_LED_Pin|AXIS_X_MULTIPLIER_LED_1_Pin|AXIS_X_MULTIPLIER_LED_2_Pin|AXIS_X_MULTIPLIER_LED_3_Pin
 80007be:	f44f 431e 	mov.w	r3, #40448	; 0x9e00
 80007c2:	613b      	str	r3, [r7, #16]
                          |AXIS_YZ_MULTIPLIER_LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4619      	mov	r1, r3
 80007d6:	480d      	ldr	r0, [pc, #52]	; (800080c <MX_GPIO_Init+0x120>)
 80007d8:	f001 f930 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : AXIS_YZ_MULTIPLIER_LED_2_Pin AXIS_YZ_MULTIPLIER_LED_3_Pin YZ_SW_LED_Y_Pin YZ_SW_LED_Z_Pin
                           HOLD_LED_Pin SPINDLE_CW_LED_Pin SPINDLE_CCW_LED_Pin */
  GPIO_InitStruct.Pin = AXIS_YZ_MULTIPLIER_LED_2_Pin|AXIS_YZ_MULTIPLIER_LED_3_Pin|YZ_SW_LED_Y_Pin|YZ_SW_LED_Z_Pin
 80007dc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80007e0:	613b      	str	r3, [r7, #16]
                          |HOLD_LED_Pin|SPINDLE_CW_LED_Pin|SPINDLE_CCW_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2302      	movs	r3, #2
 80007ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	4619      	mov	r1, r3
 80007f4:	4806      	ldr	r0, [pc, #24]	; (8000810 <MX_GPIO_Init+0x124>)
 80007f6:	f001 f921 	bl	8001a3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fa:	bf00      	nop
 80007fc:	3720      	adds	r7, #32
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000
 8000808:	40011000 	.word	0x40011000
 800080c:	40010800 	.word	0x40010800
 8000810:	40010c00 	.word	0x40010c00

08000814 <Init_interfaces>:

/* USER CODE BEGIN 4 */
void Init_interfaces(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	// Start encoder timers
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000818:	213c      	movs	r1, #60	; 0x3c
 800081a:	4830      	ldr	r0, [pc, #192]	; (80008dc <Init_interfaces+0xc8>)
 800081c:	f002 f8b8 	bl	8002990 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000820:	213c      	movs	r1, #60	; 0x3c
 8000822:	482f      	ldr	r0, [pc, #188]	; (80008e0 <Init_interfaces+0xcc>)
 8000824:	f002 f8b4 	bl	8002990 <HAL_TIM_Encoder_Start>

	// Start 3 position switch LED PWM timer
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000828:	2100      	movs	r1, #0
 800082a:	482e      	ldr	r0, [pc, #184]	; (80008e4 <Init_interfaces+0xd0>)
 800082c:	f001 ff6c 	bl	8002708 <HAL_TIM_PWM_Start>

	// Start TIM4 for button de-bouncer
	HAL_TIM_Base_Start_IT(&htim4);
 8000830:	482d      	ldr	r0, [pc, #180]	; (80008e8 <Init_interfaces+0xd4>)
 8000832:	f001 ff17 	bl	8002664 <HAL_TIM_Base_Start_IT>

	// Assign buttons/switches a de-bouncer channel
	set_button_channel(SPINDLE_MODE_SW_NC_1_GPIO_Port, SPINDLE_MODE_SW_NC_1_Pin, SPINDLE_3POS_SW_NC_1_CH);
 8000836:	2200      	movs	r2, #0
 8000838:	2110      	movs	r1, #16
 800083a:	482c      	ldr	r0, [pc, #176]	; (80008ec <Init_interfaces+0xd8>)
 800083c:	f7ff fd1e 	bl	800027c <set_button_channel>
	set_button_channel(SPINDLE_MODE_SW_NC_2_GPIO_Port, SPINDLE_MODE_SW_NC_2_Pin, SPINDLE_3POS_SW_NC_2_CH);
 8000840:	2201      	movs	r2, #1
 8000842:	2120      	movs	r1, #32
 8000844:	4829      	ldr	r0, [pc, #164]	; (80008ec <Init_interfaces+0xd8>)
 8000846:	f7ff fd19 	bl	800027c <set_button_channel>
	set_button_channel(AXIS_X_MULTIPLIER_SW_NC_1_GPIO_Port, AXIS_X_MULTIPLIER_SW_NC_1_Pin, AXIS_X_MULTIPLIER_SW_NC_1_CH);
 800084a:	2202      	movs	r2, #2
 800084c:	2101      	movs	r1, #1
 800084e:	4828      	ldr	r0, [pc, #160]	; (80008f0 <Init_interfaces+0xdc>)
 8000850:	f7ff fd14 	bl	800027c <set_button_channel>
	set_button_channel(AXIS_X_MULTIPLIER_SW_NC_2_GPIO_Port, AXIS_X_MULTIPLIER_SW_NC_2_Pin, AXIS_X_MULTIPLIER_SW_NC_2_CH);
 8000854:	2203      	movs	r2, #3
 8000856:	2102      	movs	r1, #2
 8000858:	4825      	ldr	r0, [pc, #148]	; (80008f0 <Init_interfaces+0xdc>)
 800085a:	f7ff fd0f 	bl	800027c <set_button_channel>
	set_button_channel(AXIS_YZ_MULTIPLIER_SW_NC_1_GPIO_Port, AXIS_YZ_MULTIPLIER_SW_NC_1_Pin, AXIS_YZ_MULTIPLIER_SW_NC_1_CH);
 800085e:	2204      	movs	r2, #4
 8000860:	2104      	movs	r1, #4
 8000862:	4823      	ldr	r0, [pc, #140]	; (80008f0 <Init_interfaces+0xdc>)
 8000864:	f7ff fd0a 	bl	800027c <set_button_channel>
	set_button_channel(AXIS_YZ_MULTIPLIER_SW_NC_2_GPIO_Port, AXIS_YZ_MULTIPLIER_SW_NC_2_Pin, AXIS_YZ_MULTIPLIER_SW_NC_2_CH);
 8000868:	2205      	movs	r2, #5
 800086a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086e:	4820      	ldr	r0, [pc, #128]	; (80008f0 <Init_interfaces+0xdc>)
 8000870:	f7ff fd04 	bl	800027c <set_button_channel>
	set_button_channel(YZ_SW_GPIO_Port, YZ_SW_Pin, YZ_SW_CH);
 8000874:	2206      	movs	r2, #6
 8000876:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800087a:	481d      	ldr	r0, [pc, #116]	; (80008f0 <Init_interfaces+0xdc>)
 800087c:	f7ff fcfe 	bl	800027c <set_button_channel>
	set_button_channel(MPG_SW_GPIO_Port, MPG_SW_Pin, MPG_BUT_CH);
 8000880:	2207      	movs	r2, #7
 8000882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000886:	481a      	ldr	r0, [pc, #104]	; (80008f0 <Init_interfaces+0xdc>)
 8000888:	f7ff fcf8 	bl	800027c <set_button_channel>
	set_button_channel(HOLD_GPIO_Port, HOLD_Pin, HOLD_BUT_CH);
 800088c:	2208      	movs	r2, #8
 800088e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000892:	4817      	ldr	r0, [pc, #92]	; (80008f0 <Init_interfaces+0xdc>)
 8000894:	f7ff fcf2 	bl	800027c <set_button_channel>
	set_button_channel(CYCLE_START_GPIO_Port, CYCLE_START_Pin, CYCLE_START_BUT_CH);
 8000898:	2209      	movs	r2, #9
 800089a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800089e:	4814      	ldr	r0, [pc, #80]	; (80008f0 <Init_interfaces+0xdc>)
 80008a0:	f7ff fcec 	bl	800027c <set_button_channel>
	set_button_channel(FLOOD_GPIO_Port, FLOOD_Pin, FLOOD_SW_CH);
 80008a4:	220a      	movs	r2, #10
 80008a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008aa:	4811      	ldr	r0, [pc, #68]	; (80008f0 <Init_interfaces+0xdc>)
 80008ac:	f7ff fce6 	bl	800027c <set_button_channel>
	set_button_channel(MIST_GPIO_Port, MIST_Pin, MIST_SW_CH);
 80008b0:	220b      	movs	r2, #11
 80008b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b6:	480d      	ldr	r0, [pc, #52]	; (80008ec <Init_interfaces+0xd8>)
 80008b8:	f7ff fce0 	bl	800027c <set_button_channel>
	set_button_channel(LOCK_X_AXIS_SW_GPIO_Port, LOCK_X_AXIS_SW_Pin, LOCK_X_AXIS_SW_CH);
 80008bc:	220c      	movs	r2, #12
 80008be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c2:	480a      	ldr	r0, [pc, #40]	; (80008ec <Init_interfaces+0xd8>)
 80008c4:	f7ff fcda 	bl	800027c <set_button_channel>
	set_button_channel(LOCK_YZ_AXIS_SW_GPIO_Port, LOCK_YZ_AXIS_SW_Pin, LOCK_YZ_AXIS_SW_CH);
 80008c8:	220d      	movs	r2, #13
 80008ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ce:	4807      	ldr	r0, [pc, #28]	; (80008ec <Init_interfaces+0xd8>)
 80008d0:	f7ff fcd4 	bl	800027c <set_button_channel>

	// Start UART2 reception
	start_uart2_reception();
 80008d4:	f000 fc3e 	bl	8001154 <start_uart2_reception>
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000148 	.word	0x20000148
 80008e0:	20000190 	.word	0x20000190
 80008e4:	20000100 	.word	0x20000100
 80008e8:	200001d8 	.word	0x200001d8
 80008ec:	40010800 	.word	0x40010800
 80008f0:	40010c00 	.word	0x40010c00

080008f4 <process_inputs>:

void process_inputs(void){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
	static bool y_or_z_last_state = false;
	uint8_t lock_x_axis = get_button_state(LOCK_X_AXIS_SW_CH);
 80008fa:	200c      	movs	r0, #12
 80008fc:	f7ff fcec 	bl	80002d8 <get_button_state>
 8000900:	4603      	mov	r3, r0
 8000902:	71fb      	strb	r3, [r7, #7]
	uint8_t lock_yz_axis = get_button_state(LOCK_YZ_AXIS_SW_CH);
 8000904:	200d      	movs	r0, #13
 8000906:	f7ff fce7 	bl	80002d8 <get_button_state>
 800090a:	4603      	mov	r3, r0
 800090c:	71bb      	strb	r3, [r7, #6]

	if(pendant_status && pendant_data.mpg){
 800090e:	4b80      	ldr	r3, [pc, #512]	; (8000b10 <process_inputs+0x21c>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d020      	beq.n	8000958 <process_inputs+0x64>
 8000916:	4b7f      	ldr	r3, [pc, #508]	; (8000b14 <process_inputs+0x220>)
 8000918:	7b9b      	ldrb	r3, [r3, #14]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d01c      	beq.n	8000958 <process_inputs+0x64>
		if(lock_x_axis == GPIO_PIN_RESET){
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d105      	bne.n	8000930 <process_inputs+0x3c>
			pendant_data.encoder1_val = ENCODER_1_TIM.Instance->CNT;
 8000924:	4b7c      	ldr	r3, [pc, #496]	; (8000b18 <process_inputs+0x224>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092a:	4a7a      	ldr	r2, [pc, #488]	; (8000b14 <process_inputs+0x220>)
 800092c:	6013      	str	r3, [r2, #0]
 800092e:	e004      	b.n	800093a <process_inputs+0x46>
		}else{
			ENCODER_1_TIM.Instance->CNT = pendant_data.encoder1_val;
 8000930:	4b79      	ldr	r3, [pc, #484]	; (8000b18 <process_inputs+0x224>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a77      	ldr	r2, [pc, #476]	; (8000b14 <process_inputs+0x220>)
 8000936:	6812      	ldr	r2, [r2, #0]
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(lock_yz_axis == GPIO_PIN_RESET){
 800093a:	79bb      	ldrb	r3, [r7, #6]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d105      	bne.n	800094c <process_inputs+0x58>
			pendant_data.encoder2_val = ENCODER_2_TIM.Instance->CNT;
 8000940:	4b76      	ldr	r3, [pc, #472]	; (8000b1c <process_inputs+0x228>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000946:	4a73      	ldr	r2, [pc, #460]	; (8000b14 <process_inputs+0x220>)
 8000948:	6053      	str	r3, [r2, #4]
		if(lock_yz_axis == GPIO_PIN_RESET){
 800094a:	e013      	b.n	8000974 <process_inputs+0x80>
		}else{
			ENCODER_2_TIM.Instance->CNT = pendant_data.encoder2_val;
 800094c:	4b73      	ldr	r3, [pc, #460]	; (8000b1c <process_inputs+0x228>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a70      	ldr	r2, [pc, #448]	; (8000b14 <process_inputs+0x220>)
 8000952:	6852      	ldr	r2, [r2, #4]
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
		if(lock_yz_axis == GPIO_PIN_RESET){
 8000956:	e00d      	b.n	8000974 <process_inputs+0x80>
		}
	}else{
		pendant_data.encoder1_val = 0;
 8000958:	4b6e      	ldr	r3, [pc, #440]	; (8000b14 <process_inputs+0x220>)
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
		pendant_data.encoder2_val = 0;
 800095e:	4b6d      	ldr	r3, [pc, #436]	; (8000b14 <process_inputs+0x220>)
 8000960:	2200      	movs	r2, #0
 8000962:	605a      	str	r2, [r3, #4]
		ENCODER_1_TIM.Instance->CNT = 0;
 8000964:	4b6c      	ldr	r3, [pc, #432]	; (8000b18 <process_inputs+0x224>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2200      	movs	r2, #0
 800096a:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_2_TIM.Instance->CNT = 0;
 800096c:	4b6b      	ldr	r3, [pc, #428]	; (8000b1c <process_inputs+0x228>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
	}
	pendant_data.spindle_mode = get_spindle_mode();
 8000974:	f000 f8da 	bl	8000b2c <get_spindle_mode>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	4b65      	ldr	r3, [pc, #404]	; (8000b14 <process_inputs+0x220>)
 800097e:	731a      	strb	r2, [r3, #12]
	pendant_data.jog_mode = 0;	//TODO
 8000980:	4b64      	ldr	r3, [pc, #400]	; (8000b14 <process_inputs+0x220>)
 8000982:	2200      	movs	r2, #0
 8000984:	72da      	strb	r2, [r3, #11]
	pendant_data.x_axis_multiplicity = get_x_axis_multiplier();
 8000986:	f000 f90c 	bl	8000ba2 <get_x_axis_multiplier>
 800098a:	4603      	mov	r3, r0
 800098c:	461a      	mov	r2, r3
 800098e:	4b61      	ldr	r3, [pc, #388]	; (8000b14 <process_inputs+0x220>)
 8000990:	721a      	strb	r2, [r3, #8]
	pendant_data.yz_axis_multiplicity = get_yz_axis_multiplier();
 8000992:	f000 f941 	bl	8000c18 <get_yz_axis_multiplier>
 8000996:	4603      	mov	r3, r0
 8000998:	461a      	mov	r2, r3
 800099a:	4b5e      	ldr	r3, [pc, #376]	; (8000b14 <process_inputs+0x220>)
 800099c:	725a      	strb	r2, [r3, #9]

	// Y / Z axis
	if(get_button_state(YZ_SW_CH) == GPIO_PIN_RESET){
 800099e:	2006      	movs	r0, #6
 80009a0:	f7ff fc9a 	bl	80002d8 <get_button_state>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d11e      	bne.n	80009e8 <process_inputs+0xf4>
		if(!y_or_z_last_state){
 80009aa:	4b5d      	ldr	r3, [pc, #372]	; (8000b20 <process_inputs+0x22c>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	f083 0301 	eor.w	r3, r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d005      	beq.n	80009c4 <process_inputs+0xd0>
			y_or_z_last_state = true;
 80009b8:	4b59      	ldr	r3, [pc, #356]	; (8000b20 <process_inputs+0x22c>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
			button_action_delay_cnt_ch[Y_OR_Z_BUT_DELAY_CH] = 0;
 80009be:	4b59      	ldr	r3, [pc, #356]	; (8000b24 <process_inputs+0x230>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
		}
		if(++button_action_delay_cnt_ch[Y_OR_Z_BUT_DELAY_CH] >= button_delay_action_cnt){
 80009c4:	4b57      	ldr	r3, [pc, #348]	; (8000b24 <process_inputs+0x230>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b55      	ldr	r3, [pc, #340]	; (8000b24 <process_inputs+0x230>)
 80009ce:	701a      	strb	r2, [r3, #0]
 80009d0:	4b54      	ldr	r3, [pc, #336]	; (8000b24 <process_inputs+0x230>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2204      	movs	r2, #4
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d321      	bcc.n	8000a1e <process_inputs+0x12a>
			button_action_delay_cnt_ch[Y_OR_Z_BUT_DELAY_CH] = 0;
 80009da:	4b52      	ldr	r3, [pc, #328]	; (8000b24 <process_inputs+0x230>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
			pendant_data.y_or_z = YZ_MOVEMENT_Z;	// Set to Z axis
 80009e0:	4b4c      	ldr	r3, [pc, #304]	; (8000b14 <process_inputs+0x220>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	729a      	strb	r2, [r3, #10]
 80009e6:	e01a      	b.n	8000a1e <process_inputs+0x12a>
		}
	}else{
		if(y_or_z_last_state){
 80009e8:	4b4d      	ldr	r3, [pc, #308]	; (8000b20 <process_inputs+0x22c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d005      	beq.n	80009fc <process_inputs+0x108>
			y_or_z_last_state = false;
 80009f0:	4b4b      	ldr	r3, [pc, #300]	; (8000b20 <process_inputs+0x22c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
			button_action_delay_cnt_ch[Y_OR_Z_BUT_DELAY_CH] = 0;
 80009f6:	4b4b      	ldr	r3, [pc, #300]	; (8000b24 <process_inputs+0x230>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
		}
		if(++button_action_delay_cnt_ch[Y_OR_Z_BUT_DELAY_CH] >= button_delay_action_cnt){
 80009fc:	4b49      	ldr	r3, [pc, #292]	; (8000b24 <process_inputs+0x230>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b47      	ldr	r3, [pc, #284]	; (8000b24 <process_inputs+0x230>)
 8000a06:	701a      	strb	r2, [r3, #0]
 8000a08:	4b46      	ldr	r3, [pc, #280]	; (8000b24 <process_inputs+0x230>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2204      	movs	r2, #4
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d305      	bcc.n	8000a1e <process_inputs+0x12a>
			button_action_delay_cnt_ch[Y_OR_Z_BUT_DELAY_CH] = 0;
 8000a12:	4b44      	ldr	r3, [pc, #272]	; (8000b24 <process_inputs+0x230>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
			pendant_data.y_or_z = YZ_MOVEMENT_Y;	// Set to Z axis
 8000a18:	4b3e      	ldr	r3, [pc, #248]	; (8000b14 <process_inputs+0x220>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	729a      	strb	r2, [r3, #10]
		}
	}

	// MPG state
	if(get_button_state(MPG_BUT_CH) == GPIO_PIN_RESET){
 8000a1e:	2007      	movs	r0, #7
 8000a20:	f7ff fc5a 	bl	80002d8 <get_button_state>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d119      	bne.n	8000a5e <process_inputs+0x16a>
		if(++button_action_delay_cnt_ch[MPG_BUT_DELAY_CH] >= button_delay_action_cnt){
 8000a2a:	4b3e      	ldr	r3, [pc, #248]	; (8000b24 <process_inputs+0x230>)
 8000a2c:	785b      	ldrb	r3, [r3, #1]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b3c      	ldr	r3, [pc, #240]	; (8000b24 <process_inputs+0x230>)
 8000a34:	705a      	strb	r2, [r3, #1]
 8000a36:	4b3b      	ldr	r3, [pc, #236]	; (8000b24 <process_inputs+0x230>)
 8000a38:	785b      	ldrb	r3, [r3, #1]
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d311      	bcc.n	8000a64 <process_inputs+0x170>
			button_action_delay_cnt_ch[MPG_BUT_DELAY_CH] = 0;
 8000a40:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <process_inputs+0x230>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	705a      	strb	r2, [r3, #1]

			if(pendant_mpg_status != MPG_STATUS_DISABLED){
 8000a46:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <process_inputs+0x234>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d003      	beq.n	8000a56 <process_inputs+0x162>
				pendant_mpg_status = MPG_STATUS_DISABLED;
 8000a4e:	4b36      	ldr	r3, [pc, #216]	; (8000b28 <process_inputs+0x234>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	e006      	b.n	8000a64 <process_inputs+0x170>
			}else{
				pendant_mpg_status = MPG_STATUS_ENABLED;
 8000a56:	4b34      	ldr	r3, [pc, #208]	; (8000b28 <process_inputs+0x234>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
 8000a5c:	e002      	b.n	8000a64 <process_inputs+0x170>
			}
		}
	}else{
		button_action_delay_cnt_ch[MPG_BUT_DELAY_CH] = 0;
 8000a5e:	4b31      	ldr	r3, [pc, #196]	; (8000b24 <process_inputs+0x230>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	705a      	strb	r2, [r3, #1]
	}

	// FLOOD coolant status
	if(get_button_state(FLOOD_SW_CH) == GPIO_PIN_RESET){
 8000a64:	200a      	movs	r0, #10
 8000a66:	f7ff fc37 	bl	80002d8 <get_button_state>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d115      	bne.n	8000a9c <process_inputs+0x1a8>
		if(++button_action_delay_cnt_ch[FLOOD_BUT_DELAY_CH] >= button_delay_action_cnt){
 8000a70:	4b2c      	ldr	r3, [pc, #176]	; (8000b24 <process_inputs+0x230>)
 8000a72:	789b      	ldrb	r3, [r3, #2]
 8000a74:	3301      	adds	r3, #1
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <process_inputs+0x230>)
 8000a7a:	709a      	strb	r2, [r3, #2]
 8000a7c:	4b29      	ldr	r3, [pc, #164]	; (8000b24 <process_inputs+0x230>)
 8000a7e:	789b      	ldrb	r3, [r3, #2]
 8000a80:	2204      	movs	r2, #4
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d30d      	bcc.n	8000aa2 <process_inputs+0x1ae>
			button_action_delay_cnt_ch[FLOOD_BUT_DELAY_CH] = 0;
 8000a86:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <process_inputs+0x230>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	709a      	strb	r2, [r3, #2]
			pendant_data.flood = (pendant_data.flood ? false : true);
 8000a8c:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <process_inputs+0x220>)
 8000a8e:	7bdb      	ldrb	r3, [r3, #15]
 8000a90:	f083 0301 	eor.w	r3, r3, #1
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <process_inputs+0x220>)
 8000a98:	73da      	strb	r2, [r3, #15]
 8000a9a:	e002      	b.n	8000aa2 <process_inputs+0x1ae>
		}
	}else{
		button_action_delay_cnt_ch[FLOOD_BUT_DELAY_CH] = 0;
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <process_inputs+0x230>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	709a      	strb	r2, [r3, #2]
	}

	// MIST coolant status
	if(get_button_state(MIST_SW_CH) == GPIO_PIN_RESET){
 8000aa2:	200b      	movs	r0, #11
 8000aa4:	f7ff fc18 	bl	80002d8 <get_button_state>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d115      	bne.n	8000ada <process_inputs+0x1e6>
		if(++button_action_delay_cnt_ch[MIST_BUT_DELAY_CH] >= button_delay_action_cnt){
 8000aae:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <process_inputs+0x230>)
 8000ab0:	78db      	ldrb	r3, [r3, #3]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <process_inputs+0x230>)
 8000ab8:	70da      	strb	r2, [r3, #3]
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <process_inputs+0x230>)
 8000abc:	78db      	ldrb	r3, [r3, #3]
 8000abe:	2204      	movs	r2, #4
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d30d      	bcc.n	8000ae0 <process_inputs+0x1ec>
			button_action_delay_cnt_ch[MIST_BUT_DELAY_CH] = 0;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <process_inputs+0x230>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	70da      	strb	r2, [r3, #3]
			pendant_data.mist = (pendant_data.mist ? false : true);
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <process_inputs+0x220>)
 8000acc:	7c1b      	ldrb	r3, [r3, #16]
 8000ace:	f083 0301 	eor.w	r3, r3, #1
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <process_inputs+0x220>)
 8000ad6:	741a      	strb	r2, [r3, #16]
 8000ad8:	e002      	b.n	8000ae0 <process_inputs+0x1ec>
		}
	}else{
		button_action_delay_cnt_ch[MIST_BUT_DELAY_CH] = 0;
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <process_inputs+0x230>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	70da      	strb	r2, [r3, #3]
	}

	if(get_button_state(HOLD_BUT_CH) == GPIO_PIN_RESET){	// System HOLD status
 8000ae0:	2008      	movs	r0, #8
 8000ae2:	f7ff fbf9 	bl	80002d8 <get_button_state>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d103      	bne.n	8000af4 <process_inputs+0x200>
		pendant_data.system_status = Hold;		// Set system status to Hold
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <process_inputs+0x220>)
 8000aee:	2204      	movs	r2, #4
 8000af0:	735a      	strb	r2, [r3, #13]
	}else if(get_button_state(CYCLE_START_BUT_CH) == GPIO_PIN_RESET){	// System CYCLE START status
		pendant_data.system_status = Idle;		// Set system status to Idle
	}
}
 8000af2:	e008      	b.n	8000b06 <process_inputs+0x212>
	}else if(get_button_state(CYCLE_START_BUT_CH) == GPIO_PIN_RESET){	// System CYCLE START status
 8000af4:	2009      	movs	r0, #9
 8000af6:	f7ff fbef 	bl	80002d8 <get_button_state>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <process_inputs+0x212>
		pendant_data.system_status = Idle;		// Set system status to Idle
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <process_inputs+0x220>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	735a      	strb	r2, [r3, #13]
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200002f1 	.word	0x200002f1
 8000b14:	2000032c 	.word	0x2000032c
 8000b18:	20000148 	.word	0x20000148
 8000b1c:	20000190 	.word	0x20000190
 8000b20:	20000304 	.word	0x20000304
 8000b24:	200002f4 	.word	0x200002f4
 8000b28:	200002f2 	.word	0x200002f2

08000b2c <get_spindle_mode>:

uint8_t get_spindle_mode(void){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
	uint8_t button_states = 0x00;
 8000b32:	2300      	movs	r3, #0
 8000b34:	71fb      	strb	r3, [r7, #7]

	button_states |= (~get_button_state(SPINDLE_3POS_SW_NC_1_CH)) & 0x01;
 8000b36:	2000      	movs	r0, #0
 8000b38:	f7ff fbce 	bl	80002d8 <get_button_state>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	bf0c      	ite	eq
 8000b46:	2301      	moveq	r3, #1
 8000b48:	2300      	movne	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	b25a      	sxtb	r2, r3
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	b25b      	sxtb	r3, r3
 8000b56:	71fb      	strb	r3, [r7, #7]
	button_states |= (((~get_button_state(SPINDLE_3POS_SW_NC_2_CH)) & 0x01) << 1);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff fbbd 	bl	80002d8 <get_button_state>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <get_spindle_mode+0x40>
 8000b68:	2302      	movs	r3, #2
 8000b6a:	e000      	b.n	8000b6e <get_spindle_mode+0x42>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	b25a      	sxtb	r2, r3
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	b25b      	sxtb	r3, r3
 8000b78:	71fb      	strb	r3, [r7, #7]

	if(button_states == 0x03){
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d101      	bne.n	8000b84 <get_spindle_mode+0x58>
		return SPINDLE_MODE_OFF;
 8000b80:	2300      	movs	r3, #0
 8000b82:	e00a      	b.n	8000b9a <get_spindle_mode+0x6e>
	}else if(button_states == 0x01){
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d101      	bne.n	8000b8e <get_spindle_mode+0x62>
		return SPINDLE_MODE_CW;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e005      	b.n	8000b9a <get_spindle_mode+0x6e>
	}else if(button_states == 0x02){
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d101      	bne.n	8000b98 <get_spindle_mode+0x6c>
		return SPINDLE_MODE_CCW;
 8000b94:	2302      	movs	r3, #2
 8000b96:	e000      	b.n	8000b9a <get_spindle_mode+0x6e>
	}

	return SPINDLE_MODE_OFF;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <get_x_axis_multiplier>:

uint8_t get_x_axis_multiplier(void){
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
	uint8_t button_states = 0x00;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	71fb      	strb	r3, [r7, #7]

	button_states |= (~get_button_state(AXIS_X_MULTIPLIER_SW_NC_1_CH)) & 0x01;
 8000bac:	2002      	movs	r0, #2
 8000bae:	f7ff fb93 	bl	80002d8 <get_button_state>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	bf0c      	ite	eq
 8000bbc:	2301      	moveq	r3, #1
 8000bbe:	2300      	movne	r3, #0
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	b25a      	sxtb	r2, r3
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	b25b      	sxtb	r3, r3
 8000bcc:	71fb      	strb	r3, [r7, #7]
	button_states |= (((~get_button_state(AXIS_X_MULTIPLIER_SW_NC_2_CH)) & 0x01) << 1);
 8000bce:	2003      	movs	r0, #3
 8000bd0:	f7ff fb82 	bl	80002d8 <get_button_state>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <get_x_axis_multiplier+0x40>
 8000bde:	2302      	movs	r3, #2
 8000be0:	e000      	b.n	8000be4 <get_x_axis_multiplier+0x42>
 8000be2:	2300      	movs	r3, #0
 8000be4:	b25a      	sxtb	r2, r3
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	71fb      	strb	r3, [r7, #7]

	if(button_states == 0x03){
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d101      	bne.n	8000bfa <get_x_axis_multiplier+0x58>
		return 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e00a      	b.n	8000c10 <get_x_axis_multiplier+0x6e>
	}else if(button_states == 0x01){
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d101      	bne.n	8000c04 <get_x_axis_multiplier+0x62>
		return 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e005      	b.n	8000c10 <get_x_axis_multiplier+0x6e>
	}else if(button_states == 0x02){
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d101      	bne.n	8000c0e <get_x_axis_multiplier+0x6c>
		return 2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	e000      	b.n	8000c10 <get_x_axis_multiplier+0x6e>
	}

	return 0;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <get_yz_axis_multiplier>:

uint8_t get_yz_axis_multiplier(void){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
	uint8_t button_states = 0x00;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]

	button_states |= (~get_button_state(AXIS_YZ_MULTIPLIER_SW_NC_1_CH) & 0x01);
 8000c22:	2004      	movs	r0, #4
 8000c24:	f7ff fb58 	bl	80002d8 <get_button_state>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bf0c      	ite	eq
 8000c32:	2301      	moveq	r3, #1
 8000c34:	2300      	movne	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	b25a      	sxtb	r2, r3
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b25b      	sxtb	r3, r3
 8000c42:	71fb      	strb	r3, [r7, #7]
	button_states |= (((~get_button_state(AXIS_YZ_MULTIPLIER_SW_NC_2_CH)) & 0x01) << 1);
 8000c44:	2005      	movs	r0, #5
 8000c46:	f7ff fb47 	bl	80002d8 <get_button_state>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d101      	bne.n	8000c58 <get_yz_axis_multiplier+0x40>
 8000c54:	2302      	movs	r3, #2
 8000c56:	e000      	b.n	8000c5a <get_yz_axis_multiplier+0x42>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	b25a      	sxtb	r2, r3
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	71fb      	strb	r3, [r7, #7]

	if(button_states == 0x03){
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d101      	bne.n	8000c70 <get_yz_axis_multiplier+0x58>
		return 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e00a      	b.n	8000c86 <get_yz_axis_multiplier+0x6e>
	}else if(button_states == 0x01){
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d101      	bne.n	8000c7a <get_yz_axis_multiplier+0x62>
		return 1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e005      	b.n	8000c86 <get_yz_axis_multiplier+0x6e>
	}else if(button_states == 0x02){
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d101      	bne.n	8000c84 <get_yz_axis_multiplier+0x6c>
		return 2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	e000      	b.n	8000c86 <get_yz_axis_multiplier+0x6e>
	}

	return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c92:	b672      	cpsid	i
}
 8000c94:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <Error_Handler+0x8>

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_MspInit+0x40>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <HAL_MspInit+0x40>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6193      	str	r3, [r2, #24]
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_MspInit+0x40>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_MspInit+0x40>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_MspInit+0x40>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	61d3      	str	r3, [r2, #28]
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_MspInit+0x40>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	40021000 	.word	0x40021000

08000cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a16      	ldr	r2, [pc, #88]	; (8000d44 <HAL_TIM_Base_MspInit+0x68>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d10c      	bne.n	8000d08 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <HAL_TIM_Base_MspInit+0x6c>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <HAL_TIM_Base_MspInit+0x6c>)
 8000cf4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cf8:	6193      	str	r3, [r2, #24]
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <HAL_TIM_Base_MspInit+0x6c>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d06:	e018      	b.n	8000d3a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <HAL_TIM_Base_MspInit+0x70>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d113      	bne.n	8000d3a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_TIM_Base_MspInit+0x6c>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <HAL_TIM_Base_MspInit+0x6c>)
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	61d3      	str	r3, [r2, #28]
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_TIM_Base_MspInit+0x6c>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	f003 0304 	and.w	r3, r3, #4
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	201e      	movs	r0, #30
 8000d30:	f000 fbab 	bl	800148a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d34:	201e      	movs	r0, #30
 8000d36:	f000 fbc4 	bl	80014c2 <HAL_NVIC_EnableIRQ>
}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40012c00 	.word	0x40012c00
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40000800 	.word	0x40000800

08000d50 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0318 	add.w	r3, r7, #24
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d6e:	d124      	bne.n	8000dba <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d70:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	4a27      	ldr	r2, [pc, #156]	; (8000e14 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	61d3      	str	r3, [r2, #28]
 8000d7c:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000d7e:	69db      	ldr	r3, [r3, #28]
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b22      	ldr	r3, [pc, #136]	; (8000e14 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a21      	ldr	r2, [pc, #132]	; (8000e14 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000da0:	2303      	movs	r3, #3
 8000da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0318 	add.w	r3, r7, #24
 8000db0:	4619      	mov	r1, r3
 8000db2:	4819      	ldr	r0, [pc, #100]	; (8000e18 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000db4:	f000 fe42 	bl	8001a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000db8:	e028      	b.n	8000e0c <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM3)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <HAL_TIM_Encoder_MspInit+0xcc>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d123      	bne.n	8000e0c <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000dc6:	69db      	ldr	r3, [r3, #28]
 8000dc8:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	61d3      	str	r3, [r2, #28]
 8000dd0:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000dd2:	69db      	ldr	r3, [r3, #28]
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000df4:	23c0      	movs	r3, #192	; 0xc0
 8000df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 0318 	add.w	r3, r7, #24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4804      	ldr	r0, [pc, #16]	; (8000e18 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000e08:	f000 fe18 	bl	8001a3c <HAL_GPIO_Init>
}
 8000e0c:	bf00      	nop
 8000e0e:	3728      	adds	r7, #40	; 0x28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010800 	.word	0x40010800
 8000e1c:	40000400 	.word	0x40000400

08000e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a46      	ldr	r2, [pc, #280]	; (8000f54 <HAL_UART_MspInit+0x134>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	f040 8084 	bne.w	8000f4a <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e42:	4b45      	ldr	r3, [pc, #276]	; (8000f58 <HAL_UART_MspInit+0x138>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	4a44      	ldr	r2, [pc, #272]	; (8000f58 <HAL_UART_MspInit+0x138>)
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	61d3      	str	r3, [r2, #28]
 8000e4e:	4b42      	ldr	r3, [pc, #264]	; (8000f58 <HAL_UART_MspInit+0x138>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <HAL_UART_MspInit+0x138>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	4a3e      	ldr	r2, [pc, #248]	; (8000f58 <HAL_UART_MspInit+0x138>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6193      	str	r3, [r2, #24]
 8000e66:	4b3c      	ldr	r3, [pc, #240]	; (8000f58 <HAL_UART_MspInit+0x138>)
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e72:	2304      	movs	r3, #4
 8000e74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	4619      	mov	r1, r3
 8000e84:	4835      	ldr	r0, [pc, #212]	; (8000f5c <HAL_UART_MspInit+0x13c>)
 8000e86:	f000 fdd9 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e8a:	2308      	movs	r3, #8
 8000e8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	482f      	ldr	r0, [pc, #188]	; (8000f5c <HAL_UART_MspInit+0x13c>)
 8000e9e:	f000 fdcd 	bl	8001a3c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000ea2:	4b2f      	ldr	r3, [pc, #188]	; (8000f60 <HAL_UART_MspInit+0x140>)
 8000ea4:	4a2f      	ldr	r2, [pc, #188]	; (8000f64 <HAL_UART_MspInit+0x144>)
 8000ea6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea8:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <HAL_UART_MspInit+0x140>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eae:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <HAL_UART_MspInit+0x140>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <HAL_UART_MspInit+0x140>)
 8000eb6:	2280      	movs	r2, #128	; 0x80
 8000eb8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eba:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <HAL_UART_MspInit+0x140>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec0:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <HAL_UART_MspInit+0x140>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <HAL_UART_MspInit+0x140>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ecc:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <HAL_UART_MspInit+0x140>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ed2:	4823      	ldr	r0, [pc, #140]	; (8000f60 <HAL_UART_MspInit+0x140>)
 8000ed4:	f000 fb10 	bl	80014f8 <HAL_DMA_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8000ede:	f7ff fed6 	bl	8000c8e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a1e      	ldr	r2, [pc, #120]	; (8000f60 <HAL_UART_MspInit+0x140>)
 8000ee6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ee8:	4a1d      	ldr	r2, [pc, #116]	; (8000f60 <HAL_UART_MspInit+0x140>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <HAL_UART_MspInit+0x148>)
 8000ef0:	4a1e      	ldr	r2, [pc, #120]	; (8000f6c <HAL_UART_MspInit+0x14c>)
 8000ef2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <HAL_UART_MspInit+0x148>)
 8000ef6:	2210      	movs	r2, #16
 8000ef8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <HAL_UART_MspInit+0x148>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_UART_MspInit+0x148>)
 8000f02:	2280      	movs	r2, #128	; 0x80
 8000f04:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_UART_MspInit+0x148>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_UART_MspInit+0x148>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_UART_MspInit+0x148>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <HAL_UART_MspInit+0x148>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f1e:	4812      	ldr	r0, [pc, #72]	; (8000f68 <HAL_UART_MspInit+0x148>)
 8000f20:	f000 faea 	bl	80014f8 <HAL_DMA_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000f2a:	f7ff feb0 	bl	8000c8e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_UART_MspInit+0x148>)
 8000f32:	639a      	str	r2, [r3, #56]	; 0x38
 8000f34:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <HAL_UART_MspInit+0x148>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2026      	movs	r0, #38	; 0x26
 8000f40:	f000 faa3 	bl	800148a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f44:	2026      	movs	r0, #38	; 0x26
 8000f46:	f000 fabc 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3720      	adds	r7, #32
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40004400 	.word	0x40004400
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010800 	.word	0x40010800
 8000f60:	20000268 	.word	0x20000268
 8000f64:	4002006c 	.word	0x4002006c
 8000f68:	200002ac 	.word	0x200002ac
 8000f6c:	40020080 	.word	0x40020080

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <MemManage_Handler+0x4>

08000f82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr

08000f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr

08000fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr

08000fb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb6:	f000 f975 	bl	80012a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <DMA1_Channel6_IRQHandler+0x10>)
 8000fc6:	f000 fc05 	bl	80017d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000268 	.word	0x20000268

08000fd4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <DMA1_Channel7_IRQHandler+0x10>)
 8000fda:	f000 fbfb 	bl	80017d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200002ac 	.word	0x200002ac

08000fe8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	static uint8_t counter = 0;

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fec:	480b      	ldr	r0, [pc, #44]	; (800101c <TIM4_IRQHandler+0x34>)
 8000fee:	f001 fd5d 	bl	8002aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  update_button_status();
 8000ff2:	f7ff f8ab 	bl	800014c <update_button_status>

  if(++counter >= TIM1_INT_ENTRIES){
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <TIM4_IRQHandler+0x38>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <TIM4_IRQHandler+0x38>)
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <TIM4_IRQHandler+0x38>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b04      	cmp	r3, #4
 8001008:	d905      	bls.n	8001016 <TIM4_IRQHandler+0x2e>
	  counter = 0;
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <TIM4_IRQHandler+0x38>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
	  process_inputs_flag = true;
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <TIM4_IRQHandler+0x3c>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END TIM4_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200001d8 	.word	0x200001d8
 8001020:	20000328 	.word	0x20000328
 8001024:	200002f0 	.word	0x200002f0

08001028 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <USART2_IRQHandler+0x10>)
 800102e:	f002 f9ed 	bl	800340c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000220 	.word	0x20000220

0800103c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 1 */
// CALLBACKS
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART2){
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a3b      	ldr	r2, [pc, #236]	; (800113c <HAL_UARTEx_RxEventCallback+0x100>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d16f      	bne.n	8001132 <HAL_UARTEx_RxEventCallback+0xf6>
		HAL_UART_RxEventTypeTypeDef eventId = HAL_UARTEx_GetRxEventType(huart);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f002 f9cf 	bl	80033f6 <HAL_UARTEx_GetRxEventType>
 8001058:	60f8      	str	r0, [r7, #12]

		if(eventId == HAL_UART_RXEVENT_IDLE || eventId == HAL_UART_RXEVENT_TC){
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d002      	beq.n	8001066 <HAL_UARTEx_RxEventCallback+0x2a>
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d165      	bne.n	8001132 <HAL_UARTEx_RxEventCallback+0xf6>
			if(strstr((char*)uart2_rx_buf, "GET_DATA")){
 8001066:	4936      	ldr	r1, [pc, #216]	; (8001140 <HAL_UARTEx_RxEventCallback+0x104>)
 8001068:	4836      	ldr	r0, [pc, #216]	; (8001144 <HAL_UARTEx_RxEventCallback+0x108>)
 800106a:	f003 f8d9 	bl	8004220 <strstr>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d056      	beq.n	8001122 <HAL_UARTEx_RxEventCallback+0xe6>
				if(Size >= 13){
 8001074:	887b      	ldrh	r3, [r7, #2]
 8001076:	2b0c      	cmp	r3, #12
 8001078:	d951      	bls.n	800111e <HAL_UARTEx_RxEventCallback+0xe2>
					//uint16_t spindle_sw_delay_action = atoi(uart2_rx_buf + 13);	//TODO
					if(uart2_rx_buf[9] == '1'){
 800107a:	4b32      	ldr	r3, [pc, #200]	; (8001144 <HAL_UARTEx_RxEventCallback+0x108>)
 800107c:	7a5b      	ldrb	r3, [r3, #9]
 800107e:	2b31      	cmp	r3, #49	; 0x31
 8001080:	d140      	bne.n	8001104 <HAL_UARTEx_RxEventCallback+0xc8>
						pendant_status = true;
 8001082:	4b31      	ldr	r3, [pc, #196]	; (8001148 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]

						if((pendant_status && uart2_rx_buf[11] == '0' + MPG_STATUS_DISABLED) && (pendant_mpg_status == MPG_STATUS_ENABLED && !pendant_data.mpg)){
 8001088:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <HAL_UARTEx_RxEventCallback+0x10c>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d012      	beq.n	80010b6 <HAL_UARTEx_RxEventCallback+0x7a>
 8001090:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <HAL_UARTEx_RxEventCallback+0x108>)
 8001092:	7adb      	ldrb	r3, [r3, #11]
 8001094:	2b30      	cmp	r3, #48	; 0x30
 8001096:	d10e      	bne.n	80010b6 <HAL_UARTEx_RxEventCallback+0x7a>
 8001098:	4b2c      	ldr	r3, [pc, #176]	; (800114c <HAL_UARTEx_RxEventCallback+0x110>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d10a      	bne.n	80010b6 <HAL_UARTEx_RxEventCallback+0x7a>
 80010a0:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <HAL_UARTEx_RxEventCallback+0x114>)
 80010a2:	7b9b      	ldrb	r3, [r3, #14]
 80010a4:	f083 0301 	eor.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_UARTEx_RxEventCallback+0x7a>
							pendant_data.mpg = true;
 80010ae:	4b28      	ldr	r3, [pc, #160]	; (8001150 <HAL_UARTEx_RxEventCallback+0x114>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	739a      	strb	r2, [r3, #14]
 80010b4:	e033      	b.n	800111e <HAL_UARTEx_RxEventCallback+0xe2>
						}else if(pendant_status == MPG_STATUS_ENABLED && uart2_rx_buf[11] == '0' + MPG_STATUS_DISABLED){
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <HAL_UARTEx_RxEventCallback+0x10c>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00a      	beq.n	80010d4 <HAL_UARTEx_RxEventCallback+0x98>
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <HAL_UARTEx_RxEventCallback+0x108>)
 80010c0:	7adb      	ldrb	r3, [r3, #11]
 80010c2:	2b30      	cmp	r3, #48	; 0x30
 80010c4:	d106      	bne.n	80010d4 <HAL_UARTEx_RxEventCallback+0x98>
							pendant_mpg_status = MPG_STATUS_DISABLED;
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <HAL_UARTEx_RxEventCallback+0x110>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
							pendant_data.mpg = false;
 80010cc:	4b20      	ldr	r3, [pc, #128]	; (8001150 <HAL_UARTEx_RxEventCallback+0x114>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	739a      	strb	r2, [r3, #14]
 80010d2:	e024      	b.n	800111e <HAL_UARTEx_RxEventCallback+0xe2>
						}else if(pendant_mpg_status == MPG_STATUS_DISABLED && uart2_rx_buf[11] == '0' + MPG_STATUS_ENABLED){
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <HAL_UARTEx_RxEventCallback+0x110>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d107      	bne.n	80010ec <HAL_UARTEx_RxEventCallback+0xb0>
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_UARTEx_RxEventCallback+0x108>)
 80010de:	7adb      	ldrb	r3, [r3, #11]
 80010e0:	2b31      	cmp	r3, #49	; 0x31
 80010e2:	d103      	bne.n	80010ec <HAL_UARTEx_RxEventCallback+0xb0>
							pendant_data.mpg = false;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <HAL_UARTEx_RxEventCallback+0x114>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	739a      	strb	r2, [r3, #14]
 80010ea:	e018      	b.n	800111e <HAL_UARTEx_RxEventCallback+0xe2>
						}else if(pendant_mpg_status == MPG_STATUS_ENABLED && uart2_rx_buf[11] == '0' + MPG_STATUS_ENABLE_ONGOING){
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_UARTEx_RxEventCallback+0x110>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d114      	bne.n	800111e <HAL_UARTEx_RxEventCallback+0xe2>
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <HAL_UARTEx_RxEventCallback+0x108>)
 80010f6:	7adb      	ldrb	r3, [r3, #11]
 80010f8:	2b32      	cmp	r3, #50	; 0x32
 80010fa:	d110      	bne.n	800111e <HAL_UARTEx_RxEventCallback+0xe2>
							pendant_data.mpg = true;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <HAL_UARTEx_RxEventCallback+0x114>)
 80010fe:	2201      	movs	r2, #1
 8001100:	739a      	strb	r2, [r3, #14]
 8001102:	e00c      	b.n	800111e <HAL_UARTEx_RxEventCallback+0xe2>
						}
					}else if(uart2_rx_buf[9] == '0'){
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_UARTEx_RxEventCallback+0x108>)
 8001106:	7a5b      	ldrb	r3, [r3, #9]
 8001108:	2b30      	cmp	r3, #48	; 0x30
 800110a:	d108      	bne.n	800111e <HAL_UARTEx_RxEventCallback+0xe2>
						pendant_status = false;
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <HAL_UARTEx_RxEventCallback+0x10c>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
						pendant_mpg_status = MPG_STATUS_DISABLED;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_UARTEx_RxEventCallback+0x110>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
						pendant_data.mpg = false;
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <HAL_UARTEx_RxEventCallback+0x114>)
 800111a:	2200      	movs	r2, #0
 800111c:	739a      	strb	r2, [r3, #14]
					}
				}
				send_system_data();
 800111e:	f000 f839 	bl	8001194 <send_system_data>
			}

			memset(uart2_rx_buf, 0, Size);
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	461a      	mov	r2, r3
 8001126:	2100      	movs	r1, #0
 8001128:	4806      	ldr	r0, [pc, #24]	; (8001144 <HAL_UARTEx_RxEventCallback+0x108>)
 800112a:	f003 f871 	bl	8004210 <memset>
			start_uart2_reception();
 800112e:	f000 f811 	bl	8001154 <start_uart2_reception>
		}
	}
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40004400 	.word	0x40004400
 8001140:	080042ac 	.word	0x080042ac
 8001144:	20000308 	.word	0x20000308
 8001148:	200002f1 	.word	0x200002f1
 800114c:	200002f2 	.word	0x200002f2
 8001150:	2000032c 	.word	0x2000032c

08001154 <start_uart2_reception>:


// CUSTOM FUCNTIONS
void start_uart2_reception(void){
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	if(HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart2_rx_buf, UART_BUF_SIZE) == HAL_OK){
 8001158:	2220      	movs	r2, #32
 800115a:	4908      	ldr	r1, [pc, #32]	; (800117c <start_uart2_reception+0x28>)
 800115c:	4808      	ldr	r0, [pc, #32]	; (8001180 <start_uart2_reception+0x2c>)
 800115e:	f002 f8ed 	bl	800333c <HAL_UARTEx_ReceiveToIdle_DMA>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d107      	bne.n	8001178 <start_uart2_reception+0x24>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <start_uart2_reception+0x30>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <start_uart2_reception+0x30>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0204 	bic.w	r2, r2, #4
 8001176:	601a      	str	r2, [r3, #0]
	}
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000308 	.word	0x20000308
 8001180:	20000220 	.word	0x20000220
 8001184:	20000268 	.word	0x20000268

08001188 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <send_system_data>:


/* Private function prototypes -----------------------------------------------*/

/* Private user code ---------------------------------------------------------*/
void send_system_data(void){
 8001194:	b5b0      	push	{r4, r5, r7, lr}
 8001196:	af00      	add	r7, sp, #0
	memset(uart2_tx_buf, 0, UART_BUF_SIZE);
 8001198:	2220      	movs	r2, #32
 800119a:	2100      	movs	r1, #0
 800119c:	4808      	ldr	r0, [pc, #32]	; (80011c0 <send_system_data+0x2c>)
 800119e:	f003 f837 	bl	8004210 <memset>
	memcpy(uart2_tx_buf, &pendant_data, sizeof(pendant_data_t));
 80011a2:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <send_system_data+0x2c>)
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <send_system_data+0x30>)
 80011a6:	4614      	mov	r4, r2
 80011a8:	461d      	mov	r5, r3
 80011aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ae:	682b      	ldr	r3, [r5, #0]
 80011b0:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit_DMA(&huart2, uart2_tx_buf, sizeof(pendant_data_t));
 80011b2:	2214      	movs	r2, #20
 80011b4:	4902      	ldr	r1, [pc, #8]	; (80011c0 <send_system_data+0x2c>)
 80011b6:	4804      	ldr	r0, [pc, #16]	; (80011c8 <send_system_data+0x34>)
 80011b8:	f002 f850 	bl	800325c <HAL_UART_Transmit_DMA>
}
 80011bc:	bf00      	nop
 80011be:	bdb0      	pop	{r4, r5, r7, pc}
 80011c0:	20000340 	.word	0x20000340
 80011c4:	2000032c 	.word	0x2000032c
 80011c8:	20000220 	.word	0x20000220

080011cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011cc:	f7ff ffdc 	bl	8001188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d0:	480b      	ldr	r0, [pc, #44]	; (8001200 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011d2:	490c      	ldr	r1, [pc, #48]	; (8001204 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011d4:	4a0c      	ldr	r2, [pc, #48]	; (8001208 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e6:	4a09      	ldr	r2, [pc, #36]	; (800120c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011e8:	4c09      	ldr	r4, [pc, #36]	; (8001210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f6:	f003 f829 	bl	800424c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011fa:	f7ff f87d 	bl	80002f8 <main>
  bx lr
 80011fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001204:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001208:	080042ec 	.word	0x080042ec
  ldr r2, =_sbss
 800120c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001210:	20000364 	.word	0x20000364

08001214 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC1_2_IRQHandler>
	...

08001218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_Init+0x28>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <HAL_Init+0x28>)
 8001222:	f043 0310 	orr.w	r3, r3, #16
 8001226:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001228:	2003      	movs	r0, #3
 800122a:	f000 f923 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122e:	200f      	movs	r0, #15
 8001230:	f000 f808 	bl	8001244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001234:	f7ff fd30 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40022000 	.word	0x40022000

08001244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x54>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x58>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	fbb3 f3f1 	udiv	r3, r3, r1
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f93b 	bl	80014de <HAL_SYSTICK_Config>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e00e      	b.n	8001290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d80a      	bhi.n	800128e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f000 f903 	bl	800148a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <HAL_InitTick+0x5c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e000      	b.n	8001290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000004 	.word	0x20000004
 800129c:	2000000c 	.word	0x2000000c
 80012a0:	20000008 	.word	0x20000008

080012a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_IncTick+0x1c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <HAL_IncTick+0x20>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a03      	ldr	r2, [pc, #12]	; (80012c4 <HAL_IncTick+0x20>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	2000000c 	.word	0x2000000c
 80012c4:	20000360 	.word	0x20000360

080012c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;
 80012cc:	4b02      	ldr	r3, [pc, #8]	; (80012d8 <HAL_GetTick+0x10>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	20000360 	.word	0x20000360

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4906      	ldr	r1, [pc, #24]	; (8001374 <__NVIC_EnableIRQ+0x34>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
         );
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001440:	d301      	bcc.n	8001446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001442:	2301      	movs	r3, #1
 8001444:	e00f      	b.n	8001466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <SysTick_Config+0x40>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144e:	210f      	movs	r1, #15
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f7ff ff90 	bl	8001378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <SysTick_Config+0x40>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <SysTick_Config+0x40>)
 8001460:	2207      	movs	r2, #7
 8001462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	e000e010 	.word	0xe000e010

08001474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff2d 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800149c:	f7ff ff42 	bl	8001324 <__NVIC_GetPriorityGrouping>
 80014a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f7ff ff90 	bl	80013cc <NVIC_EncodePriority>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff5f 	bl	8001378 <__NVIC_SetPriority>
}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff35 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffa2 	bl	8001430 <SysTick_Config>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e043      	b.n	8001596 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <HAL_DMA_Init+0xa8>)
 8001516:	4413      	add	r3, r2
 8001518:	4a22      	ldr	r2, [pc, #136]	; (80015a4 <HAL_DMA_Init+0xac>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	009a      	lsls	r2, r3, #2
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a1f      	ldr	r2, [pc, #124]	; (80015a8 <HAL_DMA_Init+0xb0>)
 800152a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2202      	movs	r2, #2
 8001530:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001542:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001546:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001550:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800155c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001568:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	bffdfff8 	.word	0xbffdfff8
 80015a4:	cccccccd 	.word	0xcccccccd
 80015a8:	40020000 	.word	0x40020000

080015ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_DMA_Start_IT+0x20>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e04b      	b.n	8001664 <HAL_DMA_Start_IT+0xb8>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d13a      	bne.n	8001656 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0201 	bic.w	r2, r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	68b9      	ldr	r1, [r7, #8]
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 f9eb 	bl	80019e0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	2b00      	cmp	r3, #0
 8001610:	d008      	beq.n	8001624 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f042 020e 	orr.w	r2, r2, #14
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	e00f      	b.n	8001644 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0204 	bic.w	r2, r2, #4
 8001632:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 020a 	orr.w	r2, r2, #10
 8001642:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	e005      	b.n	8001662 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800165e:	2302      	movs	r3, #2
 8001660:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001662:	7dfb      	ldrb	r3, [r7, #23]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d008      	beq.n	8001696 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2204      	movs	r2, #4
 8001688:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e020      	b.n	80016d8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 020e 	bic.w	r2, r2, #14
 80016a4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0201 	bic.w	r2, r2, #1
 80016b4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016be:	2101      	movs	r1, #1
 80016c0:	fa01 f202 	lsl.w	r2, r1, r2
 80016c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
	...

080016e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d005      	beq.n	8001708 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2204      	movs	r2, #4
 8001700:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	e051      	b.n	80017ac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 020e 	bic.w	r2, r2, #14
 8001716:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0201 	bic.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a22      	ldr	r2, [pc, #136]	; (80017b8 <HAL_DMA_Abort_IT+0xd4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d029      	beq.n	8001786 <HAL_DMA_Abort_IT+0xa2>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a21      	ldr	r2, [pc, #132]	; (80017bc <HAL_DMA_Abort_IT+0xd8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d022      	beq.n	8001782 <HAL_DMA_Abort_IT+0x9e>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a1f      	ldr	r2, [pc, #124]	; (80017c0 <HAL_DMA_Abort_IT+0xdc>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d01a      	beq.n	800177c <HAL_DMA_Abort_IT+0x98>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1e      	ldr	r2, [pc, #120]	; (80017c4 <HAL_DMA_Abort_IT+0xe0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d012      	beq.n	8001776 <HAL_DMA_Abort_IT+0x92>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <HAL_DMA_Abort_IT+0xe4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d00a      	beq.n	8001770 <HAL_DMA_Abort_IT+0x8c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <HAL_DMA_Abort_IT+0xe8>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d102      	bne.n	800176a <HAL_DMA_Abort_IT+0x86>
 8001764:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001768:	e00e      	b.n	8001788 <HAL_DMA_Abort_IT+0xa4>
 800176a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800176e:	e00b      	b.n	8001788 <HAL_DMA_Abort_IT+0xa4>
 8001770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001774:	e008      	b.n	8001788 <HAL_DMA_Abort_IT+0xa4>
 8001776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177a:	e005      	b.n	8001788 <HAL_DMA_Abort_IT+0xa4>
 800177c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001780:	e002      	b.n	8001788 <HAL_DMA_Abort_IT+0xa4>
 8001782:	2310      	movs	r3, #16
 8001784:	e000      	b.n	8001788 <HAL_DMA_Abort_IT+0xa4>
 8001786:	2301      	movs	r3, #1
 8001788:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <HAL_DMA_Abort_IT+0xec>)
 800178a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	4798      	blx	r3
    } 
  }
  return status;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40020008 	.word	0x40020008
 80017bc:	4002001c 	.word	0x4002001c
 80017c0:	40020030 	.word	0x40020030
 80017c4:	40020044 	.word	0x40020044
 80017c8:	40020058 	.word	0x40020058
 80017cc:	4002006c 	.word	0x4002006c
 80017d0:	40020000 	.word	0x40020000

080017d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	2204      	movs	r2, #4
 80017f2:	409a      	lsls	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d04f      	beq.n	800189c <HAL_DMA_IRQHandler+0xc8>
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	2b00      	cmp	r3, #0
 8001804:	d04a      	beq.n	800189c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0320 	and.w	r3, r3, #32
 8001810:	2b00      	cmp	r3, #0
 8001812:	d107      	bne.n	8001824 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0204 	bic.w	r2, r2, #4
 8001822:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a66      	ldr	r2, [pc, #408]	; (80019c4 <HAL_DMA_IRQHandler+0x1f0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d029      	beq.n	8001882 <HAL_DMA_IRQHandler+0xae>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a65      	ldr	r2, [pc, #404]	; (80019c8 <HAL_DMA_IRQHandler+0x1f4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d022      	beq.n	800187e <HAL_DMA_IRQHandler+0xaa>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a63      	ldr	r2, [pc, #396]	; (80019cc <HAL_DMA_IRQHandler+0x1f8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d01a      	beq.n	8001878 <HAL_DMA_IRQHandler+0xa4>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a62      	ldr	r2, [pc, #392]	; (80019d0 <HAL_DMA_IRQHandler+0x1fc>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d012      	beq.n	8001872 <HAL_DMA_IRQHandler+0x9e>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a60      	ldr	r2, [pc, #384]	; (80019d4 <HAL_DMA_IRQHandler+0x200>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d00a      	beq.n	800186c <HAL_DMA_IRQHandler+0x98>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a5f      	ldr	r2, [pc, #380]	; (80019d8 <HAL_DMA_IRQHandler+0x204>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d102      	bne.n	8001866 <HAL_DMA_IRQHandler+0x92>
 8001860:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001864:	e00e      	b.n	8001884 <HAL_DMA_IRQHandler+0xb0>
 8001866:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800186a:	e00b      	b.n	8001884 <HAL_DMA_IRQHandler+0xb0>
 800186c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001870:	e008      	b.n	8001884 <HAL_DMA_IRQHandler+0xb0>
 8001872:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001876:	e005      	b.n	8001884 <HAL_DMA_IRQHandler+0xb0>
 8001878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800187c:	e002      	b.n	8001884 <HAL_DMA_IRQHandler+0xb0>
 800187e:	2340      	movs	r3, #64	; 0x40
 8001880:	e000      	b.n	8001884 <HAL_DMA_IRQHandler+0xb0>
 8001882:	2304      	movs	r3, #4
 8001884:	4a55      	ldr	r2, [pc, #340]	; (80019dc <HAL_DMA_IRQHandler+0x208>)
 8001886:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8094 	beq.w	80019ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800189a:	e08e      	b.n	80019ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	2202      	movs	r2, #2
 80018a2:	409a      	lsls	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d056      	beq.n	800195a <HAL_DMA_IRQHandler+0x186>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d051      	beq.n	800195a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0320 	and.w	r3, r3, #32
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10b      	bne.n	80018dc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 020a 	bic.w	r2, r2, #10
 80018d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a38      	ldr	r2, [pc, #224]	; (80019c4 <HAL_DMA_IRQHandler+0x1f0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d029      	beq.n	800193a <HAL_DMA_IRQHandler+0x166>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a37      	ldr	r2, [pc, #220]	; (80019c8 <HAL_DMA_IRQHandler+0x1f4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d022      	beq.n	8001936 <HAL_DMA_IRQHandler+0x162>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a35      	ldr	r2, [pc, #212]	; (80019cc <HAL_DMA_IRQHandler+0x1f8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d01a      	beq.n	8001930 <HAL_DMA_IRQHandler+0x15c>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a34      	ldr	r2, [pc, #208]	; (80019d0 <HAL_DMA_IRQHandler+0x1fc>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d012      	beq.n	800192a <HAL_DMA_IRQHandler+0x156>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a32      	ldr	r2, [pc, #200]	; (80019d4 <HAL_DMA_IRQHandler+0x200>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d00a      	beq.n	8001924 <HAL_DMA_IRQHandler+0x150>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a31      	ldr	r2, [pc, #196]	; (80019d8 <HAL_DMA_IRQHandler+0x204>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d102      	bne.n	800191e <HAL_DMA_IRQHandler+0x14a>
 8001918:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800191c:	e00e      	b.n	800193c <HAL_DMA_IRQHandler+0x168>
 800191e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001922:	e00b      	b.n	800193c <HAL_DMA_IRQHandler+0x168>
 8001924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001928:	e008      	b.n	800193c <HAL_DMA_IRQHandler+0x168>
 800192a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192e:	e005      	b.n	800193c <HAL_DMA_IRQHandler+0x168>
 8001930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001934:	e002      	b.n	800193c <HAL_DMA_IRQHandler+0x168>
 8001936:	2320      	movs	r3, #32
 8001938:	e000      	b.n	800193c <HAL_DMA_IRQHandler+0x168>
 800193a:	2302      	movs	r3, #2
 800193c:	4a27      	ldr	r2, [pc, #156]	; (80019dc <HAL_DMA_IRQHandler+0x208>)
 800193e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194c:	2b00      	cmp	r3, #0
 800194e:	d034      	beq.n	80019ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001958:	e02f      	b.n	80019ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	2208      	movs	r2, #8
 8001960:	409a      	lsls	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4013      	ands	r3, r2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d028      	beq.n	80019bc <HAL_DMA_IRQHandler+0x1e8>
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d023      	beq.n	80019bc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 020e 	bic.w	r2, r2, #14
 8001982:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198c:	2101      	movs	r1, #1
 800198e:	fa01 f202 	lsl.w	r2, r1, r2
 8001992:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	4798      	blx	r3
    }
  }
  return;
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
}
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40020008 	.word	0x40020008
 80019c8:	4002001c 	.word	0x4002001c
 80019cc:	40020030 	.word	0x40020030
 80019d0:	40020044 	.word	0x40020044
 80019d4:	40020058 	.word	0x40020058
 80019d8:	4002006c 	.word	0x4002006c
 80019dc:	40020000 	.word	0x40020000

080019e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f6:	2101      	movs	r1, #1
 80019f8:	fa01 f202 	lsl.w	r2, r1, r2
 80019fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d108      	bne.n	8001a20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a1e:	e007      	b.n	8001a30 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	60da      	str	r2, [r3, #12]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
	...

08001a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b08b      	sub	sp, #44	; 0x2c
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a46:	2300      	movs	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4e:	e169      	b.n	8001d24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a50:	2201      	movs	r2, #1
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	f040 8158 	bne.w	8001d1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a9a      	ldr	r2, [pc, #616]	; (8001cdc <HAL_GPIO_Init+0x2a0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d05e      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001a78:	4a98      	ldr	r2, [pc, #608]	; (8001cdc <HAL_GPIO_Init+0x2a0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d875      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001a7e:	4a98      	ldr	r2, [pc, #608]	; (8001ce0 <HAL_GPIO_Init+0x2a4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d058      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001a84:	4a96      	ldr	r2, [pc, #600]	; (8001ce0 <HAL_GPIO_Init+0x2a4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d86f      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001a8a:	4a96      	ldr	r2, [pc, #600]	; (8001ce4 <HAL_GPIO_Init+0x2a8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d052      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001a90:	4a94      	ldr	r2, [pc, #592]	; (8001ce4 <HAL_GPIO_Init+0x2a8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d869      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001a96:	4a94      	ldr	r2, [pc, #592]	; (8001ce8 <HAL_GPIO_Init+0x2ac>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d04c      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001a9c:	4a92      	ldr	r2, [pc, #584]	; (8001ce8 <HAL_GPIO_Init+0x2ac>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d863      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001aa2:	4a92      	ldr	r2, [pc, #584]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d046      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
 8001aa8:	4a90      	ldr	r2, [pc, #576]	; (8001cec <HAL_GPIO_Init+0x2b0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d85d      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001aae:	2b12      	cmp	r3, #18
 8001ab0:	d82a      	bhi.n	8001b08 <HAL_GPIO_Init+0xcc>
 8001ab2:	2b12      	cmp	r3, #18
 8001ab4:	d859      	bhi.n	8001b6a <HAL_GPIO_Init+0x12e>
 8001ab6:	a201      	add	r2, pc, #4	; (adr r2, 8001abc <HAL_GPIO_Init+0x80>)
 8001ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abc:	08001b37 	.word	0x08001b37
 8001ac0:	08001b11 	.word	0x08001b11
 8001ac4:	08001b23 	.word	0x08001b23
 8001ac8:	08001b65 	.word	0x08001b65
 8001acc:	08001b6b 	.word	0x08001b6b
 8001ad0:	08001b6b 	.word	0x08001b6b
 8001ad4:	08001b6b 	.word	0x08001b6b
 8001ad8:	08001b6b 	.word	0x08001b6b
 8001adc:	08001b6b 	.word	0x08001b6b
 8001ae0:	08001b6b 	.word	0x08001b6b
 8001ae4:	08001b6b 	.word	0x08001b6b
 8001ae8:	08001b6b 	.word	0x08001b6b
 8001aec:	08001b6b 	.word	0x08001b6b
 8001af0:	08001b6b 	.word	0x08001b6b
 8001af4:	08001b6b 	.word	0x08001b6b
 8001af8:	08001b6b 	.word	0x08001b6b
 8001afc:	08001b6b 	.word	0x08001b6b
 8001b00:	08001b19 	.word	0x08001b19
 8001b04:	08001b2d 	.word	0x08001b2d
 8001b08:	4a79      	ldr	r2, [pc, #484]	; (8001cf0 <HAL_GPIO_Init+0x2b4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b0e:	e02c      	b.n	8001b6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	623b      	str	r3, [r7, #32]
          break;
 8001b16:	e029      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	623b      	str	r3, [r7, #32]
          break;
 8001b20:	e024      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	3308      	adds	r3, #8
 8001b28:	623b      	str	r3, [r7, #32]
          break;
 8001b2a:	e01f      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	330c      	adds	r3, #12
 8001b32:	623b      	str	r3, [r7, #32]
          break;
 8001b34:	e01a      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d102      	bne.n	8001b44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	623b      	str	r3, [r7, #32]
          break;
 8001b42:	e013      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	611a      	str	r2, [r3, #16]
          break;
 8001b56:	e009      	b.n	8001b6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	615a      	str	r2, [r3, #20]
          break;
 8001b62:	e003      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
          break;
 8001b68:	e000      	b.n	8001b6c <HAL_GPIO_Init+0x130>
          break;
 8001b6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2bff      	cmp	r3, #255	; 0xff
 8001b70:	d801      	bhi.n	8001b76 <HAL_GPIO_Init+0x13a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	e001      	b.n	8001b7a <HAL_GPIO_Init+0x13e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2bff      	cmp	r3, #255	; 0xff
 8001b80:	d802      	bhi.n	8001b88 <HAL_GPIO_Init+0x14c>
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	e002      	b.n	8001b8e <HAL_GPIO_Init+0x152>
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	3b08      	subs	r3, #8
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	210f      	movs	r1, #15
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	6a39      	ldr	r1, [r7, #32]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 80b1 	beq.w	8001d1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bbc:	4b4d      	ldr	r3, [pc, #308]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a4c      	ldr	r2, [pc, #304]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b4a      	ldr	r3, [pc, #296]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bd4:	4a48      	ldr	r2, [pc, #288]	; (8001cf8 <HAL_GPIO_Init+0x2bc>)
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a40      	ldr	r2, [pc, #256]	; (8001cfc <HAL_GPIO_Init+0x2c0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d013      	beq.n	8001c28 <HAL_GPIO_Init+0x1ec>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a3f      	ldr	r2, [pc, #252]	; (8001d00 <HAL_GPIO_Init+0x2c4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d00d      	beq.n	8001c24 <HAL_GPIO_Init+0x1e8>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a3e      	ldr	r2, [pc, #248]	; (8001d04 <HAL_GPIO_Init+0x2c8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d007      	beq.n	8001c20 <HAL_GPIO_Init+0x1e4>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a3d      	ldr	r2, [pc, #244]	; (8001d08 <HAL_GPIO_Init+0x2cc>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d101      	bne.n	8001c1c <HAL_GPIO_Init+0x1e0>
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e006      	b.n	8001c2a <HAL_GPIO_Init+0x1ee>
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	e004      	b.n	8001c2a <HAL_GPIO_Init+0x1ee>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e002      	b.n	8001c2a <HAL_GPIO_Init+0x1ee>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_GPIO_Init+0x1ee>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2c:	f002 0203 	and.w	r2, r2, #3
 8001c30:	0092      	lsls	r2, r2, #2
 8001c32:	4093      	lsls	r3, r2
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c3a:	492f      	ldr	r1, [pc, #188]	; (8001cf8 <HAL_GPIO_Init+0x2bc>)
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d006      	beq.n	8001c62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c54:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	492c      	ldr	r1, [pc, #176]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	608b      	str	r3, [r1, #8]
 8001c60:	e006      	b.n	8001c70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c62:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4928      	ldr	r1, [pc, #160]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c7c:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	4922      	ldr	r1, [pc, #136]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	60cb      	str	r3, [r1, #12]
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	491e      	ldr	r1, [pc, #120]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4918      	ldr	r1, [pc, #96]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cb2:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4914      	ldr	r1, [pc, #80]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d021      	beq.n	8001d10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	490e      	ldr	r1, [pc, #56]	; (8001d0c <HAL_GPIO_Init+0x2d0>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]
 8001cd8:	e021      	b.n	8001d1e <HAL_GPIO_Init+0x2e2>
 8001cda:	bf00      	nop
 8001cdc:	10320000 	.word	0x10320000
 8001ce0:	10310000 	.word	0x10310000
 8001ce4:	10220000 	.word	0x10220000
 8001ce8:	10210000 	.word	0x10210000
 8001cec:	10120000 	.word	0x10120000
 8001cf0:	10110000 	.word	0x10110000
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40010800 	.word	0x40010800
 8001d00:	40010c00 	.word	0x40010c00
 8001d04:	40011000 	.word	0x40011000
 8001d08:	40011400 	.word	0x40011400
 8001d0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_GPIO_Init+0x304>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	4909      	ldr	r1, [pc, #36]	; (8001d40 <HAL_GPIO_Init+0x304>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	3301      	adds	r3, #1
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f47f ae8e 	bne.w	8001a50 <HAL_GPIO_Init+0x14>
  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	372c      	adds	r7, #44	; 0x2c
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40010400 	.word	0x40010400

08001d44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	887b      	ldrh	r3, [r7, #2]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	e001      	b.n	8001d66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	807b      	strh	r3, [r7, #2]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d82:	787b      	ldrb	r3, [r7, #1]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d88:	887a      	ldrh	r2, [r7, #2]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d8e:	e003      	b.n	8001d98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d90:	887b      	ldrh	r3, [r7, #2]
 8001d92:	041a      	lsls	r2, r3, #16
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	611a      	str	r2, [r3, #16]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e272      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 8087 	beq.w	8001ed2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dc4:	4b92      	ldr	r3, [pc, #584]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d00c      	beq.n	8001dea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dd0:	4b8f      	ldr	r3, [pc, #572]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d112      	bne.n	8001e02 <HAL_RCC_OscConfig+0x5e>
 8001ddc:	4b8c      	ldr	r3, [pc, #560]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de8:	d10b      	bne.n	8001e02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dea:	4b89      	ldr	r3, [pc, #548]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d06c      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x12c>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d168      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e24c      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x76>
 8001e0c:	4b80      	ldr	r3, [pc, #512]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a7f      	ldr	r2, [pc, #508]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	e02e      	b.n	8001e78 <HAL_RCC_OscConfig+0xd4>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x98>
 8001e22:	4b7b      	ldr	r3, [pc, #492]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a7a      	ldr	r2, [pc, #488]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b78      	ldr	r3, [pc, #480]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a77      	ldr	r2, [pc, #476]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e01d      	b.n	8001e78 <HAL_RCC_OscConfig+0xd4>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0xbc>
 8001e46:	4b72      	ldr	r3, [pc, #456]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a71      	ldr	r2, [pc, #452]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	4b6f      	ldr	r3, [pc, #444]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a6e      	ldr	r2, [pc, #440]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e00b      	b.n	8001e78 <HAL_RCC_OscConfig+0xd4>
 8001e60:	4b6b      	ldr	r3, [pc, #428]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a6a      	ldr	r2, [pc, #424]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4b68      	ldr	r3, [pc, #416]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a67      	ldr	r2, [pc, #412]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d013      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff fa22 	bl	80012c8 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff fa1e 	bl	80012c8 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e200      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9a:	4b5d      	ldr	r3, [pc, #372]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0xe4>
 8001ea6:	e014      	b.n	8001ed2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fa0e 	bl	80012c8 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7ff fa0a 	bl	80012c8 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	; 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e1ec      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec2:	4b53      	ldr	r3, [pc, #332]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x10c>
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d063      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ede:	4b4c      	ldr	r3, [pc, #304]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00b      	beq.n	8001f02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eea:	4b49      	ldr	r3, [pc, #292]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d11c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x18c>
 8001ef6:	4b46      	ldr	r3, [pc, #280]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d116      	bne.n	8001f30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	4b43      	ldr	r3, [pc, #268]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_RCC_OscConfig+0x176>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d001      	beq.n	8001f1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e1c0      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1a:	4b3d      	ldr	r3, [pc, #244]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4939      	ldr	r1, [pc, #228]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2e:	e03a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d020      	beq.n	8001f7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f38:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff f9c3 	bl	80012c8 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f46:	f7ff f9bf 	bl	80012c8 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e1a1      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f58:	4b2d      	ldr	r3, [pc, #180]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4927      	ldr	r1, [pc, #156]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]
 8001f78:	e015      	b.n	8001fa6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7a:	4b26      	ldr	r3, [pc, #152]	; (8002014 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff f9a2 	bl	80012c8 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f88:	f7ff f99e 	bl	80012c8 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e180      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d03a      	beq.n	8002028 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d019      	beq.n	8001fee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fba:	4b17      	ldr	r3, [pc, #92]	; (8002018 <HAL_RCC_OscConfig+0x274>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc0:	f7ff f982 	bl	80012c8 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7ff f97e 	bl	80012c8 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e160      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f000 face 	bl	8002588 <RCC_Delay>
 8001fec:	e01c      	b.n	8002028 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_RCC_OscConfig+0x274>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff4:	f7ff f968 	bl	80012c8 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffa:	e00f      	b.n	800201c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ffc:	f7ff f964 	bl	80012c8 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d908      	bls.n	800201c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e146      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	42420000 	.word	0x42420000
 8002018:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201c:	4b92      	ldr	r3, [pc, #584]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e9      	bne.n	8001ffc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80a6 	beq.w	8002182 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203a:	4b8b      	ldr	r3, [pc, #556]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10d      	bne.n	8002062 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	4b88      	ldr	r3, [pc, #544]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	4a87      	ldr	r2, [pc, #540]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002050:	61d3      	str	r3, [r2, #28]
 8002052:	4b85      	ldr	r3, [pc, #532]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205e:	2301      	movs	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002062:	4b82      	ldr	r3, [pc, #520]	; (800226c <HAL_RCC_OscConfig+0x4c8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d118      	bne.n	80020a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206e:	4b7f      	ldr	r3, [pc, #508]	; (800226c <HAL_RCC_OscConfig+0x4c8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a7e      	ldr	r2, [pc, #504]	; (800226c <HAL_RCC_OscConfig+0x4c8>)
 8002074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207a:	f7ff f925 	bl	80012c8 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002082:	f7ff f921 	bl	80012c8 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b64      	cmp	r3, #100	; 0x64
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e103      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	4b75      	ldr	r3, [pc, #468]	; (800226c <HAL_RCC_OscConfig+0x4c8>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x312>
 80020a8:	4b6f      	ldr	r3, [pc, #444]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	4a6e      	ldr	r2, [pc, #440]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6213      	str	r3, [r2, #32]
 80020b4:	e02d      	b.n	8002112 <HAL_RCC_OscConfig+0x36e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x334>
 80020be:	4b6a      	ldr	r3, [pc, #424]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	4a69      	ldr	r2, [pc, #420]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	f023 0301 	bic.w	r3, r3, #1
 80020c8:	6213      	str	r3, [r2, #32]
 80020ca:	4b67      	ldr	r3, [pc, #412]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	4a66      	ldr	r2, [pc, #408]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	f023 0304 	bic.w	r3, r3, #4
 80020d4:	6213      	str	r3, [r2, #32]
 80020d6:	e01c      	b.n	8002112 <HAL_RCC_OscConfig+0x36e>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d10c      	bne.n	80020fa <HAL_RCC_OscConfig+0x356>
 80020e0:	4b61      	ldr	r3, [pc, #388]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4a60      	ldr	r2, [pc, #384]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	6213      	str	r3, [r2, #32]
 80020ec:	4b5e      	ldr	r3, [pc, #376]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4a5d      	ldr	r2, [pc, #372]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6213      	str	r3, [r2, #32]
 80020f8:	e00b      	b.n	8002112 <HAL_RCC_OscConfig+0x36e>
 80020fa:	4b5b      	ldr	r3, [pc, #364]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4a5a      	ldr	r2, [pc, #360]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	6213      	str	r3, [r2, #32]
 8002106:	4b58      	ldr	r3, [pc, #352]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4a57      	ldr	r2, [pc, #348]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 800210c:	f023 0304 	bic.w	r3, r3, #4
 8002110:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d015      	beq.n	8002146 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211a:	f7ff f8d5 	bl	80012c8 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002120:	e00a      	b.n	8002138 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002122:	f7ff f8d1 	bl	80012c8 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e0b1      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002138:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ee      	beq.n	8002122 <HAL_RCC_OscConfig+0x37e>
 8002144:	e014      	b.n	8002170 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002146:	f7ff f8bf 	bl	80012c8 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7ff f8bb 	bl	80012c8 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	; 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e09b      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002164:	4b40      	ldr	r3, [pc, #256]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1ee      	bne.n	800214e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002170:	7dfb      	ldrb	r3, [r7, #23]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d105      	bne.n	8002182 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002176:	4b3c      	ldr	r3, [pc, #240]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	4a3b      	ldr	r2, [pc, #236]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002180:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 8087 	beq.w	800229a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800218c:	4b36      	ldr	r3, [pc, #216]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b08      	cmp	r3, #8
 8002196:	d061      	beq.n	800225c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d146      	bne.n	800222e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a0:	4b33      	ldr	r3, [pc, #204]	; (8002270 <HAL_RCC_OscConfig+0x4cc>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a6:	f7ff f88f 	bl	80012c8 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ae:	f7ff f88b 	bl	80012c8 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e06d      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c0:	4b29      	ldr	r3, [pc, #164]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f0      	bne.n	80021ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d4:	d108      	bne.n	80021e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021d6:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	4921      	ldr	r1, [pc, #132]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e8:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a19      	ldr	r1, [r3, #32]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	430b      	orrs	r3, r1
 80021fa:	491b      	ldr	r1, [pc, #108]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x4cc>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7ff f85f 	bl	80012c8 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220e:	f7ff f85b 	bl	80012c8 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e03d      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x46a>
 800222c:	e035      	b.n	800229a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_RCC_OscConfig+0x4cc>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7ff f848 	bl	80012c8 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223c:	f7ff f844 	bl	80012c8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e026      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_OscConfig+0x4c4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x498>
 800225a:	e01e      	b.n	800229a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d107      	bne.n	8002274 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e019      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
 8002268:	40021000 	.word	0x40021000
 800226c:	40007000 	.word	0x40007000
 8002270:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_RCC_OscConfig+0x500>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	429a      	cmp	r2, r3
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d001      	beq.n	800229a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000

080022a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0d0      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022bc:	4b6a      	ldr	r3, [pc, #424]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d910      	bls.n	80022ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b67      	ldr	r3, [pc, #412]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 0207 	bic.w	r2, r3, #7
 80022d2:	4965      	ldr	r1, [pc, #404]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b63      	ldr	r3, [pc, #396]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0b8      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d020      	beq.n	800233a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002304:	4b59      	ldr	r3, [pc, #356]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4a58      	ldr	r2, [pc, #352]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800230e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800231c:	4b53      	ldr	r3, [pc, #332]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a52      	ldr	r2, [pc, #328]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002326:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002328:	4b50      	ldr	r3, [pc, #320]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	494d      	ldr	r1, [pc, #308]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d040      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	4b47      	ldr	r3, [pc, #284]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d115      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e07f      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	4b41      	ldr	r3, [pc, #260]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e073      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e06b      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002386:	4b39      	ldr	r3, [pc, #228]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f023 0203 	bic.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4936      	ldr	r1, [pc, #216]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002398:	f7fe ff96 	bl	80012c8 <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	e00a      	b.n	80023b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a0:	f7fe ff92 	bl	80012c8 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e053      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 020c 	and.w	r2, r3, #12
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d1eb      	bne.n	80023a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d210      	bcs.n	80023f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b24      	ldr	r3, [pc, #144]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 0207 	bic.w	r2, r3, #7
 80023de:	4922      	ldr	r1, [pc, #136]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b20      	ldr	r3, [pc, #128]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e032      	b.n	800245e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4916      	ldr	r1, [pc, #88]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	4313      	orrs	r3, r2
 8002414:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	490e      	ldr	r1, [pc, #56]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002436:	f000 f821 	bl	800247c <HAL_RCC_GetSysClockFreq>
 800243a:	4602      	mov	r2, r0
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	490a      	ldr	r1, [pc, #40]	; (8002470 <HAL_RCC_ClockConfig+0x1c8>)
 8002448:	5ccb      	ldrb	r3, [r1, r3]
 800244a:	fa22 f303 	lsr.w	r3, r2, r3
 800244e:	4a09      	ldr	r2, [pc, #36]	; (8002474 <HAL_RCC_ClockConfig+0x1cc>)
 8002450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_RCC_ClockConfig+0x1d0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fef4 	bl	8001244 <HAL_InitTick>

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40022000 	.word	0x40022000
 800246c:	40021000 	.word	0x40021000
 8002470:	080042b8 	.word	0x080042b8
 8002474:	20000004 	.word	0x20000004
 8002478:	20000008 	.word	0x20000008

0800247c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	2300      	movs	r3, #0
 8002490:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002496:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <HAL_RCC_GetSysClockFreq+0x94>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d002      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0x30>
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d003      	beq.n	80024b2 <HAL_RCC_GetSysClockFreq+0x36>
 80024aa:	e027      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ae:	613b      	str	r3, [r7, #16]
      break;
 80024b0:	e027      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	0c9b      	lsrs	r3, r3, #18
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	4a17      	ldr	r2, [pc, #92]	; (8002518 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024bc:	5cd3      	ldrb	r3, [r2, r3]
 80024be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d010      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_RCC_GetSysClockFreq+0x94>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	0c5b      	lsrs	r3, r3, #17
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	4a11      	ldr	r2, [pc, #68]	; (800251c <HAL_RCC_GetSysClockFreq+0xa0>)
 80024d6:	5cd3      	ldrb	r3, [r2, r3]
 80024d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a0d      	ldr	r2, [pc, #52]	; (8002514 <HAL_RCC_GetSysClockFreq+0x98>)
 80024de:	fb03 f202 	mul.w	r2, r3, r2
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	e004      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a0c      	ldr	r2, [pc, #48]	; (8002520 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024f0:	fb02 f303 	mul.w	r3, r2, r3
 80024f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	613b      	str	r3, [r7, #16]
      break;
 80024fa:	e002      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_RCC_GetSysClockFreq+0x98>)
 80024fe:	613b      	str	r3, [r7, #16]
      break;
 8002500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002502:	693b      	ldr	r3, [r7, #16]
}
 8002504:	4618      	mov	r0, r3
 8002506:	371c      	adds	r7, #28
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000
 8002514:	007a1200 	.word	0x007a1200
 8002518:	080042d0 	.word	0x080042d0
 800251c:	080042e0 	.word	0x080042e0
 8002520:	003d0900 	.word	0x003d0900

08002524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002528:	4b02      	ldr	r3, [pc, #8]	; (8002534 <HAL_RCC_GetHCLKFreq+0x10>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	20000004 	.word	0x20000004

08002538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800253c:	f7ff fff2 	bl	8002524 <HAL_RCC_GetHCLKFreq>
 8002540:	4602      	mov	r2, r0
 8002542:	4b05      	ldr	r3, [pc, #20]	; (8002558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	0a1b      	lsrs	r3, r3, #8
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	4903      	ldr	r1, [pc, #12]	; (800255c <HAL_RCC_GetPCLK1Freq+0x24>)
 800254e:	5ccb      	ldrb	r3, [r1, r3]
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002554:	4618      	mov	r0, r3
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000
 800255c:	080042c8 	.word	0x080042c8

08002560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002564:	f7ff ffde 	bl	8002524 <HAL_RCC_GetHCLKFreq>
 8002568:	4602      	mov	r2, r0
 800256a:	4b05      	ldr	r3, [pc, #20]	; (8002580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	0adb      	lsrs	r3, r3, #11
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	4903      	ldr	r1, [pc, #12]	; (8002584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002576:	5ccb      	ldrb	r3, [r1, r3]
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800257c:	4618      	mov	r0, r3
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	080042c8 	.word	0x080042c8

08002588 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002590:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <RCC_Delay+0x34>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <RCC_Delay+0x38>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	0a5b      	lsrs	r3, r3, #9
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	fb02 f303 	mul.w	r3, r2, r3
 80025a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025a4:	bf00      	nop
  }
  while (Delay --);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1e5a      	subs	r2, r3, #1
 80025aa:	60fa      	str	r2, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f9      	bne.n	80025a4 <RCC_Delay+0x1c>
}
 80025b0:	bf00      	nop
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	20000004 	.word	0x20000004
 80025c0:	10624dd3 	.word	0x10624dd3

080025c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e041      	b.n	800265a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fe fb76 	bl	8000cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3304      	adds	r3, #4
 8002600:	4619      	mov	r1, r3
 8002602:	4610      	mov	r0, r2
 8002604:	f000 fc4e 	bl	8002ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b01      	cmp	r3, #1
 8002676:	d001      	beq.n	800267c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e03a      	b.n	80026f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a18      	ldr	r2, [pc, #96]	; (80026fc <HAL_TIM_Base_Start_IT+0x98>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00e      	beq.n	80026bc <HAL_TIM_Base_Start_IT+0x58>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a6:	d009      	beq.n	80026bc <HAL_TIM_Base_Start_IT+0x58>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <HAL_TIM_Base_Start_IT+0x9c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d004      	beq.n	80026bc <HAL_TIM_Base_Start_IT+0x58>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a13      	ldr	r2, [pc, #76]	; (8002704 <HAL_TIM_Base_Start_IT+0xa0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d111      	bne.n	80026e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2b06      	cmp	r3, #6
 80026cc:	d010      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0201 	orr.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026de:	e007      	b.n	80026f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	40012c00 	.word	0x40012c00
 8002700:	40000400 	.word	0x40000400
 8002704:	40000800 	.word	0x40000800

08002708 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d109      	bne.n	800272c <HAL_TIM_PWM_Start+0x24>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	bf14      	ite	ne
 8002724:	2301      	movne	r3, #1
 8002726:	2300      	moveq	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	e022      	b.n	8002772 <HAL_TIM_PWM_Start+0x6a>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b04      	cmp	r3, #4
 8002730:	d109      	bne.n	8002746 <HAL_TIM_PWM_Start+0x3e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b01      	cmp	r3, #1
 800273c:	bf14      	ite	ne
 800273e:	2301      	movne	r3, #1
 8002740:	2300      	moveq	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	e015      	b.n	8002772 <HAL_TIM_PWM_Start+0x6a>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b08      	cmp	r3, #8
 800274a:	d109      	bne.n	8002760 <HAL_TIM_PWM_Start+0x58>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b01      	cmp	r3, #1
 8002756:	bf14      	ite	ne
 8002758:	2301      	movne	r3, #1
 800275a:	2300      	moveq	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	e008      	b.n	8002772 <HAL_TIM_PWM_Start+0x6a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b01      	cmp	r3, #1
 800276a:	bf14      	ite	ne
 800276c:	2301      	movne	r3, #1
 800276e:	2300      	moveq	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e05e      	b.n	8002838 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d104      	bne.n	800278a <HAL_TIM_PWM_Start+0x82>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002788:	e013      	b.n	80027b2 <HAL_TIM_PWM_Start+0xaa>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b04      	cmp	r3, #4
 800278e:	d104      	bne.n	800279a <HAL_TIM_PWM_Start+0x92>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002798:	e00b      	b.n	80027b2 <HAL_TIM_PWM_Start+0xaa>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b08      	cmp	r3, #8
 800279e:	d104      	bne.n	80027aa <HAL_TIM_PWM_Start+0xa2>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027a8:	e003      	b.n	80027b2 <HAL_TIM_PWM_Start+0xaa>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2202      	movs	r2, #2
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2201      	movs	r2, #1
 80027b8:	6839      	ldr	r1, [r7, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fc6a 	bl	8003094 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1e      	ldr	r2, [pc, #120]	; (8002840 <HAL_TIM_PWM_Start+0x138>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d107      	bne.n	80027da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a18      	ldr	r2, [pc, #96]	; (8002840 <HAL_TIM_PWM_Start+0x138>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00e      	beq.n	8002802 <HAL_TIM_PWM_Start+0xfa>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ec:	d009      	beq.n	8002802 <HAL_TIM_PWM_Start+0xfa>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a14      	ldr	r2, [pc, #80]	; (8002844 <HAL_TIM_PWM_Start+0x13c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d004      	beq.n	8002802 <HAL_TIM_PWM_Start+0xfa>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_TIM_PWM_Start+0x140>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d111      	bne.n	8002826 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2b06      	cmp	r3, #6
 8002812:	d010      	beq.n	8002836 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002824:	e007      	b.n	8002836 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 0201 	orr.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40012c00 	.word	0x40012c00
 8002844:	40000400 	.word	0x40000400
 8002848:	40000800 	.word	0x40000800

0800284c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e093      	b.n	8002988 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d106      	bne.n	800287a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7fe fa6b 	bl	8000d50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2202      	movs	r2, #2
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002890:	f023 0307 	bic.w	r3, r3, #7
 8002894:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3304      	adds	r3, #4
 800289e:	4619      	mov	r1, r3
 80028a0:	4610      	mov	r0, r2
 80028a2:	f000 faff 	bl	8002ea4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ce:	f023 0303 	bic.w	r3, r3, #3
 80028d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	4313      	orrs	r3, r2
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80028ec:	f023 030c 	bic.w	r3, r3, #12
 80028f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	4313      	orrs	r3, r2
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	011a      	lsls	r2, r3, #4
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	031b      	lsls	r3, r3, #12
 800291c:	4313      	orrs	r3, r2
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800292a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	4313      	orrs	r3, r2
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80029b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d110      	bne.n	80029e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d102      	bne.n	80029cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80029c6:	7b7b      	ldrb	r3, [r7, #13]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d001      	beq.n	80029d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e069      	b.n	8002aa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029e0:	e031      	b.n	8002a46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d110      	bne.n	8002a0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80029e8:	7bbb      	ldrb	r3, [r7, #14]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d102      	bne.n	80029f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80029ee:	7b3b      	ldrb	r3, [r7, #12]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d001      	beq.n	80029f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e055      	b.n	8002aa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a08:	e01d      	b.n	8002a46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d108      	bne.n	8002a22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a10:	7bbb      	ldrb	r3, [r7, #14]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d105      	bne.n	8002a22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a16:	7b7b      	ldrb	r3, [r7, #13]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d102      	bne.n	8002a22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a1c:	7b3b      	ldrb	r3, [r7, #12]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d001      	beq.n	8002a26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e03e      	b.n	8002aa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2202      	movs	r2, #2
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_TIM_Encoder_Start+0xc4>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d008      	beq.n	8002a64 <HAL_TIM_Encoder_Start+0xd4>
 8002a52:	e00f      	b.n	8002a74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fb19 	bl	8003094 <TIM_CCxChannelCmd>
      break;
 8002a62:	e016      	b.n	8002a92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	2104      	movs	r1, #4
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 fb11 	bl	8003094 <TIM_CCxChannelCmd>
      break;
 8002a72:	e00e      	b.n	8002a92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 fb09 	bl	8003094 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2201      	movs	r2, #1
 8002a88:	2104      	movs	r1, #4
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 fb02 	bl	8003094 <TIM_CCxChannelCmd>
      break;
 8002a90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0201 	orr.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d122      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d11b      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0202 	mvn.w	r2, #2
 8002ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f9bd 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
 8002af4:	e005      	b.n	8002b02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f9b0 	bl	8002e5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f9bf 	bl	8002e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d122      	bne.n	8002b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d11b      	bne.n	8002b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0204 	mvn.w	r2, #4
 8002b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f993 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
 8002b48:	e005      	b.n	8002b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f986 	bl	8002e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f995 	bl	8002e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d122      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d11b      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0208 	mvn.w	r2, #8
 8002b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2204      	movs	r2, #4
 8002b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f969 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
 8002b9c:	e005      	b.n	8002baa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f95c 	bl	8002e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f96b 	bl	8002e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b10      	cmp	r3, #16
 8002bbc:	d122      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b10      	cmp	r3, #16
 8002bca:	d11b      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0210 	mvn.w	r2, #16
 8002bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2208      	movs	r2, #8
 8002bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f93f 	bl	8002e6e <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f932 	bl	8002e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f941 	bl	8002e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10e      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0201 	mvn.w	r2, #1
 8002c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f90d 	bl	8002e4a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3a:	2b80      	cmp	r3, #128	; 0x80
 8002c3c:	d10e      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c48:	2b80      	cmp	r3, #128	; 0x80
 8002c4a:	d107      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 faa7 	bl	80031aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b40      	cmp	r3, #64	; 0x40
 8002c68:	d10e      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c74:	2b40      	cmp	r3, #64	; 0x40
 8002c76:	d107      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f905 	bl	8002e92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d10e      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d107      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f06f 0220 	mvn.w	r2, #32
 8002cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fa72 	bl	8003198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_TIM_ConfigClockSource+0x1c>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e0b4      	b.n	8002e42 <HAL_TIM_ConfigClockSource+0x186>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d10:	d03e      	beq.n	8002d90 <HAL_TIM_ConfigClockSource+0xd4>
 8002d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d16:	f200 8087 	bhi.w	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d1e:	f000 8086 	beq.w	8002e2e <HAL_TIM_ConfigClockSource+0x172>
 8002d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d26:	d87f      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d28:	2b70      	cmp	r3, #112	; 0x70
 8002d2a:	d01a      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0xa6>
 8002d2c:	2b70      	cmp	r3, #112	; 0x70
 8002d2e:	d87b      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d30:	2b60      	cmp	r3, #96	; 0x60
 8002d32:	d050      	beq.n	8002dd6 <HAL_TIM_ConfigClockSource+0x11a>
 8002d34:	2b60      	cmp	r3, #96	; 0x60
 8002d36:	d877      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d38:	2b50      	cmp	r3, #80	; 0x50
 8002d3a:	d03c      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0xfa>
 8002d3c:	2b50      	cmp	r3, #80	; 0x50
 8002d3e:	d873      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d40:	2b40      	cmp	r3, #64	; 0x40
 8002d42:	d058      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x13a>
 8002d44:	2b40      	cmp	r3, #64	; 0x40
 8002d46:	d86f      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d48:	2b30      	cmp	r3, #48	; 0x30
 8002d4a:	d064      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0x15a>
 8002d4c:	2b30      	cmp	r3, #48	; 0x30
 8002d4e:	d86b      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d060      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0x15a>
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d867      	bhi.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d05c      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0x15a>
 8002d5c:	2b10      	cmp	r3, #16
 8002d5e:	d05a      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0x15a>
 8002d60:	e062      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d72:	f000 f970 	bl	8003056 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	609a      	str	r2, [r3, #8]
      break;
 8002d8e:	e04f      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002da0:	f000 f959 	bl	8003056 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002db2:	609a      	str	r2, [r3, #8]
      break;
 8002db4:	e03c      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f000 f8d0 	bl	8002f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2150      	movs	r1, #80	; 0x50
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 f927 	bl	8003022 <TIM_ITRx_SetConfig>
      break;
 8002dd4:	e02c      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002de2:	461a      	mov	r2, r3
 8002de4:	f000 f8ee 	bl	8002fc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2160      	movs	r1, #96	; 0x60
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 f917 	bl	8003022 <TIM_ITRx_SetConfig>
      break;
 8002df4:	e01c      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e02:	461a      	mov	r2, r3
 8002e04:	f000 f8b0 	bl	8002f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2140      	movs	r1, #64	; 0x40
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 f907 	bl	8003022 <TIM_ITRx_SetConfig>
      break;
 8002e14:	e00c      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4610      	mov	r0, r2
 8002e22:	f000 f8fe 	bl	8003022 <TIM_ITRx_SetConfig>
      break;
 8002e26:	e003      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e2c:	e000      	b.n	8002e30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a29      	ldr	r2, [pc, #164]	; (8002f5c <TIM_Base_SetConfig+0xb8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00b      	beq.n	8002ed4 <TIM_Base_SetConfig+0x30>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec2:	d007      	beq.n	8002ed4 <TIM_Base_SetConfig+0x30>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a26      	ldr	r2, [pc, #152]	; (8002f60 <TIM_Base_SetConfig+0xbc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d003      	beq.n	8002ed4 <TIM_Base_SetConfig+0x30>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a25      	ldr	r2, [pc, #148]	; (8002f64 <TIM_Base_SetConfig+0xc0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d108      	bne.n	8002ee6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a1c      	ldr	r2, [pc, #112]	; (8002f5c <TIM_Base_SetConfig+0xb8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00b      	beq.n	8002f06 <TIM_Base_SetConfig+0x62>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef4:	d007      	beq.n	8002f06 <TIM_Base_SetConfig+0x62>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a19      	ldr	r2, [pc, #100]	; (8002f60 <TIM_Base_SetConfig+0xbc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d003      	beq.n	8002f06 <TIM_Base_SetConfig+0x62>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a18      	ldr	r2, [pc, #96]	; (8002f64 <TIM_Base_SetConfig+0xc0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d108      	bne.n	8002f18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a07      	ldr	r2, [pc, #28]	; (8002f5c <TIM_Base_SetConfig+0xb8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d103      	bne.n	8002f4c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	615a      	str	r2, [r3, #20]
}
 8002f52:	bf00      	nop
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	40012c00 	.word	0x40012c00
 8002f60:	40000400 	.word	0x40000400
 8002f64:	40000800 	.word	0x40000800

08002f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f023 0201 	bic.w	r2, r3, #1
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f023 030a 	bic.w	r3, r3, #10
 8002fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	621a      	str	r2, [r3, #32]
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f023 0210 	bic.w	r2, r3, #16
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	031b      	lsls	r3, r3, #12
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003000:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	621a      	str	r2, [r3, #32]
}
 8003018:	bf00      	nop
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003022:	b480      	push	{r7}
 8003024:	b085      	sub	sp, #20
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003038:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	f043 0307 	orr.w	r3, r3, #7
 8003044:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	609a      	str	r2, [r3, #8]
}
 800304c:	bf00      	nop
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr

08003056 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003056:	b480      	push	{r7}
 8003058:	b087      	sub	sp, #28
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003070:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	021a      	lsls	r2, r3, #8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	431a      	orrs	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4313      	orrs	r3, r2
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	609a      	str	r2, [r3, #8]
}
 800308a:	bf00      	nop
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 031f 	and.w	r3, r3, #31
 80030a6:	2201      	movs	r2, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a1a      	ldr	r2, [r3, #32]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	401a      	ands	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a1a      	ldr	r2, [r3, #32]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	fa01 f303 	lsl.w	r3, r1, r3
 80030cc:	431a      	orrs	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	621a      	str	r2, [r3, #32]
}
 80030d2:	bf00      	nop
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e046      	b.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a16      	ldr	r2, [pc, #88]	; (800318c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00e      	beq.n	8003156 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003140:	d009      	beq.n	8003156 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a12      	ldr	r2, [pc, #72]	; (8003190 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d004      	beq.n	8003156 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a10      	ldr	r2, [pc, #64]	; (8003194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d10c      	bne.n	8003170 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800315c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	4313      	orrs	r3, r2
 8003166:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800

08003198 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e042      	b.n	8003254 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7fd fe1c 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2224      	movs	r2, #36	; 0x24
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 ff77 	bl	80040f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003214:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003224:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003234:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08c      	sub	sp, #48	; 0x30
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	4613      	mov	r3, r2
 8003268:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b20      	cmp	r3, #32
 8003274:	d156      	bne.n	8003324 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <HAL_UART_Transmit_DMA+0x26>
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e04f      	b.n	8003326 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	88fa      	ldrh	r2, [r7, #6]
 8003290:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	88fa      	ldrh	r2, [r7, #6]
 8003296:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2221      	movs	r2, #33	; 0x21
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	4a21      	ldr	r2, [pc, #132]	; (8003330 <HAL_UART_Transmit_DMA+0xd4>)
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	4a20      	ldr	r2, [pc, #128]	; (8003334 <HAL_UART_Transmit_DMA+0xd8>)
 80032b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	4a1f      	ldr	r2, [pc, #124]	; (8003338 <HAL_UART_Transmit_DMA+0xdc>)
 80032bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	2200      	movs	r2, #0
 80032c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80032c6:	f107 0308 	add.w	r3, r7, #8
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80032d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3304      	adds	r3, #4
 80032da:	461a      	mov	r2, r3
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	f7fe f965 	bl	80015ac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3314      	adds	r3, #20
 80032f2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	e853 3f00 	ldrex	r3, [r3]
 80032fa:	617b      	str	r3, [r7, #20]
   return(result);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3314      	adds	r3, #20
 800330a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800330c:	627a      	str	r2, [r7, #36]	; 0x24
 800330e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003310:	6a39      	ldr	r1, [r7, #32]
 8003312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003314:	e841 2300 	strex	r3, r2, [r1]
 8003318:	61fb      	str	r3, [r7, #28]
   return(result);
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1e5      	bne.n	80032ec <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	e000      	b.n	8003326 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003324:	2302      	movs	r3, #2
  }
}
 8003326:	4618      	mov	r0, r3
 8003328:	3730      	adds	r7, #48	; 0x30
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	0800398b 	.word	0x0800398b
 8003334:	08003a25 	.word	0x08003a25
 8003338:	08003ba9 	.word	0x08003ba9

0800333c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08c      	sub	sp, #48	; 0x30
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	4613      	mov	r3, r2
 8003348:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b20      	cmp	r3, #32
 8003354:	d14a      	bne.n	80033ec <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e043      	b.n	80033ee <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	461a      	mov	r2, r3
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 fc5f 	bl	8003c3c <UART_Start_Receive_DMA>
 800337e:	4603      	mov	r3, r0
 8003380:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003384:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003388:	2b00      	cmp	r3, #0
 800338a:	d12c      	bne.n	80033e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	2b01      	cmp	r3, #1
 8003392:	d125      	bne.n	80033e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003394:	2300      	movs	r3, #0
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	330c      	adds	r3, #12
 80033b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	e853 3f00 	ldrex	r3, [r3]
 80033b8:	617b      	str	r3, [r7, #20]
   return(result);
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f043 0310 	orr.w	r3, r3, #16
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	330c      	adds	r3, #12
 80033c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033ca:	627a      	str	r2, [r7, #36]	; 0x24
 80033cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ce:	6a39      	ldr	r1, [r7, #32]
 80033d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d2:	e841 2300 	strex	r3, r2, [r1]
 80033d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1e5      	bne.n	80033aa <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80033de:	e002      	b.n	80033e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80033e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033ea:	e000      	b.n	80033ee <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80033ec:	2302      	movs	r3, #2
  }
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3730      	adds	r7, #48	; 0x30
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_UARTEx_GetRxEventType>:
  *        When DMA is configured in Circular Mode, HT, TC or IDLE events don't stop Reception process;
  * @param  huart UART handle.
  * @retval Rx Event Type (returned value will be a value of @ref UART_RxEvent_Type_Values)
  */
HAL_UART_RxEventTypeTypeDef HAL_UARTEx_GetRxEventType(UART_HandleTypeDef *huart)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  /* Return Rx Event type value, as stored in UART handle */
  return(huart->RxEventType);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b0ba      	sub	sp, #232	; 0xe8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003438:	2300      	movs	r3, #0
 800343a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800343e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800344a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10f      	bne.n	8003472 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b00      	cmp	r3, #0
 800345c:	d009      	beq.n	8003472 <HAL_UART_IRQHandler+0x66>
 800345e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fd84 	bl	8003f78 <UART_Receive_IT>
      return;
 8003470:	e25b      	b.n	800392a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003472:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 80de 	beq.w	8003638 <HAL_UART_IRQHandler+0x22c>
 800347c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d106      	bne.n	8003496 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800348c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80d1 	beq.w	8003638 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_UART_IRQHandler+0xae>
 80034a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f043 0201 	orr.w	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00b      	beq.n	80034de <HAL_UART_IRQHandler+0xd2>
 80034c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	f043 0202 	orr.w	r2, r3, #2
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00b      	beq.n	8003502 <HAL_UART_IRQHandler+0xf6>
 80034ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	f043 0204 	orr.w	r2, r3, #4
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d011      	beq.n	8003532 <HAL_UART_IRQHandler+0x126>
 800350e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b00      	cmp	r3, #0
 8003518:	d105      	bne.n	8003526 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800351a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f043 0208 	orr.w	r2, r3, #8
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 81f2 	beq.w	8003920 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800353c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_UART_IRQHandler+0x14e>
 8003548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fd0f 	bl	8003f78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf14      	ite	ne
 8003568:	2301      	movne	r3, #1
 800356a:	2300      	moveq	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d103      	bne.n	8003586 <HAL_UART_IRQHandler+0x17a>
 800357e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003582:	2b00      	cmp	r3, #0
 8003584:	d04f      	beq.n	8003626 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fc19 	bl	8003dbe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d041      	beq.n	800361e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	3314      	adds	r3, #20
 80035a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80035b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3314      	adds	r3, #20
 80035c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80035c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80035ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80035d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035d6:	e841 2300 	strex	r3, r2, [r1]
 80035da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80035de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1d9      	bne.n	800359a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d013      	beq.n	8003616 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f2:	4a7e      	ldr	r2, [pc, #504]	; (80037ec <HAL_UART_IRQHandler+0x3e0>)
 80035f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe f872 	bl	80016e4 <HAL_DMA_Abort_IT>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d016      	beq.n	8003634 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003610:	4610      	mov	r0, r2
 8003612:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003614:	e00e      	b.n	8003634 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f9ae 	bl	8003978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800361c:	e00a      	b.n	8003634 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f9aa 	bl	8003978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003624:	e006      	b.n	8003634 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f9a6 	bl	8003978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003632:	e175      	b.n	8003920 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003634:	bf00      	nop
    return;
 8003636:	e173      	b.n	8003920 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	2b01      	cmp	r3, #1
 800363e:	f040 814f 	bne.w	80038e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 8148 	beq.w	80038e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 8141 	beq.w	80038e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800365e:	2300      	movs	r3, #0
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 80b6 	beq.w	80037f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003690:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8145 	beq.w	8003924 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800369e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036a2:	429a      	cmp	r2, r3
 80036a4:	f080 813e 	bcs.w	8003924 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	f000 8088 	beq.w	80037cc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036ca:	e853 3f00 	ldrex	r3, [r3]
 80036ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80036d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	330c      	adds	r3, #12
 80036e4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80036e8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80036f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80036f8:	e841 2300 	strex	r3, r2, [r1]
 80036fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003700:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1d9      	bne.n	80036bc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3314      	adds	r3, #20
 800370e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003712:	e853 3f00 	ldrex	r3, [r3]
 8003716:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003718:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3314      	adds	r3, #20
 8003728:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800372c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003730:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003734:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003738:	e841 2300 	strex	r3, r2, [r1]
 800373c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800373e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e1      	bne.n	8003708 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3314      	adds	r3, #20
 800374a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800374e:	e853 3f00 	ldrex	r3, [r3]
 8003752:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800375a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3314      	adds	r3, #20
 8003764:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003768:	66fa      	str	r2, [r7, #108]	; 0x6c
 800376a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800376e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003770:	e841 2300 	strex	r3, r2, [r1]
 8003774:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e3      	bne.n	8003744 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	330c      	adds	r3, #12
 8003790:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003794:	e853 3f00 	ldrex	r3, [r3]
 8003798:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800379a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800379c:	f023 0310 	bic.w	r3, r3, #16
 80037a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	330c      	adds	r3, #12
 80037aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80037ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80037b0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037b6:	e841 2300 	strex	r3, r2, [r1]
 80037ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80037bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1e3      	bne.n	800378a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd ff50 	bl	800166c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037da:	b29b      	uxth	r3, r3
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	b29b      	uxth	r3, r3
 80037e0:	4619      	mov	r1, r3
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd fc2a 	bl	800103c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037e8:	e09c      	b.n	8003924 <HAL_UART_IRQHandler+0x518>
 80037ea:	bf00      	nop
 80037ec:	08003e83 	.word	0x08003e83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 808e 	beq.w	8003928 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800380c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 8089 	beq.w	8003928 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	330c      	adds	r3, #12
 800381c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003820:	e853 3f00 	ldrex	r3, [r3]
 8003824:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003828:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800382c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	330c      	adds	r3, #12
 8003836:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800383a:	647a      	str	r2, [r7, #68]	; 0x44
 800383c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003840:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e3      	bne.n	8003816 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3314      	adds	r3, #20
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	e853 3f00 	ldrex	r3, [r3]
 800385c:	623b      	str	r3, [r7, #32]
   return(result);
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	f023 0301 	bic.w	r3, r3, #1
 8003864:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3314      	adds	r3, #20
 800386e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003872:	633a      	str	r2, [r7, #48]	; 0x30
 8003874:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800387a:	e841 2300 	strex	r3, r2, [r1]
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1e3      	bne.n	800384e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	330c      	adds	r3, #12
 800389a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	e853 3f00 	ldrex	r3, [r3]
 80038a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0310 	bic.w	r3, r3, #16
 80038aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	330c      	adds	r3, #12
 80038b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80038b8:	61fa      	str	r2, [r7, #28]
 80038ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038bc:	69b9      	ldr	r1, [r7, #24]
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	617b      	str	r3, [r7, #20]
   return(result);
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e3      	bne.n	8003894 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038d6:	4619      	mov	r1, r3
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7fd fbaf 	bl	800103c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038de:	e023      	b.n	8003928 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d009      	beq.n	8003900 <HAL_UART_IRQHandler+0x4f4>
 80038ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fad6 	bl	8003eaa <UART_Transmit_IT>
    return;
 80038fe:	e014      	b.n	800392a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00e      	beq.n	800392a <HAL_UART_IRQHandler+0x51e>
 800390c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fb15 	bl	8003f48 <UART_EndTransmit_IT>
    return;
 800391e:	e004      	b.n	800392a <HAL_UART_IRQHandler+0x51e>
    return;
 8003920:	bf00      	nop
 8003922:	e002      	b.n	800392a <HAL_UART_IRQHandler+0x51e>
      return;
 8003924:	bf00      	nop
 8003926:	e000      	b.n	800392a <HAL_UART_IRQHandler+0x51e>
      return;
 8003928:	bf00      	nop
  }
}
 800392a:	37e8      	adds	r7, #232	; 0xe8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr

08003942 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr

0800398a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b090      	sub	sp, #64	; 0x40
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d137      	bne.n	8003a16 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80039a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a8:	2200      	movs	r2, #0
 80039aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80039ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3314      	adds	r3, #20
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	e853 3f00 	ldrex	r3, [r3]
 80039ba:	623b      	str	r3, [r7, #32]
   return(result);
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80039c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3314      	adds	r3, #20
 80039ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039cc:	633a      	str	r2, [r7, #48]	; 0x30
 80039ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d4:	e841 2300 	strex	r3, r2, [r1]
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1e5      	bne.n	80039ac <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039f6:	637b      	str	r3, [r7, #52]	; 0x34
 80039f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	330c      	adds	r3, #12
 80039fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a00:	61fa      	str	r2, [r7, #28]
 8003a02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	69b9      	ldr	r1, [r7, #24]
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e5      	bne.n	80039e0 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a14:	e002      	b.n	8003a1c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003a16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003a18:	f7ff ff8a 	bl	8003930 <HAL_UART_TxCpltCallback>
}
 8003a1c:	bf00      	nop
 8003a1e:	3740      	adds	r7, #64	; 0x40
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f7ff ff85 	bl	8003942 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b09c      	sub	sp, #112	; 0x70
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d172      	bne.n	8003b42 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5e:	2200      	movs	r2, #0
 8003a60:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	330c      	adds	r3, #12
 8003a68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a78:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	330c      	adds	r3, #12
 8003a80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a82:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a84:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e5      	bne.n	8003a62 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3314      	adds	r3, #20
 8003a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	667b      	str	r3, [r7, #100]	; 0x64
 8003aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3314      	adds	r3, #20
 8003ab4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ab6:	647a      	str	r2, [r7, #68]	; 0x44
 8003ab8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003abc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e5      	bne.n	8003a96 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3314      	adds	r3, #20
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3314      	adds	r3, #20
 8003ae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aea:	633a      	str	r2, [r7, #48]	; 0x30
 8003aec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e5      	bne.n	8003aca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d119      	bne.n	8003b42 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	330c      	adds	r3, #12
 8003b14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f023 0310 	bic.w	r3, r3, #16
 8003b24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	330c      	adds	r3, #12
 8003b2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b2e:	61fa      	str	r2, [r7, #28]
 8003b30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	69b9      	ldr	r1, [r7, #24]
 8003b34:	69fa      	ldr	r2, [r7, #28]
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	617b      	str	r3, [r7, #20]
   return(result);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e5      	bne.n	8003b0e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b44:	2200      	movs	r2, #0
 8003b46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d106      	bne.n	8003b5e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b54:	4619      	mov	r1, r3
 8003b56:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003b58:	f7fd fa70 	bl	800103c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b5c:	e002      	b.n	8003b64 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003b5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003b60:	f7ff fef8 	bl	8003954 <HAL_UART_RxCpltCallback>
}
 8003b64:	bf00      	nop
 8003b66:	3770      	adds	r7, #112	; 0x70
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d108      	bne.n	8003b9a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b8c:	085b      	lsrs	r3, r3, #1
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	4619      	mov	r1, r3
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f7fd fa52 	bl	800103c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b98:	e002      	b.n	8003ba0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f7ff fee3 	bl	8003966 <HAL_UART_RxHalfCpltCallback>
}
 8003ba0:	bf00      	nop
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	bf14      	ite	ne
 8003bc8:	2301      	movne	r3, #1
 8003bca:	2300      	moveq	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b21      	cmp	r3, #33	; 0x21
 8003bda:	d108      	bne.n	8003bee <UART_DMAError+0x46>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d005      	beq.n	8003bee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2200      	movs	r2, #0
 8003be6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003be8:	68b8      	ldr	r0, [r7, #8]
 8003bea:	f000 f8c1 	bl	8003d70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf14      	ite	ne
 8003bfc:	2301      	movne	r3, #1
 8003bfe:	2300      	moveq	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b22      	cmp	r3, #34	; 0x22
 8003c0e:	d108      	bne.n	8003c22 <UART_DMAError+0x7a>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003c1c:	68b8      	ldr	r0, [r7, #8]
 8003c1e:	f000 f8ce 	bl	8003dbe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	f043 0210 	orr.w	r2, r3, #16
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c2e:	68b8      	ldr	r0, [r7, #8]
 8003c30:	f7ff fea2 	bl	8003978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c34:	bf00      	nop
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b098      	sub	sp, #96	; 0x60
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	4613      	mov	r3, r2
 8003c48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	88fa      	ldrh	r2, [r7, #6]
 8003c54:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2222      	movs	r2, #34	; 0x22
 8003c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	4a3e      	ldr	r2, [pc, #248]	; (8003d64 <UART_Start_Receive_DMA+0x128>)
 8003c6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c70:	4a3d      	ldr	r2, [pc, #244]	; (8003d68 <UART_Start_Receive_DMA+0x12c>)
 8003c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c78:	4a3c      	ldr	r2, [pc, #240]	; (8003d6c <UART_Start_Receive_DMA+0x130>)
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c80:	2200      	movs	r2, #0
 8003c82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003c84:	f107 0308 	add.w	r3, r7, #8
 8003c88:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3304      	adds	r3, #4
 8003c94:	4619      	mov	r1, r3
 8003c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	88fb      	ldrh	r3, [r7, #6]
 8003c9c:	f7fd fc86 	bl	80015ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	613b      	str	r3, [r7, #16]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d019      	beq.n	8003cf2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	330c      	adds	r3, #12
 8003cc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc8:	e853 3f00 	ldrex	r3, [r3]
 8003ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	330c      	adds	r3, #12
 8003cdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cde:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003ce0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003ce4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ce6:	e841 2300 	strex	r3, r2, [r1]
 8003cea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1e5      	bne.n	8003cbe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3314      	adds	r3, #20
 8003cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	657b      	str	r3, [r7, #84]	; 0x54
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3314      	adds	r3, #20
 8003d10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d12:	63ba      	str	r2, [r7, #56]	; 0x38
 8003d14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e5      	bne.n	8003cf2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3314      	adds	r3, #20
 8003d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	617b      	str	r3, [r7, #20]
   return(result);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d3c:	653b      	str	r3, [r7, #80]	; 0x50
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3314      	adds	r3, #20
 8003d44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d46:	627a      	str	r2, [r7, #36]	; 0x24
 8003d48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	6a39      	ldr	r1, [r7, #32]
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e5      	bne.n	8003d26 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3760      	adds	r7, #96	; 0x60
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	08003a41 	.word	0x08003a41
 8003d68:	08003b6d 	.word	0x08003b6d
 8003d6c:	08003ba9 	.word	0x08003ba9

08003d70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b089      	sub	sp, #36	; 0x24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	e853 3f00 	ldrex	r3, [r3]
 8003d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	330c      	adds	r3, #12
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	61ba      	str	r2, [r7, #24]
 8003d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	6979      	ldr	r1, [r7, #20]
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	e841 2300 	strex	r3, r2, [r1]
 8003da4:	613b      	str	r3, [r7, #16]
   return(result);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1e5      	bne.n	8003d78 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003db4:	bf00      	nop
 8003db6:	3724      	adds	r7, #36	; 0x24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr

08003dbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b095      	sub	sp, #84	; 0x54
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	330c      	adds	r3, #12
 8003dcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	330c      	adds	r3, #12
 8003de4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003de6:	643a      	str	r2, [r7, #64]	; 0x40
 8003de8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e5      	bne.n	8003dc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3314      	adds	r3, #20
 8003e00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3314      	adds	r3, #20
 8003e18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e5      	bne.n	8003dfa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d119      	bne.n	8003e6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	330c      	adds	r3, #12
 8003e3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f023 0310 	bic.w	r3, r3, #16
 8003e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	330c      	adds	r3, #12
 8003e54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e56:	61ba      	str	r2, [r7, #24]
 8003e58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6979      	ldr	r1, [r7, #20]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	613b      	str	r3, [r7, #16]
   return(result);
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e5      	bne.n	8003e36 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e78:	bf00      	nop
 8003e7a:	3754      	adds	r7, #84	; 0x54
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr

08003e82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f7ff fd6b 	bl	8003978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ea2:	bf00      	nop
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b21      	cmp	r3, #33	; 0x21
 8003ebc:	d13e      	bne.n	8003f3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec6:	d114      	bne.n	8003ef2 <UART_Transmit_IT+0x48>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d110      	bne.n	8003ef2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ee4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	1c9a      	adds	r2, r3, #2
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	621a      	str	r2, [r3, #32]
 8003ef0:	e008      	b.n	8003f04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	1c59      	adds	r1, r3, #1
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6211      	str	r1, [r2, #32]
 8003efc:	781a      	ldrb	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	4619      	mov	r1, r3
 8003f12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10f      	bne.n	8003f38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	e000      	b.n	8003f3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f3c:	2302      	movs	r3, #2
  }
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff fce1 	bl	8003930 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08c      	sub	sp, #48	; 0x30
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b22      	cmp	r3, #34	; 0x22
 8003f8a:	f040 80ae 	bne.w	80040ea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f96:	d117      	bne.n	8003fc8 <UART_Receive_IT+0x50>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d113      	bne.n	8003fc8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	1c9a      	adds	r2, r3, #2
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	629a      	str	r2, [r3, #40]	; 0x28
 8003fc6:	e026      	b.n	8004016 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fda:	d007      	beq.n	8003fec <UART_Receive_IT+0x74>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <UART_Receive_IT+0x82>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d106      	bne.n	8003ffa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff6:	701a      	strb	r2, [r3, #0]
 8003ff8:	e008      	b.n	800400c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	b2db      	uxtb	r3, r3
 8004002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004006:	b2da      	uxtb	r2, r3
 8004008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29b      	uxth	r3, r3
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	4619      	mov	r1, r3
 8004024:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004026:	2b00      	cmp	r3, #0
 8004028:	d15d      	bne.n	80040e6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0220 	bic.w	r2, r2, #32
 8004038:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004048:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0201 	bic.w	r2, r2, #1
 8004058:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	2b01      	cmp	r3, #1
 800406e:	d135      	bne.n	80040dc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	330c      	adds	r3, #12
 800407c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	e853 3f00 	ldrex	r3, [r3]
 8004084:	613b      	str	r3, [r7, #16]
   return(result);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f023 0310 	bic.w	r3, r3, #16
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	330c      	adds	r3, #12
 8004094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004096:	623a      	str	r2, [r7, #32]
 8004098:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	69f9      	ldr	r1, [r7, #28]
 800409c:	6a3a      	ldr	r2, [r7, #32]
 800409e:	e841 2300 	strex	r3, r2, [r1]
 80040a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1e5      	bne.n	8004076 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d10a      	bne.n	80040ce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040d2:	4619      	mov	r1, r3
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7fc ffb1 	bl	800103c <HAL_UARTEx_RxEventCallback>
 80040da:	e002      	b.n	80040e2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff fc39 	bl	8003954 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	e002      	b.n	80040ec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	e000      	b.n	80040ec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80040ea:	2302      	movs	r3, #2
  }
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3730      	adds	r7, #48	; 0x30
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800412e:	f023 030c 	bic.w	r3, r3, #12
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	68b9      	ldr	r1, [r7, #8]
 8004138:	430b      	orrs	r3, r1
 800413a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a2c      	ldr	r2, [pc, #176]	; (8004208 <UART_SetConfig+0x114>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d103      	bne.n	8004164 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800415c:	f7fe fa00 	bl	8002560 <HAL_RCC_GetPCLK2Freq>
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	e002      	b.n	800416a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004164:	f7fe f9e8 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
 8004168:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	009a      	lsls	r2, r3, #2
 8004174:	441a      	add	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	4a22      	ldr	r2, [pc, #136]	; (800420c <UART_SetConfig+0x118>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	0119      	lsls	r1, r3, #4
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009a      	lsls	r2, r3, #2
 8004194:	441a      	add	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a0:	4b1a      	ldr	r3, [pc, #104]	; (800420c <UART_SetConfig+0x118>)
 80041a2:	fba3 0302 	umull	r0, r3, r3, r2
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	2064      	movs	r0, #100	; 0x64
 80041aa:	fb00 f303 	mul.w	r3, r0, r3
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	3332      	adds	r3, #50	; 0x32
 80041b4:	4a15      	ldr	r2, [pc, #84]	; (800420c <UART_SetConfig+0x118>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c0:	4419      	add	r1, r3
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009a      	lsls	r2, r3, #2
 80041cc:	441a      	add	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041d8:	4b0c      	ldr	r3, [pc, #48]	; (800420c <UART_SetConfig+0x118>)
 80041da:	fba3 0302 	umull	r0, r3, r3, r2
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	2064      	movs	r0, #100	; 0x64
 80041e2:	fb00 f303 	mul.w	r3, r0, r3
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	3332      	adds	r3, #50	; 0x32
 80041ec:	4a07      	ldr	r2, [pc, #28]	; (800420c <UART_SetConfig+0x118>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	f003 020f 	and.w	r2, r3, #15
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	440a      	add	r2, r1
 80041fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004200:	bf00      	nop
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40013800 	.word	0x40013800
 800420c:	51eb851f 	.word	0x51eb851f

08004210 <memset>:
 8004210:	4603      	mov	r3, r0
 8004212:	4402      	add	r2, r0
 8004214:	4293      	cmp	r3, r2
 8004216:	d100      	bne.n	800421a <memset+0xa>
 8004218:	4770      	bx	lr
 800421a:	f803 1b01 	strb.w	r1, [r3], #1
 800421e:	e7f9      	b.n	8004214 <memset+0x4>

08004220 <strstr>:
 8004220:	780a      	ldrb	r2, [r1, #0]
 8004222:	b570      	push	{r4, r5, r6, lr}
 8004224:	b96a      	cbnz	r2, 8004242 <strstr+0x22>
 8004226:	bd70      	pop	{r4, r5, r6, pc}
 8004228:	429a      	cmp	r2, r3
 800422a:	d109      	bne.n	8004240 <strstr+0x20>
 800422c:	460c      	mov	r4, r1
 800422e:	4605      	mov	r5, r0
 8004230:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f6      	beq.n	8004226 <strstr+0x6>
 8004238:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800423c:	429e      	cmp	r6, r3
 800423e:	d0f7      	beq.n	8004230 <strstr+0x10>
 8004240:	3001      	adds	r0, #1
 8004242:	7803      	ldrb	r3, [r0, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1ef      	bne.n	8004228 <strstr+0x8>
 8004248:	4618      	mov	r0, r3
 800424a:	e7ec      	b.n	8004226 <strstr+0x6>

0800424c <__libc_init_array>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	2600      	movs	r6, #0
 8004250:	4d0c      	ldr	r5, [pc, #48]	; (8004284 <__libc_init_array+0x38>)
 8004252:	4c0d      	ldr	r4, [pc, #52]	; (8004288 <__libc_init_array+0x3c>)
 8004254:	1b64      	subs	r4, r4, r5
 8004256:	10a4      	asrs	r4, r4, #2
 8004258:	42a6      	cmp	r6, r4
 800425a:	d109      	bne.n	8004270 <__libc_init_array+0x24>
 800425c:	f000 f81a 	bl	8004294 <_init>
 8004260:	2600      	movs	r6, #0
 8004262:	4d0a      	ldr	r5, [pc, #40]	; (800428c <__libc_init_array+0x40>)
 8004264:	4c0a      	ldr	r4, [pc, #40]	; (8004290 <__libc_init_array+0x44>)
 8004266:	1b64      	subs	r4, r4, r5
 8004268:	10a4      	asrs	r4, r4, #2
 800426a:	42a6      	cmp	r6, r4
 800426c:	d105      	bne.n	800427a <__libc_init_array+0x2e>
 800426e:	bd70      	pop	{r4, r5, r6, pc}
 8004270:	f855 3b04 	ldr.w	r3, [r5], #4
 8004274:	4798      	blx	r3
 8004276:	3601      	adds	r6, #1
 8004278:	e7ee      	b.n	8004258 <__libc_init_array+0xc>
 800427a:	f855 3b04 	ldr.w	r3, [r5], #4
 800427e:	4798      	blx	r3
 8004280:	3601      	adds	r6, #1
 8004282:	e7f2      	b.n	800426a <__libc_init_array+0x1e>
 8004284:	080042e4 	.word	0x080042e4
 8004288:	080042e4 	.word	0x080042e4
 800428c:	080042e4 	.word	0x080042e4
 8004290:	080042e8 	.word	0x080042e8

08004294 <_init>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	bf00      	nop
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr

080042a0 <_fini>:
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	bf00      	nop
 80042a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a6:	bc08      	pop	{r3}
 80042a8:	469e      	mov	lr, r3
 80042aa:	4770      	bx	lr
